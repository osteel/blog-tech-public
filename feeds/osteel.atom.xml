<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>osteel's blog</title><link href="https://tech.osteel.me/" rel="alternate"></link><link href="https://tech.osteel.me/feeds/osteel.atom.xml" rel="self"></link><id>https://tech.osteel.me/</id><updated>2019-06-29T00:00:00+01:00</updated><entry><title>Talking about Collections at PHP Quebec</title><link href="https://tech.osteel.me/posts/talking-about-collections-at-php-quebec" rel="alternate"></link><published>2019-06-29T00:00:00+01:00</published><updated>2019-06-29T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2019-06-29:posts/talking-about-collections-at-php-quebec</id><summary type="html">&lt;p&gt;Who knew Collections were so popular?&lt;/p&gt;
&lt;p&gt;After Laravel Montreal &lt;a href="/posts/2019/05/28/talking-about-collections-at-laravel-montreal.html" title="Talking about Collections at Laravel Montreal"&gt;last month&lt;/a&gt;, I will be speaking about Collections again at PHP Quebec on &lt;a href="https://www.meetup.com/PHPQuebec/events/262624525/"&gt;July 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This talk will be less Laravel-centric, instead highlighting &lt;a href="https://github.com/tightenco/collect"&gt;Tighten Co.'s standalone package&lt;/a&gt;, which extracted the Collection class from the web artisans' framework to make it available to any PHP project.&lt;/p&gt;
&lt;p&gt;So let's grab a beer and have a chat at &lt;a href="https://www.gorillagroup.com/"&gt;Gorilla's office&lt;/a&gt; next Thursday!&lt;/p&gt;
&lt;p&gt;(If you can't make it but wish to know more about Collections nevertheless, I have put together a &lt;a href="https://github.com/osteel/php-collections-presentation"&gt;GitHub repository&lt;/a&gt; with a demo application containing all of the examples I will be showing, as well as the presentation's &lt;a href="https://github.com/osteel/php-collections-presentation/blob/master/presentation.pdf"&gt;slides&lt;/a&gt;.)&lt;/p&gt;</summary><category term="php"></category><category term="collections"></category><category term="phpquebec"></category><category term="presentation"></category></entry><entry><title>Talking about Collections at Laravel Montreal</title><link href="https://tech.osteel.me/posts/talking-about-collections-at-laravel-montreal" rel="alternate"></link><published>2019-05-28T00:00:00+01:00</published><updated>2019-05-28T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2019-05-28:posts/talking-about-collections-at-laravel-montreal</id><summary type="html">&lt;p&gt;&lt;img alt="Laravel Montreal" src="/images/2019/05/28/laravel_montreal.jpeg" title="Laravel Montreal" /&gt;&lt;/p&gt;
&lt;p&gt;I have been a bit busy since I moved to Montreal back in February last year and one of the things I've been doing is regularly attending &lt;a href="https://www.meetup.com/Laravel-Montreal/"&gt;Laravel Montreal&lt;/a&gt; meetups.&lt;/p&gt;
&lt;p&gt;It is a small but active community that gathers every month or so around various subjects gravitating around the framework, and after sitting in the audience for a few months I in turn decided to stand before it and share a bit of my experience.&lt;/p&gt;
&lt;p&gt;I'll be talking about Laravel Collections &lt;a href="https://www.meetup.com/Laravel-Montreal/events/260904784/"&gt;tomorrow night&lt;/a&gt; (Weds May 29) at &lt;a href="https://ctrlweb.ca/en/"&gt;ctrlweb&lt;/a&gt;'s office from 6:30pm.&lt;/p&gt;
&lt;p&gt;If you live in Montreal don't hesitate to join, either tomorrow or at a &lt;a href="https://www.meetup.com/Laravel-Montreal/"&gt;future meetup&lt;/a&gt; - presentations are in French but you can ask questions in English.&lt;/p&gt;
&lt;p&gt;I have also put together a &lt;a href="https://github.com/osteel/php-collections-presentation"&gt;GitHub repository&lt;/a&gt; with a demo application containing all of the examples I'll be showing, as well as the presentation's &lt;a href="https://github.com/osteel/php-collections-presentation/blob/master/presentation.pdf"&gt;slides&lt;/a&gt; (also in French, but there are a lot of code samples and with the demo app it should be fairly easy to follow).&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</summary><category term="laravel"></category><category term="collections"></category><category term="laravelmontreal"></category><category term="presentation"></category></entry><entry><title>Having issues with your cordless Logitech Unifying device on MacOS? Don't throw it away just yet</title><link href="https://tech.osteel.me/posts/having-issues-with-your-cordless-logitech-unifying-device-on-macos-dont-throw-it-away-just-yet" rel="alternate"></link><published>2017-09-21T00:00:00+01:00</published><updated>2017-09-21T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2017-09-21:posts/having-issues-with-your-cordless-logitech-unifying-device-on-macos-dont-throw-it-away-just-yet</id><summary type="html">&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The cordless Logitech Unifying devices can be a bit funny when it comes to MacOS Sierra, be it the scrolling acting weird or the device not being detected altogether. In my case it was the latter, and it took me a ridiculous amount of time to find a solution, mostly because of borked software. This post is mainly for my own future reference, but if you are running into the same kind of troubles, hopefully following the &lt;a href="#quick-steps"&gt;quick steps&lt;/a&gt; below will help.&lt;/p&gt;
&lt;h2 id="full-story"&gt;Full story&lt;/h2&gt;
&lt;p&gt;Having worked with a &lt;a href="https://www.apple.com/uk/shop/product/MJ2R2Z/A/magic-trackpad-2"&gt;Magic Trackpad&lt;/a&gt; (version 1) for a while, then with a mouse again for one of my contracts, I realised I actually felt more comfortable using the latter. I decided I would get one for my personal use as well, and first peeked at Apple's horrendously (and unsurprisingly) expensive &lt;a href="https://www.apple.com/uk/shop/product/MLA02Z/A/magic-mouse-2"&gt;Magic Mouse&lt;/a&gt;, before I remembered that once upon a time I had a wireless mouse, when I was still a Windows user.&lt;/p&gt;
&lt;p&gt;I found it among old RJ45 cables and dusty keyboards: a &lt;a href="http://www.logitech.com/en-us/product/anywhere-mouse-mx-p"&gt;Logitech Anywhere Mouse MX&lt;/a&gt;, using the Unifying technology - basically a tiny dongle to plug to one of the machine's USB ports, and supporting devices of the same product range.&lt;/p&gt;
&lt;p&gt;I inserted some batteries, plugged the dongle and switched the mouse on: nothing.&lt;/p&gt;
&lt;p&gt;I made a quick search online and everything seemed to point to the same piece of software, the &lt;a href="http://support.logitech.com/en_us/software/logitech-control-center-for-macintosh-os-x"&gt;Logitech Control Center&lt;/a&gt;. I downloaded it, installed it and rebooted my machine: the Logitech Control Center icon did appear in &lt;em&gt;System Preferences&lt;/em&gt;, but my mouse did not show up and no matter what I did, clicking the &lt;em&gt;Open Unifying Software&lt;/em&gt; button made the application crash (which was a bummer since my mouse obviously needed to be paired with the dongle again).&lt;/p&gt;
&lt;p&gt;I couldn't find a solution at the time and had better things to do with my life, so I gave up and moved on, and only decided to give it another shot a few weeks later, before I sold it on Gumtree and gave Apple more of my money to acquire their fancy Magic Mouse.&lt;/p&gt;
&lt;p&gt;I found an indirectly related &lt;a href="https://github.com/tekezo/Karabiner-Elements/issues/84"&gt;GitHub thread&lt;/a&gt; where a dude mentioned another piece of software, &lt;a href="http://support.logitech.com/en_us/software/options"&gt;Logitech Options&lt;/a&gt;. I first &lt;a href="http://support.logitech.com/en_us/article/26976?product=a0qi00000069ufTAAQ"&gt;uninstalled the Logitech Control Center&lt;/a&gt; (search for "LCC Uninstaller", follow instructions, reboot to complete the removal of the driver), and went on installing Logitech Options.&lt;/p&gt;
&lt;p&gt;I'm not entirely sure what its purpose is but for some reason the version of the Unifying Software it comes with does work and allowed me to pair my mouse again.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Logitech Options 1" src="/images/2017/09/21/logitech-01.png" title="Logitech Options 1" /&gt;
&lt;img alt="Logitech Options 2" src="/images/2017/09/21/logitech-02.png" title="Logitech Options 2" /&gt;&lt;/p&gt;
&lt;p&gt;Hurray.&lt;/p&gt;
&lt;p&gt;Now there are &lt;a href="https://community.logitech.com/s/feed/0D53100005UytQyCAJ"&gt;multiple&lt;/a&gt; &lt;a href="https://apple.stackexchange.com/questions/253784/logitech-mouse-scrolling-weird-after-sierra-update-soggy-inertia-effect-in-nati"&gt;reports&lt;/a&gt; of weird scrolling behaviours concerning Logitech mouses on MacOS Sierra - if that's your case, it seems that installing the &lt;a href="http://support.logitech.com/en_us/software/logitech-control-center-for-macintosh-os-x"&gt;Logitech Control Center&lt;/a&gt; might help after all.&lt;br /&gt;
I installed it again and I can configure my mouse properly - the application seems to happily live alongside the Logitech Options one in the System Preferences.&lt;/p&gt;
&lt;p&gt;&lt;img alt="System Preferences" src="/images/2017/09/21/logitech-03.png" title="System Preferences" /&gt;&lt;/p&gt;
&lt;p&gt;I had enough emotions for one day though, and didn't dare to open the Unifying Software from the Control Center (will you?).&lt;/p&gt;
&lt;h2 id="quick-steps"&gt;Quick steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://support.logitech.com/en_us/article/26976?product=a0qi00000069ufTAAQ"&gt;Uninstall the Logitech Control Center&lt;/a&gt; if already present on your system (search for "LCC Uninstaller", follow instructions, reboot to complete the removal of the driver)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.logitech.com/en_us/software/options"&gt;Install Logitech Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open it and pair your device(s)&lt;/li&gt;
&lt;li&gt;(Re-)Install the &lt;a href="http://support.logitech.com/en_us/software/logitech-control-center-for-macintosh-os-x"&gt;Logitech Control Center&lt;/a&gt; if you wish to customise further your device(s) &lt;/li&gt;
&lt;/ul&gt;</summary><category term="logitech"></category><category term="mouse"></category><category term="keyboard"></category><category term="unifying"></category><category term="macos"></category></entry><entry><title>UK Contractors: should you switch off the Flat Rate Scheme?</title><link href="https://tech.osteel.me/posts/uk-contractors-should-you-switch-off-the-flat-rate-scheme" rel="alternate"></link><published>2017-03-26T00:00:00+00:00</published><updated>2017-03-26T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2017-03-26:posts/uk-contractors-should-you-switch-off-the-flat-rate-scheme</id><summary type="html">&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Probably.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Calculator" src="/images/2017/03/26/frs-01.jpg" title="Calculator" /&gt;&lt;/p&gt;
&lt;p&gt;With the new fiscal year just a few days ahead, as a contractor you've probably heard about the Budget changes. And if you are like me up until a few days ago, you might not be sure whether you should take action or not.&lt;/p&gt;
&lt;p&gt;Let's try and bring some clarification to these changes.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are new to the contracting world and/or some of the terms below are unknown to you, you might want to read my &lt;a href="/posts/2016/12/22/contracting-in-the-uk-a-tax-breakdown.html" title="Contracting in the UK: a tax breakdown"&gt;UK tax breakdown&lt;/a&gt; as well.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="table-of-contents"&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-brief-summary-of-the-new-budget"&gt;A brief summary of the new Budget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-flat-rate-schemes-changes"&gt;The Flat Rate Scheme's change&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-current-state-of-things"&gt;The current state of things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-new-limited-cost-trader-category"&gt;The new &lt;em&gt;Limited Cost Trader&lt;/em&gt; category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-standard-vat-scheme"&gt;The Standard VAT Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#should-you-make-the-switch"&gt;Should you make the switch?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-brief-summary-of-the-new-budget"&gt;A brief summary of the new Budget&lt;/h2&gt;
&lt;p&gt;There are a few things that are effectively going to change between April 1st and April 6th 2017, some of which affect contractors, and which can be summarised in three bullet points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The income tax allowance is raised &lt;a href="https://www.gov.uk/government/publications/tax-and-tax-credit-rates-and-thresholds-for-2017-18/tax-and-tax-credit-rates-and-thresholds-for-2017-18#income-tax-allowances"&gt;from £11,000 to £11,500&lt;/a&gt; (April 6th)&lt;/li&gt;
&lt;li&gt;The Corporation Tax is reduced &lt;a href="https://www.gov.uk/government/publications/corporation-tax-main-rate"&gt;from 20% to 19%&lt;/a&gt; (April 1st)&lt;/li&gt;
&lt;li&gt;A new 16.5% VAT flat rate category is introduced (&lt;em&gt;Limited Cost Trader&lt;/em&gt; - April 1st)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might also have heard about the dividend tax allowance being reduced from £5,000 to £2,000, around which there seems to be some confusion. No need to worry about it just yet - it will actually come into effect &lt;a href="https://www.gov.uk/government/publications/income-tax-dividend-allowance-reduction"&gt;in the 2018/19 tax year&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There was also &lt;a href="https://www.theguardian.com/uk-news/2017/mar/09/self-employed-nics-increase-budget"&gt;quite some fuss&lt;/a&gt; around an announced National Insurance Contributions increase, but the Government eventually &lt;a href="http://www.huffingtonpost.co.uk/entry/budget-tax-national-insurance-u-turn_uk_58c9283ee4b09e52f554c3c8"&gt;dropped it&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-flat-rate-schemes-change"&gt;The Flat Rate Scheme's change&lt;/h2&gt;
&lt;p&gt;The one big change that should get your attention here is the one related to VAT's Flat Rate Scheme (FRS). I will assume you already know what the scheme is, and if you don't, I invite you to read the &lt;a href="/posts/2016/12/22/contracting-in-the-uk-a-tax-breakdown.html#4-vat" title="Contracting in the UK: a tax breakdown"&gt;section dedicated to VAT&lt;/a&gt; from my previous article about taxes.&lt;/p&gt;
&lt;h3 id="the-current-state-of-things"&gt;The current state of things&lt;/h3&gt;
&lt;p&gt;The way the FRS currently works is, on an invoice of £2,000, you charge 20% of VAT, corresponding to an amount of £400, so a total of £2,400. Then, you must apply the flat rate &lt;a href="https://www.gov.uk/vat-flat-rate-scheme/how-much-you-pay"&gt;corresponding to your trade sector &lt;/a&gt; to the total, the result being the VAT you pay back to HMRC.&lt;/p&gt;
&lt;p&gt;As an IT Consultant for example, the rate applying to my business is 14.5%, so I'd need to pay £2,400 * 0.145 = £348 back to HMRC.&lt;/p&gt;
&lt;p&gt;This is quite interesting, since the difference of VAT, called the &lt;em&gt;VAT Credit&lt;/em&gt;, becomes part of my company's profit. Or to put it differently, I charge £400 VAT and pay back £348, keeping the remaining £52.&lt;/p&gt;
&lt;h3 id="the-new-limited-cost-trader-category"&gt;The new &lt;em&gt;Limited Cost Trader&lt;/em&gt; category&lt;/h3&gt;
&lt;p&gt;In order to &lt;a href="https://www.gov.uk/government/publications/tackling-aggressive-abuse-of-the-vat-flat-rate-scheme-technical-note/tackling-aggressive-abuse-of-the-vat-flat-rate-scheme-technical-note"&gt;&lt;em&gt;"tackle aggressive abuse of the VAT Flat Rate Scheme"&lt;/em&gt;&lt;/a&gt; (I won't go into details here, follow the link for more info), the Government is introducing a new category called &lt;em&gt;Limited Cost Trader&lt;/em&gt;, with a fixed 16.5% rate for whichever business falls under it, regardless of the trade sector.&lt;/p&gt;
&lt;p&gt;To be affected by this new rate, your business expenditure must represent less than 2% of its VAT inclusive turnover, or less than £1,000 per annum if it is greater than 2%.&lt;/p&gt;
&lt;p&gt;Now if you are like me, looking at your business expenses you might think you are way above the threshold and thus not concerned by this at all.&lt;br /&gt;
That was before I realised only certain kinds of expenses qualify.&lt;/p&gt;
&lt;p&gt;Basically, everything including food, transport, phone, computer (&lt;a href="https://www.accountingcoach.com/blog/what-are-capital-expenditures"&gt;&lt;em&gt;capital expenditures&lt;/em&gt;&lt;/a&gt;), etc &lt;strong&gt;doesn't&lt;/strong&gt; qualify and, this list accounting for 95% of my expenses, it turns out my business automatically falls under the Limited Cost Trader category.&lt;br /&gt;
Bummer.&lt;/p&gt;
&lt;p&gt;But how bad is it?&lt;/p&gt;
&lt;p&gt;If we look at the same example again, I now need to pay £2,400 * 0.165 = £396 back to HMRC.&lt;br /&gt;
That's a VAT Credit of £4.&lt;/p&gt;
&lt;p&gt;&lt;img alt="No money" src="/images/2017/03/26/frs-02.gif" title="No money" /&gt;&lt;/p&gt;
&lt;h3 id="the-standard-vat-scheme"&gt;The Standard VAT Scheme&lt;/h3&gt;
&lt;p&gt;If your business falls under the new category, the VAT Credit it benefits from becomes very low. So should you switch to the Standard Scheme instead?&lt;/p&gt;
&lt;p&gt;Let's review how it works first. You still charge 20% VAT to your client, which you must entirely pay back to HMRC.&lt;/p&gt;
&lt;p&gt;However, you can claim the VAT on any VAT inclusive expense related to your business, when you could only do so for expenses greater than £2,000 with the FRS.&lt;/p&gt;
&lt;p&gt;Food and transport usually don't qualify, but capital expenditures do (computer, phone), and so do accountancy fees, for example.&lt;/p&gt;
&lt;p&gt;Let's take an example and consider your accountant costs your business £90 per month. They charge the VAT as well, which accounts for £90 - (£90 * 100 / 120) = £15.&lt;/p&gt;
&lt;p&gt;That means that you could claim £15 of VAT per month.&lt;/p&gt;
&lt;p&gt;Note that with the Standard Scheme, you need to keep track of the VAT you charge and the VAT you claim, which is a bit more work.&lt;/p&gt;
&lt;h3 id="should-you-make-the-switch"&gt;Should you make the switch?&lt;/h3&gt;
&lt;p&gt;To make that decision, you need to assess whether you'd be better off being able to claim VAT on VAT inclusive business expenditures (Standard Scheme) or applying the 16.5% rate and keeping the VAT Credit (Flat Rate Scheme's Limited Cost Trader category).&lt;/p&gt;
&lt;p&gt;You should be able to do so looking at how much you invoice in an average month as well as the nature of your usual expenses, and use the calculations above to determine what works best.&lt;/p&gt;
&lt;p&gt;If you are planning on buying hardware this year, it is very likely that the Standard Scheme would be better for you. Personally, with accountancy fees alone, I'm better off de-registering from the FRS. And since these fees are directly managed by my accountant, I don't even need to keep track of the claimed VAT, as they automatically do it for me.&lt;/p&gt;
&lt;p&gt;No extra work.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this will help you assess whether you are affected by these changes at all, and if you need to do something about it.&lt;/p&gt;
&lt;p&gt;Bear in mind that I am not an accountant and that you should talk to yours before taking any action. If you do so and decide to switch off the FRS, you should also remember that you won't be able to register for it again for &lt;a href="https://www.gov.uk/vat-flat-rate-scheme/join-or-leave-the-scheme"&gt;another twelve months&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/government/publications/tax-and-tax-credit-rates-and-thresholds-for-2017-18/tax-and-tax-credit-rates-and-thresholds-for-2017-18" title="Tax and tax credit rates and thresholds for 2017-18"&gt;Tax and tax credit rates and thresholds for 2017-18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/government/publications/corporation-tax-main-rate" title="Corporation Tax: main rate"&gt;Corporation Tax: main rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/government/publications/income-tax-dividend-allowance-reduction" title="Income Tax: dividend allowance reduction"&gt;Income Tax: dividend allowance reduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theguardian.com/uk-news/2017/mar/09/self-employed-nics-increase-budget" title="'This is grossly unfair': self-employed readers react to NICs increase"&gt;'This is grossly unfair': self-employed readers react to NICs increase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.huffingtonpost.co.uk/entry/budget-tax-national-insurance-u-turn_uk_58c9283ee4b09e52f554c3c8" title="Budget U-Turn As Chancellor Scraps National Insurance Hike On Self-Employed"&gt;Budget U-Turn As Chancellor Scraps National Insurance Hike On Self-Employed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/government/publications/tackling-aggressive-abuse-of-the-vat-flat-rate-scheme-technical-note/tackling-aggressive-abuse-of-the-vat-flat-rate-scheme-technical-note" title="Tackling aggressive abuse of the VAT Flat Rate Scheme - technical note"&gt;Tackling aggressive abuse of the VAT Flat Rate Scheme - technical note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.accountingcoach.com/blog/what-are-capital-expenditures" title="What are capital expenditures?"&gt;What are capital expenditures?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/vat-flat-rate-scheme/join-or-leave-the-scheme" title="VAT Flat Rate Scheme - Join or leave the scheme"&gt;VAT Flat Rate Scheme - Join or leave the scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="contracting"></category><category term="vat"></category><category term="uk"></category><category term="flatratescheme"></category><category term="standardscheme"></category></entry><entry><title>How to use Docker for local web development: an update</title><link href="https://tech.osteel.me/posts/how-to-use-docker-for-local-web-development-an-update" rel="alternate"></link><published>2017-01-15T00:00:00+00:00</published><updated>2017-01-15T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2017-01-15:posts/how-to-use-docker-for-local-web-development-an-update</id><summary type="html">&lt;p&gt;&lt;img alt="Docker logo" src="/images/2017/01/15/docker-tutorial-01.jpg" title="Docker logo" /&gt;&lt;/p&gt;
&lt;p&gt;A year or so ago I published a post titled &lt;a href="/posts/2015/12/18/from-vagrant-to-docker-how-to-use-docker-for-local-web-development.html"&gt;&lt;em&gt;From Vagrant to Docker: How to use Docker for local web development&lt;/em&gt;&lt;/a&gt;, which got quite some traction at the time and continues to get comments on a regular basis, even today.&lt;/p&gt;
&lt;p&gt;Thing is, Docker (and its ecosystem) is a fast-paced project that gets updated very often, and things changed quite a bit since that article was first published.&lt;/p&gt;
&lt;p&gt;Today's objective is to bring the concepts it exposed up to speed, and to provide an updated &lt;a href="https://github.com/osteel/docker-tutorial-2"&gt;companion repository&lt;/a&gt;, which I will then use as a starting point for further Docker tutorials.&lt;/p&gt;
&lt;p&gt;If you are new to Docker, I invite you to read &lt;a href="/posts/2015/12/18/from-vagrant-to-docker-how-to-use-docker-for-local-web-development.html"&gt;the previous post&lt;/a&gt; nevertheless, as it will show you how to use Docker, and most of the knowledge it contains remains valid anyway.&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#docker-toolbox-or-native-app"&gt;Docker Toolbox or native app?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#from-docker-19x-to-113x"&gt;From Docker 1.9.x to 1.13.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-our-project"&gt;Migrating our project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#current-state"&gt;Current state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-add-the-version-and-the-services-key"&gt;Step 1 - add the version and the &lt;code&gt;services&lt;/code&gt; key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-remove-all-links-keys"&gt;Step 2 - remove all &lt;code&gt;links&lt;/code&gt; keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-depends_on"&gt;Step 3 - &lt;code&gt;depends_on&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-named-volumes"&gt;Step 4 - named volumes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5-networks"&gt;Step 5 - networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-6-env-file"&gt;Step 6 - &lt;code&gt;.env&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cleaning-up"&gt;Cleaning up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docker-toolbox-or-native-app"&gt;Docker Toolbox or native app?&lt;/h2&gt;
&lt;p&gt;Whether you are coming from &lt;a href="/posts/2015/12/18/from-vagrant-to-docker-how-to-use-docker-for-local-web-development.html"&gt;&lt;em&gt;From Vagrant to Docker: How to use Docker for local web development&lt;/em&gt;&lt;/a&gt; or not, you might be using &lt;a href="https://www.docker.com/products/docker-toolbox"&gt;Docker Toolbox&lt;/a&gt; and Docker Machine as part of your current developing environment.&lt;/p&gt;
&lt;p&gt;A few months after I published that article, Docker released native applications for both Mac and Windows, essentially abstracting away the management of the Virtual Machine and using the virtualization toolkit provided with the operating system.&lt;br /&gt;
If you have no idea what I am talking about or if you do and that sounds appealing, I would recommend to install the native app for your OS instead of Docker Toolbox (even though they can coexist).&lt;/p&gt;
&lt;p&gt;But before you do so, make sure you read the &lt;em&gt;What to know before you install&lt;/em&gt; section of each guide (&lt;a href="https://docs.docker.com/docker-for-mac/#/what-to-know-before-you-install"&gt;Mac&lt;/a&gt;, &lt;a href="https://docs.docker.com/docker-for-windows/#/what-to-know-before-you-install"&gt;PC&lt;/a&gt;), especially to make sure your system meets the requirements.&lt;/p&gt;
&lt;p&gt;If it doesn't, then stick to Docker Toolbox.&lt;/p&gt;
&lt;p&gt;The installation guides are pretty straightforward, so I'll leave you to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/docker-for-mac/"&gt;Docker for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/docker-for-windows/"&gt;Docker for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/products/docker-toolbox"&gt;Docker Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="from-docker-19x-to-113x"&gt;From Docker 1.9.x to 1.13.x&lt;/h2&gt;
&lt;p&gt;Docker has known a lot of improvements with the recent releases, among which enhanced security and networking, new versions for Docker Compose and its file format, and some significant progress with container orchestration as well as its swarm mode.&lt;/p&gt;
&lt;p&gt;The focus has also been put on bringing together an industry standard, which has materialised in the &lt;a href="https://www.opencontainers.org/"&gt;Open Container Initiative&lt;/a&gt; in June 2015, providing specifications and promoting interoperability between the different actors of the container industry.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OCI logo" src="/images/2017/01/15/docker-tutorial-02.jpg" title="OCI logo" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://runc.io/"&gt;runC&lt;/a&gt; is notably born out of it, following the &lt;a href="https://github.com/opencontainers/runtime-spec"&gt;Runtime Specification&lt;/a&gt; (essentially describing how containers should be spawned and run), and Docker also focused on breaking down its engine into different components (such as &lt;a href="https://containerd.io/"&gt;containerd&lt;/a&gt;), allowing for more control and flexibility (you can read more about it in this &lt;a href="https://medium.com/@tiffanyfayj/docker-1-11-et-plus-engine-is-now-built-on-runc-and-containerd-a6d06d7e80ef#.4frlmpqgb"&gt;Medium post&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;To be honest though, the above has little impact on what we are trying to achieve here, and our main concern is essentially the updates brought to Compose and its file format.&lt;/p&gt;
&lt;h2 id="migrating-our-project"&gt;Migrating our project&lt;/h2&gt;
&lt;p&gt;As aforementioned, Docker Compose and its file format were also updated, from version 1.5.x to 1.9.0 for the former, and from 1.0 to 2.1 for the latter.&lt;/p&gt;
&lt;p&gt;These releases upgraded networks and volumes to first-class citizens among other things, placing them at the same level as services in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;br /&gt;
The Docker documentation provides a &lt;a href="https://docs.docker.com/compose/compose-file/#upgrading"&gt;convenient guide&lt;/a&gt; which is a good starting point to upgrade our file, but there is also a few extra steps to take.&lt;/p&gt;
&lt;h3 id="current-state"&gt;Current state&lt;/h3&gt;
&lt;p&gt;Let's start with a quick reminder of what is currently contained (see what I did there?) in our project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a container for Nginx&lt;/li&gt;
&lt;li&gt;a container for PHP-FPM&lt;/li&gt;
&lt;li&gt;a container for MySQL&lt;/li&gt;
&lt;li&gt;a container for phpMyAdmin&lt;/li&gt;
&lt;li&gt;a data-only container to make MySQL data persistent&lt;/li&gt;
&lt;li&gt;a data-only container for the application code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="step-1-add-the-version-and-the-services-key"&gt;Step 1 - add the version and the &lt;code&gt;services&lt;/code&gt; key&lt;/h3&gt;
&lt;p&gt;We're starting off with the &lt;code&gt;docker-compose.yml&lt;/code&gt; file as we left it at the end of the previous tutorial (you can clone &lt;a href="https://github.com/osteel/docker-tutorial"&gt;its repository&lt;/a&gt; and go from there):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx:
    build: ./nginx/
    ports:
        - 80:80
    links:
        - php
    volumes_from:
        - app

php:
    build: ./php/
    expose:
        - 9000
    links:
        - mysql
    volumes_from:
        - app

app:
    image: php:7.0-fpm
    volumes:
        - ./www/html:/var/www/html
    command: "true"

mysql:
    image: mysql:latest
    volumes_from:
        - data
    environment:
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: project
        MYSQL_USER: project
        MYSQL_PASSWORD: project
    command: --default-authentication-plugin=mysql_native_password

data:
    image: mysql:latest
    volumes:
        - /var/lib/mysql
    command: "true"

phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
        - 8080:80
    links:
        - mysql
    environment:
        PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only thing I added is this line under the &lt;code&gt;mysql&lt;/code&gt; service:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command: --default-authentication-plugin=mysql_native_password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason for this is MySQL 8.0 &lt;a href="https://github.com/docker-library/mysql/issues/454"&gt;introduced a new authentication mechanism by default&lt;/a&gt;. The fix simply changes that back to the previous behaviour by running the command at the container's start-up.&lt;/p&gt;
&lt;p&gt;We also need to specify the format version at the top, and to place the rest of the file under a new &lt;code&gt;services&lt;/code&gt; key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: "2.1"

services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        links:
            - php
        volumes_from:
            - app

    php:
        build: ./php/
        expose:
            - 9000
        links:
            - mysql
        volumes_from:
            - app

    app:
        image: php:7.0-fpm
        volumes:
            - ./www/html:/var/www/html
        command: "true"

    mysql:
        image: mysql:latest
        volumes_from:
            - data
        environment:
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: project
            MYSQL_USER: project
            MYSQL_PASSWORD: project
        command: --default-authentication-plugin=mysql_native_password

    data:
        image: mysql:latest
        volumes:
            - /var/lib/mysql
        command: "true"

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        links:
            - mysql
        environment:
            PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though we won't need the new &lt;code&gt;2.1&lt;/code&gt; features for now, that's the latest version so let's specify this one.&lt;/p&gt;
&lt;p&gt;Open the project's folder in a new terminal window, and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should observe something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 1" src="/images/2017/01/15/docker-tutorial-03.jpg" title="Step 1" /&gt;&lt;/p&gt;
&lt;p&gt;We can observe that the first line is mentioning a network being created - we'll get to that in a minute.&lt;/p&gt;
&lt;p&gt;Now access &lt;code&gt;http://localhost&lt;/code&gt; in your browser (if using Docker for Mac or Windows), and this is what you should see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 1 result" src="/images/2017/01/15/docker-tutorial-04.jpg" title="Step 1 result" /&gt;&lt;/p&gt;
&lt;p&gt;Now stop and remove the containers and their volumes running the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose down -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a shortcut command that was introduced with Compose 1.6.0 (combining &lt;code&gt;docker-compose stop&lt;/code&gt; and &lt;code&gt;docker-composer rm -v&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="step-2-remove-all-links-keys"&gt;Step 2 - remove all &lt;code&gt;links&lt;/code&gt; keys&lt;/h3&gt;
&lt;p&gt;Starting from version 1.6.0, Docker Compose automatically creates a network which is accessible by each container of each defined service, and on which they are all discoverable by default.&lt;/p&gt;
&lt;p&gt;You guessed it, that's what the line describing the creation of a network we noticed in the previous step is about.&lt;/p&gt;
&lt;p&gt;There is therefore no need for explicitly declaring links anymore (unless you need &lt;a href="https://docs.docker.com/compose/networking/#/links"&gt;extra aliases&lt;/a&gt;), so you can remove them all.&lt;/p&gt;
&lt;h3 id="step-3-depends_on"&gt;Step 3 - &lt;a href="https://docs.docker.com/compose/compose-file/#/dependson"&gt;&lt;code&gt;depends_on&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Also introduced with Docker Compose 1.6.0, this option allows to express dependency between services, making Docker Compose start the different services in dependency order.&lt;br /&gt;
Note that it won't wait for a service to be &lt;em&gt;ready&lt;/em&gt;, but only for it to be &lt;em&gt;started&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is what the content of your file should now look like, with the &lt;code&gt;depends_on&lt;/code&gt; options and without the &lt;code&gt;links&lt;/code&gt; ones:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: "2.1"

services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        volumes_from:
            - app
        depends_on:
            - php

    php:
        build: ./php/
        expose:
            - 9000
        volumes_from:
            - app
        depends_on:
            - mysql

    app:
        image: php:7.0-fpm
        volumes:
            - ./www/html:/var/www/html
        command: "true"

    mysql:
        image: mysql:latest
        volumes_from:
            - data
        environment:
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: project
            MYSQL_USER: project
            MYSQL_PASSWORD: project
        command: --default-authentication-plugin=mysql_native_password

    data:
        image: mysql:latest
        volumes:
            - /var/lib/mysql
        command: "true"

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When running &lt;code&gt;docker-compose up -d&lt;/code&gt; again, we can see how this is affecting the order in which services are being started:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 3 before" src="/images/2017/01/15/docker-tutorial-03.jpg" title="Step 3 before" /&gt;
&lt;em&gt;^ before&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 3 after" src="/images/2017/01/15/docker-tutorial-05.jpg" title="Step 3 after" /&gt;
&lt;em&gt;^ after&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="step-4-named-volumes"&gt;Step 4 - named volumes&lt;/h2&gt;
&lt;p&gt;We are now broaching one of the main additions of Compose 1.6.0.&lt;/p&gt;
&lt;p&gt;As explained earlier, volumes and networks are now first-class citizens, and volumes can be declared at the same level as services.&lt;/p&gt;
&lt;p&gt;In the case of MySQL, this means that we don't need the data-only container &lt;code&gt;data&lt;/code&gt; anymore, and we are going to make it a named volume instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: "2.1"

services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        volumes_from:
            - app
        depends_on:
            - php

    php:
        build: ./php/
        expose:
            - 9000
        volumes_from:
            - app
        depends_on:
            - mysql

    app:
        image: php:7.0-fpm
        volumes:
            - ./www/html:/var/www/html
        command: "true"

    mysql:
        image: mysql:latest
        volumes:
            - data:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: project
            MYSQL_USER: project
            MYSQL_PASSWORD: project
        command: --default-authentication-plugin=mysql_native_password

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql

volumes:
    data:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We removed the &lt;code&gt;data&lt;/code&gt; block under &lt;code&gt;services&lt;/code&gt;, and added a &lt;code&gt;volumes&lt;/code&gt; block at the end of the file. We simply declared a new &lt;code&gt;data&lt;/code&gt; volume in there, with no other options (it uses the local driver by default). Then, we replaced the &lt;code&gt;volume_from&lt;/code&gt; option from the &lt;code&gt;mysql&lt;/code&gt; block with a &lt;code&gt;volumes&lt;/code&gt; key, pointing &lt;code&gt;/var/lib/mysql&lt;/code&gt; to the &lt;code&gt;data&lt;/code&gt; volume.&lt;/p&gt;
&lt;p&gt;Here, we are essentially asking Docker to copy whatever is inside &lt;code&gt;/var/lib/mysql&lt;/code&gt; in the &lt;code&gt;mysql&lt;/code&gt; container to the &lt;code&gt;data&lt;/code&gt; volume when it is first initialised. Any update to that directory is now persisted, since the volume won't be destroyed along with the container (unless the &lt;code&gt;-v&lt;/code&gt; option is used), and the volume and its data will be picked up next time a volume with the same name is invoked by a service.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;docker-compose up -d&lt;/code&gt; again, we can see the volume being created on the second line:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 4" src="/images/2017/01/15/docker-tutorial-06.jpg" title="Step 4" /&gt;&lt;/p&gt;
&lt;p&gt;Good. But how about the &lt;code&gt;app&lt;/code&gt; data-only container then?&lt;/p&gt;
&lt;p&gt;Well, that's where it gets a bit tricky: for some reason, syncing a local directory with a named volume is not supported out of the box.&lt;/p&gt;
&lt;p&gt;I am not the first one to &lt;a href="https://github.com/docker/docker/issues/19990"&gt;wonder about it&lt;/a&gt;, and someone actually created &lt;a href="https://github.com/CWSpear/local-persist"&gt;a plugin&lt;/a&gt; for that. But, looking at the installation guide, I honestly wonder if it is worth the hassle (when you are using Docker for Mac like me, it basically requires the plugin to run in its own container while maintaining its state in a JSON file).&lt;/p&gt;
&lt;p&gt;Somewhere in the issue's comments, someone suggests &lt;a href="https://github.com/docker/docker/issues/19990#issuecomment-248955005"&gt;using the driver's specific options&lt;/a&gt;: this is not a viable solution either, since they are not &lt;a href="https://docs.docker.com/engine/reference/commandline/volume_create/#/driver-specific-options"&gt;cross-platform compatible&lt;/a&gt; (e.g. the &lt;code&gt;local&lt;/code&gt; driver on Windows doesn't support any options, hence mounting a local directory wouldn't work).&lt;/p&gt;
&lt;p&gt;We could still use a data-only container, but &lt;a href="https://github.com/docker/docker/issues/17798"&gt;this is not a recommended practice anymore&lt;/a&gt; (the documentation &lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container"&gt;states otherwise&lt;/a&gt; but is currently &lt;a href="https://github.com/docker/docker/issues/20465"&gt;out of date&lt;/a&gt;).&lt;br /&gt;
Moreover, and as the &lt;code&gt;local-persist&lt;/code&gt; plugin's author rightly points out in the &lt;a href="https://github.com/CWSpear/local-persist#benefits"&gt;documentation&lt;/a&gt;, using a data-only container implies mounting the local directory into the same path in all the containers that use it.&lt;/p&gt;
&lt;p&gt;There is simply currently no easy way to sync a local folder with a named volume, so I decided to settle for basic bind-mounting for now, until a better solution comes up (if you know one, feel free to share it in the comments):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: "2.1"

services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        volumes:
            - ./www/html:/var/www/html:ro
        depends_on:
            - php

    php:
        build: ./php/
        expose:
            - 9000
        volumes:
            - ./www/html:/var/www/html
        depends_on:
            - mysql

    mysql:
        image: mysql:latest
        volumes:
            - data:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: project
            MYSQL_USER: project
            MYSQL_PASSWORD: project
        command: --default-authentication-plugin=mysql_native_password

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql

volumes:
    data:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This leads to some configuration repetition, but as we'll see later there is a way to somewhat mitigate this.&lt;/p&gt;
&lt;p&gt;In the above code, you might have noticed the presence of the &lt;code&gt;:ro&lt;/code&gt; option at the end of the &lt;code&gt;volumes&lt;/code&gt; declaration of the &lt;code&gt;nginx&lt;/code&gt; service: since this service doesn't need the write permission for this directory, this option gives it a read-only access instead.&lt;/p&gt;
&lt;h3 id="step-5-networks"&gt;Step 5 - networks&lt;/h3&gt;
&lt;p&gt;We already saw that from Compose 1.6.0, a default network to which all services have access is created. We could leave it like that, or we can choose to fine-tune that a bit and define a &lt;em&gt;private&lt;/em&gt; networks for the relevant services instead.&lt;/p&gt;
&lt;p&gt;Let's declare two of those - &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt;, at the end of &lt;code&gt;docker-compose.yml&lt;/code&gt;, right after the &lt;code&gt;volumes&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;volumes:
    data:

networks:
    database:
    server:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The former will be used for services that need access to the database, and the latter for services dealing with HTTP requests.&lt;/p&gt;
&lt;p&gt;Now change the definition of the services like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        volumes:
            - ./www/html:/var/www/html:ro
        networks:
            - server
        depends_on:
            - php

    php:
        build: ./php/
        expose:
            - 9000
        volumes:
            - ./www/html:/var/www/html
        networks:
            - database
            - server
        depends_on:
            - mysql

    mysql:
        image: mysql:latest
        volumes:
            - data:/var/lib/mysql
        networks:
            - database
        environment:
            MYSQL_ROOT_PASSWORD: secret
            MYSQL_DATABASE: project
            MYSQL_USER: project
            MYSQL_PASSWORD: project
        command: --default-authentication-plugin=mysql_native_password

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        networks:
            - database
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;php&lt;/code&gt; and &lt;code&gt;phpmyadmin&lt;/code&gt; services are on the &lt;code&gt;database&lt;/code&gt; network, and the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;php&lt;/code&gt; services are on the &lt;code&gt;server&lt;/code&gt; one (meaning for instance that the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt; services are isolated from each other).&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;docker-compose up -d&lt;/code&gt; again. You should get:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 5" src="/images/2017/01/15/docker-tutorial-07.jpg" title="Step 5" /&gt;&lt;/p&gt;
&lt;p&gt;We can observe that the default network is no longer created (another way to make sure of this is to run the ad hoc command &lt;code&gt;docker network ls&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then again, this step is rather optional, especially for a local development environment, but it shows how to add more security and isolation between the different services.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are wondering why &lt;code&gt;phpmyadmin&lt;/code&gt; doesn't need access to the &lt;code&gt;server&lt;/code&gt; network, the reason is because the &lt;a href="https://hub.docker.com/r/phpmyadmin/phpmyadmin/"&gt;phpMyAdmin image&lt;/a&gt; we use is already shipping with its own versions of PHP and nginx.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="step-6-env-file"&gt;Step 6 - &lt;code&gt;.env&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;Starting from version 1.7.0, Docker Compose will look for a &lt;a href="https://docs.docker.com/compose/environment-variables/#/the-env-file"&gt;&lt;code&gt;.env&lt;/code&gt; file&lt;/a&gt; in the directory where it's run from and, if it finds one, will read the environment variables it contains to replace some placeholders with the corresponding values.&lt;/p&gt;
&lt;p&gt;Let's create such a file at the same level as &lt;code&gt;docker-compose.yml&lt;/code&gt;, with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PROJECT_ROOT=./www/html

DB_ROOT_PASSWORD=secret
DB_NAME=project
DB_USERNAME=project
DB_PASSWORD=project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update the definition of the services, one more time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;services:
    nginx:
        build: ./nginx/
        ports:
            - 80:80
        volumes:
            - "${PROJECT_ROOT}:/var/www/html:ro"
        networks:
            - server
        depends_on:
            - php

    php:
        build: ./php/
        expose:
            - 9000
        volumes:
            - "${PROJECT_ROOT}:/var/www/html"
        networks:
            - database
            - server
        depends_on:
            - mysql

    mysql:
        image: mysql:latest
        volumes:
            - data:/var/lib/mysql
        networks:
            - database
        environment:
            MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
            MYSQL_DATABASE: "${DB_NAME}"
            MYSQL_USER: "${DB_USERNAME}"
            MYSQL_PASSWORD: "${DB_PASSWORD}"
        command: --default-authentication-plugin=mysql_native_password

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - 8080:80
        networks:
            - database
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We basically defined five environment variables: &lt;code&gt;PROJECT_ROOT&lt;/code&gt;, &lt;code&gt;DB_ROOT_PASSWORD&lt;/code&gt;, &lt;code&gt;DB_NAME&lt;/code&gt;, &lt;code&gt;DB_USERNAME&lt;/code&gt;, and &lt;code&gt;DB_PASSWORD&lt;/code&gt;. We then added the corresponding placeholders in the Compose file, following the &lt;code&gt;"${PLACEHOLDER}"&lt;/code&gt; format.&lt;/p&gt;
&lt;p&gt;The choice was made based on the &lt;em&gt;variability&lt;/em&gt; of these properties, in relation to the fact their values could change from one environment to another.&lt;/p&gt;
&lt;p&gt;This allows to make the &lt;code&gt;docker-compose.yml&lt;/code&gt; file more portable and shareable, say across a development team. You could commit a &lt;code&gt;.env.example&lt;/code&gt; file containing placeholders for the different variables, for others to copy and rename into a &lt;code&gt;.env&lt;/code&gt; file and change the values at will.&lt;br /&gt;
This way, if a developer needs a different configuration for some reason, they can do so without touching the Compose file (this is basically part of the &lt;a href="https://12factor.net/config"&gt;Twelve-Factor App methodology&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In our case, it also permits to avoid repeating the configuration value for our project root, which we introduced in step 4.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://docs.docker.com/compose/compose-file/#variable-substitution"&gt;the documentation&lt;/a&gt; for more info about variable substitution in general.&lt;/p&gt;
&lt;h3 id="wrapping-up"&gt;Wrapping up&lt;/h3&gt;
&lt;p&gt;In 6 steps, we upgraded our &lt;code&gt;docker-compose.yml&lt;/code&gt; file to the latest versions of Docker and Docker Compose, making our project simpler and better structured.&lt;/p&gt;
&lt;p&gt;For the complete version of the file or if you had any issues while following this tutorial, please refer to the &lt;a href="https://github.com/osteel/docker-tutorial-2"&gt;companion repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cleaning-up"&gt;Cleaning up&lt;/h2&gt;
&lt;p&gt;Another nice addition of Docker 1.13.0 worth mentioning in the context of this post are clean-up commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker system df
$ docker system prune
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="Clean-up" src="/images/2017/01/15/docker-tutorial-08.jpg" title="Clean-up" /&gt;&lt;/p&gt;
&lt;p&gt;They allow to know exactly what resources Docker is using and greatly simplify freeing them, when removing dangling volumes used to require the rather esoteric &lt;code&gt;docker volume rm $(docker volume ls -qf dangling=true)&lt;/code&gt;, for instance.&lt;/p&gt;
&lt;p&gt;It is also possible to &lt;code&gt;prune&lt;/code&gt; a specific type of resource, e.g. for volumes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker volume prune
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A year can be a long time when it comes to the tech industry, and Docker's evolution certainly is on a fast track. The direction it has taken is quite comforting, focussing on promoting industry standards which is essential to a technology's adoption and long term survival.&lt;/p&gt;
&lt;p&gt;New features and ameliorations were not forgotten along the way, and using Docker and Docker Compose now feels simpler and more standardised.&lt;/p&gt;
&lt;p&gt;While there is still room for improvement, Docker is not the obscure technology it used to be, and it is being ever more widely adopted by the industry.&lt;/p&gt;
&lt;p&gt;It is safe to say that Docker is definitely a string to consider adding to your bow.&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/compose-file/"&gt;Compose file reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/"&gt;Manage data in containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linux.com/learn/docker-volumes-and-networks-compose"&gt;Docker Volumes and Networks with Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/networking/"&gt;Docker container networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/networking/"&gt;Networking in Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nimbleci.com/2016/11/17/whats-coming-in-docker-1-13/"&gt;Top 10 New Features And Improvements Coming In Docker 1.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/docker/blob/master/CHANGELOG.md"&gt;Docker Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/environment-variables/"&gt;Docker Compose Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://collabnix.com/archives/2073"&gt;What’s new upcoming in Docker Compose v1.9.0?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@tiffanyfayj/docker-1-11-et-plus-engine-is-now-built-on-runc-and-containerd-a6d06d7e80ef#.4frlmpqgb"&gt;Docker 1.11 et plus: Engine is now built on runC and containerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.docker.com/2017/01/whats-new-in-docker-1-13/"&gt;Introducing Docker 1.13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="php"></category><category term="mysql"></category><category term="phpmyadmin"></category><category term="nginx"></category><category term="tutorial"></category><category term="webdevelopment"></category><category term="environment"></category></entry><entry><title>Contracting in the UK: a tax breakdown</title><link href="https://tech.osteel.me/posts/contracting-in-the-uk-a-tax-breakdown" rel="alternate"></link><published>2016-12-22T00:00:00+00:00</published><updated>2016-12-22T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2016-12-22:posts/contracting-in-the-uk-a-tax-breakdown</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Edit 26/03/17:&lt;/strong&gt; The 2017/18 tax year is almost here! Read about the changes &lt;a href="/posts/2017/03/26/uk-contractors-should-you-switch-off-the-flat-rate-scheme.html" title="UK Contractors: should you switch off the Flat Rate Scheme?"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;When I started contracting about a year and a half ago, I absolutely didn't want to have to deal with anything accounting-related.&lt;br /&gt;
Which is fine really, as getting an accountant is highly recommended anyway - for &lt;a href="http://www.companybug.com/do-i-have-to-use-an-accountant-for-my-company/"&gt;various good reasons&lt;/a&gt; - and there is a plethora of companies on the market that do just that.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Accounting" src="/images/2016/12/22/accounting.jpg" title="Accounting" /&gt;&lt;/p&gt;
&lt;p&gt;I picked one that had been recommended to me by a fellow contractor and they did everything for me, from opening my limited company and business bank account to dealing with VAT registration, among other boring things.&lt;br /&gt;
All I had to do was to sign papers and pretend to understand what they were telling me over the phone.&lt;/p&gt;
&lt;p&gt;Easy.&lt;/p&gt;
&lt;p&gt;Earlier this year though, as I had been in the contracting business for a little more than a year, I started to feel like I should try and understand a bit more what was what.&lt;/p&gt;
&lt;p&gt;Needless to say, it didn't turn out to be an easy task.&lt;/p&gt;
&lt;p&gt;I started googling around and realised the first few result pages were hogged by accounting companies that were all more or less providing the same content - enough to get a global grasp, but nothing breaking down things in detail.&lt;/p&gt;
&lt;p&gt;I kept digging nevertheless and, with my findings and some answers provided by my accounting team, I eventually got to a point which I think is a basic but decent understanding of what's going on, now all compiled below in a post I wrote while enjoying a well-deserved end-of-year holiday.&lt;/p&gt;
&lt;p&gt;What could be better than an article about taxes to put you in the Christmas mood anyway?&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tax-typology"&gt;Tax Typology&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-corporation-tax"&gt;1. Corporation Tax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-paye-and-national-insurance-contributions"&gt;2. PAYE and National Insurance contributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-tax-on-dividends"&gt;3. Tax on dividends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-vat"&gt;4. VAT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yearly-projection"&gt;Yearly projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="disclaimer"&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;What follows is closely related to my own contracting experience as an IT consultant, to the way I operate on a daily basis as the director of my limited company. While this post certainly isn't exhaustive, I think it covers most of the questions that will arise for the average contractor at some point, and should allow you to make a projection for your own company based on your personal situation.&lt;/p&gt;
&lt;p&gt;The aim here is not for you to deal with your own company accounts, but more to understand the stuff your accountant is sending you, beginning with your personal illustration when you're just getting started.&lt;/p&gt;
&lt;p&gt;I should also point out that what is described below only applies if you can prove that you operate outside of IR35, which is a whole other subject that I won't get into here. You can read more about it &lt;a href="http://www.contractoruk.com/ir35/what_is_ir35_rules_explained.html"&gt;over there&lt;/a&gt; if you wish to.&lt;/p&gt;
&lt;p&gt;Unless stated otherwise, all the info provided is valid for the 2016-17 financial year.&lt;/p&gt;
&lt;h2 id="tax-typology"&gt;Tax typology&lt;/h2&gt;
&lt;p&gt;Taxes come in different flavours and the four main ones are: Corporation Tax, PAYE and National Insurance contributions, tax on dividends, and VAT.&lt;/p&gt;
&lt;p&gt;In the United Kingdom, the department responsible for collecting taxes is &lt;a href="https://www.gov.uk/vat-annual-accounting-scheme"&gt;HMRC&lt;/a&gt; (Her Majesty's Revenue &amp;amp; Customs).&lt;/p&gt;
&lt;h3 id="1-corporation-tax"&gt;1. Corporation Tax&lt;/h3&gt;
&lt;p&gt;Corporation Tax applies to the company's profits and is paid annually by the company, the deadline usually being nine months and a day after the end of your accounting period (which normally corresponds to the fiscal year - from the 6th of April to the 5th of April the following year).&lt;/p&gt;
&lt;p&gt;The tax is 20%.&lt;/p&gt;
&lt;h3 id="2-paye-and-national-insurance-contributions"&gt;2. PAYE and National Insurance contributions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PAYE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Income tax or PAYE (Pay As You Earn) is based on the employee's income (meaning the director) (meaning you) and is retained and paid for by the employer monthly or quarterly.&lt;/p&gt;
&lt;p&gt;There is a yearly Personal Allowance of £11,000 on standard income, which essentially means that the first £11,000 of income are tax free.&lt;/p&gt;
&lt;p&gt;Here are the tax bands for the 2016-17 fiscal year:&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;Allowance (0%)&lt;/th&gt;&lt;td&gt;Up to £11,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Basic rate (20%)&lt;/th&gt;&lt;td&gt;From £11,001 to £43,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Higher rate (40%)&lt;/th&gt;&lt;td&gt;From £43,001 to £150,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Additional rate (45%)&lt;/th&gt;&lt;td&gt;Over £150,000&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Expenses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I should probably drop a quick note about expenses at this point.&lt;/p&gt;
&lt;p&gt;These are the purchases you as the employee make that are related to your professional activity (transport, meals, hardware, etc). You declare these purchases as business expenses so your company can pay you back as part of your income, but that amount is tax free.&lt;/p&gt;
&lt;p&gt;To put it differently, say you file £65 of expenses in a certain week, you will get this amount back as part of your income but it will not be deducted from your Personal Allowance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;National Insurance contributions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You pay National Insurance contributions so you can benefit from advantages like the State Pension or the Jobseeker's Allowance (the full list of benefits is available &lt;a href="https://www.gov.uk/national-insurance/what-national-insurance-is-for"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are different &lt;a href="https://www.gov.uk/national-insurance/national-insurance-classes"&gt;classes&lt;/a&gt; and &lt;a href="https://www.gov.uk/national-insurance-rates-letters/category-letters"&gt;category letters&lt;/a&gt; corresponding to different rates, but as a company director yours will most likely be class &lt;em&gt;1&lt;/em&gt; and category letter &lt;em&gt;A&lt;/em&gt; (unless specific circumstances as listed in the two previous links).&lt;/p&gt;
&lt;p&gt;National Insurance contributions are paid by both the employee and the employer, based on rates and only above a certain yearly threshold, and the employer pays the total amount to HMRC along with the income tax.&lt;/p&gt;
&lt;p&gt;Employee:&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;0%&lt;/th&gt;&lt;td&gt;From £112 (minimum wage) to £155 per week&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;12%&lt;/th&gt;&lt;td&gt;From £155.01 to £827 per week&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;2%&lt;/th&gt;&lt;td&gt;Over £827 per week&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The employee's threshold is £8,060, meaning the employee will start to see NI contributions deducted from their income once it meets £8,060 for the current fiscal year.&lt;/p&gt;
&lt;p&gt;Employer:&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;0%&lt;/th&gt;&lt;td&gt;From £112 (minimum wage) to £156 per week&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;13.8%&lt;/th&gt;&lt;td&gt;From £156.01 to £827 per week&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;13.8%&lt;/th&gt;&lt;td&gt;Over £827 per week&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The employer's threshold is £8,112, meaning the employer will start to pay NI contributions once the employee's income meets £8,112 for the current fiscal year.&lt;/p&gt;
&lt;h3 id="3-tax-on-dividends"&gt;3. Tax on dividends&lt;/h3&gt;
&lt;p&gt;Being a company director allows you to pay yourself with dividends (since you own 100% of the company's shares) as well as the standard income.&lt;/p&gt;
&lt;p&gt;Just like the latter, there is a Personal Allowance under which dividends are not taxed. Its amount is £5,000, which means that the first £5,000 of dividends are tax free.&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;Allowance (0%)&lt;/th&gt;&lt;td&gt;Up to £5,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Basic rate (7.5%)&lt;/th&gt;&lt;td&gt;From £5,001 to £32,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Higher rate (32.5%)&lt;/th&gt;&lt;td&gt;From £32,001 to £150,000&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Additional rate (38.1%)&lt;/th&gt;&lt;td&gt;Over £150,000&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Tax on dividends is paid annually while you complete your tax return.&lt;/p&gt;
&lt;p&gt;We can already clearly see that standard income tax rates are significantly higher than the dividend ones - that's why contractors usually pay themselves the standard income's Personal Allowance only (so it remains tax free), and the rest with dividends.&lt;/p&gt;
&lt;h3 id="4-vat"&gt;4. VAT&lt;/h3&gt;
&lt;p&gt;The VAT (Value-Added Tax) is basically a tax that is paid every time goods or services are sold. As a business, you must register for VAT only if your annual VAT-taxable turnover is over a certain threshold (£83,000 for 2016-17, usually updated every year), but you can also voluntarily do so even if your turnover is less than that amount (&lt;a href="https://www.thecompanywarehouse.co.uk/blog/2010/12/03/the-advantages-of-voluntary-vat-registration-for-small-business/"&gt;here are some reasons why you would do such a thing&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When you pay for it depends on the chosen VAT scheme, which are quite numerous and vary according to your activity.&lt;/p&gt;
&lt;p&gt;The standard way of dealing with VAT is to keep track of the VAT you invoice (and to pay the corresponding amount to HMRC whether your client paid the invoice or not) as well as the VAT of your business expenditure (which you can likewise claim even if you haven't paid the invoice yet), and to report these amounts to HMRC quarterly.&lt;/p&gt;
&lt;p&gt;Depending on the side of your business and its turnover, however, different options are available to you.&lt;/p&gt;
&lt;p&gt;Going into details for each of them is much like sticking your head down the rabbit hole, so I will only briefly describe some of them and linger for a bit longer on the Flat Rate Scheme, since that's the one I personally registered for (and seems to often be picked by contractors - or is advised by accountants anyway, since it also makes their life easier as we will see).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gov.uk/vat-annual-accounting-scheme"&gt;&lt;strong&gt;Annual Accounting Scheme&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This scheme allows you to submit your VAT return once a year instead of quarterly, for a fixed amount based on the previous return (or an estimate for the first year you register for that scheme).&lt;br /&gt;
You then pay for or get back the difference at the end of the year.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gov.uk/vat-cash-accounting-scheme"&gt;&lt;strong&gt;Cash Accounting Scheme&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The difference between this scheme and the standard one is that you pay and claim VAT for invoices that were actually paid rather than from the moment you send or receive them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gov.uk/vat-margin-schemes"&gt;&lt;strong&gt;Margin schemes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The VAT corresponds to 16.67% of the difference between the price you paid for an object (antiques, works of art...) and the price you sold it for.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gov.uk/vat-flat-rate-scheme/overview"&gt;&lt;strong&gt;Flat Rate Scheme&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At first glance the Flat Rate Scheme is quite appealing, since it greatly simplifies things and in most cases will actually save you some dough (via the VAT credit you get by charging more VAT than your company actually pays for - see the &lt;a href="#example"&gt;example below&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The way it works is that you charge 20% VAT to your clients as usual, but you only pay a fixed (lower) percentage of VAT to HMRC in return. That percentage depends on your activity (see &lt;a href="https://www.gov.uk/vat-flat-rate-scheme/how-much-you-pay"&gt;the table on this page&lt;/a&gt; for comparison) and is reduced by 1% the first year - e.g. as an IT consultant my rate is 14.5% (and was 13.5% the first year).&lt;/p&gt;
&lt;p&gt;That means that I charge a 20% VAT to my clients and pay 14.5% back to HMRC - the difference is the VAT credit, added to my company profit.&lt;/p&gt;
&lt;p&gt;This is quite simple indeed since there is no need to keep track of the VAT for each business expenditure. The Flat Rate Scheme doesn't allow you to claim VAT on such expenses, &lt;a href="https://www.gov.uk/government/publications/vat-notice-733-flat-rate-scheme-for-small-businesses/vat-notice-733-flat-rate-scheme-for-small-businesses#reclaim-of-vat-on-capital-expenditure-goods"&gt;apart for purchases above £2,000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it might seem like a no-brainer, there is slightly more to this: the scheme certainly simplifies the process around VAT, but this simplification also benefits to your accountant and HMRC. You will most certainly get VAT credit, which is a good thing, but whether it is more beneficial to you than say the Cash Accounting Scheme should be estimated first, based on your expected business expenses. &lt;/p&gt;
&lt;p&gt;At the end of the day which option is best for you really depends on your personal situation, but in any case you should ask your accountant for comparative simulations between the different schemes to make sure you pick what works best for your business, not only what works best for them.&lt;/p&gt;
&lt;p&gt;There is obviously much more to VAT than the above (specific rules for &lt;a href="https://www.gov.uk/vat-builders"&gt;builders&lt;/a&gt;, &lt;a href="https://www.gov.uk/vat-charities"&gt;charities&lt;/a&gt;, &lt;a href="https://www.gov.uk/vat-retail-schemes"&gt;retailers&lt;/a&gt;... or even depending on whether you trade internationally), and there's quite some &lt;a href="https://www.gov.uk/browse/tax/vat"&gt;literature about it&lt;/a&gt; on HMRC's website if you need more information.&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;Alright, enough with the theory, it all truly starts to make sense once applied concretely.&lt;/p&gt;
&lt;p&gt;Let's have a look at an example, in which we'll calculate the  amount of &lt;em&gt;take-home&lt;/em&gt; based on a weekly invoice of £1,500 plus VAT (+20%), so five days at £300 plus VAT per day.&lt;/p&gt;
&lt;p&gt;In order to be tax-efficient, say we only want to pay ourselves the Personal Allowance of £11,000 mentioned earlier, which over a year (52 weeks) is £11,000 / 52 = £210 per week (approximately).&lt;br /&gt;
This will allow us not to pay any tax on income, meaning we will pay ourselves with dividends instead, which are taxed at a lower rate as we already saw.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am using a weekly average for the sake of simplicity, but then again this is just an example, YMMV.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;VAT credit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since our daily rate is £300 plus VAT and we charge 20% VAT to the client, we send a weekly invoice of:&lt;/p&gt;
&lt;p&gt;£1,500 + VAT&lt;br /&gt;
= £1,500 + (£1,500 * 0.2)&lt;br /&gt;
= £1,500 + £300&lt;br /&gt;
= £1,800&lt;/p&gt;
&lt;p&gt;Say we registered for the Flat Rate Scheme which, as an IT consultant, means we have to pay a 14.5% rate.&lt;br /&gt;
14.5% of £1,800 is £261, which is the amount we owe to the taxman.&lt;/p&gt;
&lt;p&gt;Since the amount of VAT charged to the client is £300, in effect that's a &lt;em&gt;VAT credit&lt;/em&gt; of £300 - £261 = £39.&lt;/p&gt;
&lt;p&gt;Your company essentially keeps the difference between the VAT it charges and the VAT it pays (the VAT credit).&lt;/p&gt;
&lt;p&gt;In our example, that means our company profit is now £1,500 + £39 = £1,539.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PAYE, NI contributions and expenses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We already saw that since we'll pay ourselves the Personal Allowance only, we won't pay any PAYE tax on our income. But as this allowance (£11,000) is more than the NI contributions thresholds (£8,060 and £8,112 for the employee and the employer respectively), we will have to pay some NI contributions eventually.&lt;/p&gt;
&lt;p&gt;Assuming you would pay yourself the same weekly income throughout the year (52 weeks), the NI contributions &lt;em&gt;could&lt;/em&gt; be calculated like so, as a weekly average:&lt;/p&gt;
&lt;p&gt;The NI contributions rate is 0% up to £155, and 12% of the remaining £55, so £55 * 0.12 = £6.6 paid by the employee per week.&lt;/p&gt;
&lt;p&gt;NI contributions are 0% up to £156, and 13.8% of the remaining £54, so £54 * 0.138 = £7.45 paid by the employer per week.&lt;/p&gt;
&lt;p&gt;In practice however, NI deductions would only appear on your payslips once the employee's threshold is met, and the company's liability in this regard would only start to be accounted for once the employer's threshold is met.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity however, and to show you how they are accounted for, let's consider that we take these NI contributions into account on a weekly basis.&lt;/p&gt;
&lt;p&gt;Our company pays us (as the employee) £210, plus £7.45 of NI contributions to HMRC, so £217.45 in total.&lt;br /&gt;
The company profit is now £1,539 - £217.45 = £1,321.55.&lt;/p&gt;
&lt;p&gt;As we saw earlier, however, as a contractor chances are you will have expenses to file, such as transport costs, meals, books, etc. These expenses are paid to you by your company as tax-free income, so if you spend say £50 on that week, the company will pay you back £50.&lt;/p&gt;
&lt;p&gt;Hence the company profit becomes £1,321.55 - £50 = 1,271.55.&lt;/p&gt;
&lt;p&gt;You as the employee are paid £210 - £6.6 of NI contributions = £203.4. We don't count the £50 of expenses here, since you paid for it in the first place - your company is just paying you back.&lt;br /&gt;
It's cancelled out.&lt;/p&gt;
&lt;p&gt;(Don't worry if you start to feel a bit schizophrenic at this point, that's perfectly normal.) &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corporation Tax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is on this remaining company profit that the Corporation Tax is applied (20%):&lt;/p&gt;
&lt;p&gt;£1,271.55 * 0.2 = £254.31&lt;/p&gt;
&lt;p&gt;£254.28 is thus what you should keep in your company's bank account for the taxman.&lt;/p&gt;
&lt;p&gt;That also means that the remaining £1,017.24 (£1,271.55 - £254.31) can be paid to you as dividends.&lt;/p&gt;
&lt;p&gt;The total take-home is thus £1,017.24 + £203.4 = £1,220.64.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrapping it up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's go over our initial assumptions again and sum it all up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;our daily rate is £300 + VAT&lt;/li&gt;
&lt;li&gt;we work five days a week&lt;/li&gt;
&lt;li&gt;we pay ourselves £210 per week throughout the year (that's 52 weeks)&lt;/li&gt;
&lt;li&gt;we registered for the Flat Rate Scheme&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that in mind, the weekly take-home would be £1,220.64 out of the £1,500 we invoice or, to put it differently, a whopping 81% of the initial amount.&lt;/p&gt;
&lt;p&gt;But then again that's only an &lt;em&gt;average&lt;/em&gt; amount, as in practice you wouldn't pay for the NI contributions until the threshold is reached and it is very unlikely you would work five days a week for 52 weeks (it's actually impossible, if only because of bank holidays).&lt;/p&gt;
&lt;p&gt;You could probably still pay yourself £210 a week (even when you don't work), but not as much in dividends.&lt;/p&gt;
&lt;p&gt;Let's consider it could be the case anyway, just for the sake of the example: does that mean you could earn 52 * £1,220.64 = £63,473.28 a year?&lt;/p&gt;
&lt;p&gt;Well, not quite. We are not paying any tax on income, that's true, but let's not forget that dividends are subject to their own tax too.&lt;/p&gt;
&lt;p&gt;That's why it now makes sense to think on a yearly scale, now that you understand how things work on a weekly one.&lt;/p&gt;
&lt;h2 id="yearly-projection"&gt;Yearly projection&lt;/h2&gt;
&lt;p&gt;We know that the Personal Allowance for the current fiscal year (2016-17) is £11,000, which is tax free.&lt;/p&gt;
&lt;p&gt;As for dividends, the allowance is £5,000, then the basic rate is 7.5% up to £32,000, and then 32.5% above that (and 38.1% for the higher tax band).&lt;/p&gt;
&lt;p&gt;If we decide to stay beneath the first band for tax-efficiency purposes, that means that £32,000 - £5,000 = £27,000 is taxed at a 7.5% rate, so we would pay £27,000 * 0.075 = £2,025 of tax on dividends.&lt;br /&gt;
Meaning that over the year, we could get £32,000 - £2,025 = £29,975 as dividends after tax.&lt;/p&gt;
&lt;p&gt;£11,000 is above the NI contributions thresholds of both the employee and the employer, but we're mainly interested in the take-home here so we can ignore the latter.&lt;/p&gt;
&lt;p&gt;As we saw earlier the employee's threshold for NI contributions is £8,060 for the current financial year, and anything above that is taxed at a 12% rate up to £43,004 (£827 by 52 weeks). This means that £11,000 - £8,060 = £2,940 is taxed at a 12% rate, so we would pay £2,940 * 0.12 = £352.8 of NI contributions over the year.&lt;/p&gt;
&lt;p&gt;Combining all of the above, we could get an income of £11,000 - £352.8 = £10,647.2, plus £29,975 of dividends, so a total of £40,622.2 after tax over the year.&lt;/p&gt;
&lt;p&gt;With the same assumptions we used in the previous example, we would need to work £40,622.2 / £1,220.64 = 33.28, basically a bit more than 33 weeks over the year to reach that amount.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this will shed some light on an obscure income statement or help your decision if you are considering taking the plunge and becoming a contractor.&lt;/p&gt;
&lt;p&gt;I am not by any measure an accountant so there might be inaccuracies here and there, or I might have left out elements I'm not aware of (if that's the case please let me know about it in the comments).&lt;/p&gt;
&lt;p&gt;Then again, the aim here is not for you to do your own accounting, but rather to give you the keys so you can make a projection for your own company based on your personal situation.&lt;/p&gt;
&lt;p&gt;Finally, if you are contemplating becoming a contractor in the near future and are not sure which accountant to go for, I can hook you up with mine - just &lt;a href="mailto:yannickchenot@gmail.com"&gt;drop me a line&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Corporation Tax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/corporation-tax/overview"&gt;Corporation Tax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/corporation-tax-rates"&gt;Corporation Tax rates and reliefs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PAYE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/income-tax/overview"&gt;Income Tax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/income-tax-rates"&gt;Income Tax rates and Personal Allowances&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NI contributions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/national-insurance"&gt;National Insurance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/employee-directors"&gt;National Insurance for company directors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/national-insurance-rates-letters/contribution-rates"&gt;National Insurance rates and categories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tax on dividends&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/tax-on-dividends/how-dividends-are-taxed"&gt;Tax on dividends&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VAT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/topic/business-tax/vat"&gt;VAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/vat-registration/overview"&gt;VAT registration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecompanywarehouse.co.uk/blog/2010/12/03/the-advantages-of-voluntary-vat-registration-for-small-business/"&gt;The Advantages Of Voluntary VAT Registration For Small Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sage.co.uk/business-advice/legislation/vat-for-small-business"&gt;VAT Schemes for Small Businesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/vat-flat-rate-scheme/overview"&gt;VAT Flat Rate Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.contractoruk.com/vat/flat_rate.html"&gt;IT contractor guide to Flat Rate VAT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other related sources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.contractoruk.com/limited_companies/contractor_taxes.html"&gt;Preparing for the inevitable: What taxes will I have to pay?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gov.uk/guidance/rates-and-thresholds-for-employers-2016-to-2017"&gt;Rates and thresholds for employers 2016 to 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="contracting"></category><category term="taxes"></category><category term="uk"></category></entry><entry><title>How to enable NFS on Laravel Homestead</title><link href="https://tech.osteel.me/posts/how-to-enable-nfs-on-laravel-homestead" rel="alternate"></link><published>2016-01-26T00:00:00+00:00</published><updated>2016-01-26T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2016-01-19:posts/how-to-enable-nfs-on-laravel-homestead</id><summary type="html">&lt;p&gt;&lt;img alt="Laravel logo" src="/images/2016/01/19/laravel.png" title="Laravel logo" /&gt;&lt;/p&gt;
&lt;p&gt;I currently work on a Laravel project composed of multiple microservices that I run locally using &lt;a href="https://laravel.com/docs/master/homestead"&gt;Homestead&lt;/a&gt; (box v0.4.0 at the time of writing). As I started tinkering around I noticed that requesting the different APIs was super slow - up to 20s per request, which was really unexpected (and annoying to say the least).&lt;/p&gt;
&lt;p&gt;Googling around it appeared that most fingers were pointing to the same suspect: VirtualBox’s shared folders system. Most people were also advising to use &lt;a href="https://en.wikipedia.org/wiki/Network_File_System"&gt;NFS&lt;/a&gt; instead, and as a matter of fact there is a whole &lt;a href="https://docs.vagrantup.com/v2/synced-folders/nfs.html"&gt;section of Vagrant’s documentation on the subject&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried different things found on various forums over the Internet (such as &lt;a href="https://laracasts.com/discuss/channels/requests/nfs-on-homestead-20"&gt;this topic on Laracast&lt;/a&gt;) and, once I got it set up, the time per request dropped to around 1s.&lt;/p&gt;
&lt;p&gt;This, you will agree, was quite an improvement.&lt;/p&gt;
&lt;p&gt;If it originally required a few tweaks in Homestead's configuration, it turns out that with the recent versions of the box, almost all the work is already done.&lt;/p&gt;
&lt;p&gt;The following is of course assuming that you are already using Homestead locally.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note for Windows users:&lt;/strong&gt; You may have noticed that the Vagrant documentation states that NFS is not available on Windows. If you are a PC user, you might want to have a look at &lt;a href="https://github.com/winnfsd/vagrant-winnfsd"&gt;Vagrant WinNFSd&lt;/a&gt; whose promise is to add support for NFS on Windows (I didn’t try it myself).&lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note for Ubuntu users:&lt;/strong&gt; You might need to install the NFS server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install nfs-kernel-server
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;In &lt;code&gt;~/.homestead/Homestead.yaml&lt;/code&gt;, under the &lt;code&gt;folders&lt;/code&gt; section, add a &lt;code&gt;type&lt;/code&gt; option under the folders you wish to map using NFS, as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;folders:
    - map: ~/Work/www/homestead
      to: /home/vagrant/projects
      type: "nfs"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, stop Homestead if it was running (&lt;code&gt;vagrant halt&lt;/code&gt; from &lt;code&gt;~/Homestead&lt;/code&gt; or however you usually do it) and start it again, forcing the provisioning step, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up —-provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will be asked to enter your Mac OS user password before Vagrant mounts the folder(s).&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;You may wonder why isn't NFS activated by default, then: the reason is because it won't work out of the box on all operating systems, as seen in the notes above.&lt;/p&gt;</summary><category term="laravel"></category><category term="homestead"></category><category term="nfs"></category><category term="sharedfolder"></category><category term="tutorial"></category><category term="virtualbox"></category></entry><entry><title>From Vagrant to Docker: How to use Docker for local web development</title><link href="https://tech.osteel.me/posts/from-vagrant-to-docker-how-to-use-docker-for-local-web-development" rel="alternate"></link><published>2016-08-05T00:00:00+01:00</published><updated>2016-08-05T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-12-18:posts/from-vagrant-to-docker-how-to-use-docker-for-local-web-development</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE 2017/01/14]:&lt;/strong&gt; This article is slightly outdated and an up to date version is now available. If you are new to Docker, keep reading as most of the content is still valid and will get you familiar with how Docker works, but then make sure to head &lt;a href="/posts/2017/01/15/how-to-use-docker-for-local-web-development-an-update.html"&gt;over here&lt;/a&gt; to get the most of Docker and Docker Compose's latest versions.&lt;/p&gt;
&lt;p&gt;There are other ways to install Docker on your machine than the one mentioned here - &lt;a href="/posts/2017/01/15/how-to-use-docker-for-local-web-development-an-update.html"&gt;learn about them in the new post as well&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Docker logo" src="/images/2015/12/18/docker-tutorial1.jpg" title="Docker logo" /&gt;&lt;/p&gt;
&lt;p&gt;If you are somewhat following what's happening in the tech world, you must have heard of Docker.&lt;/p&gt;
&lt;p&gt;If you haven't, first, get out of your cave, and then, here is a short description of the thing, borrowed from &lt;a href="https://en.wikipedia.org/wiki/Docker_%28software%29"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;"Wow, cool. What the hell does that mean tho?"&lt;/em&gt; I hear you say. Hang on! It goes on, saying that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[it allows] independent "containers" to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm ok. It starts to sound familiar and vaguely useful.&lt;/p&gt;
&lt;p&gt;I don't know about you, but working on a Mac (and previously on a Windows machine) (shush), I set up a Vagrant box for almost every single project I work on (if you have no clue what Vagrant is, please take a look at &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html"&gt;this post&lt;/a&gt; first, especially this &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html#vagrant"&gt;short bit&lt;/a&gt;).&lt;br /&gt;
Whenever I need to work on any of these projects, I run a quick &lt;code&gt;vagrant up&lt;/code&gt; and get it running in its own isolated virtual machine (VM) in a matter of minutes. Pretty handy.&lt;/p&gt;
&lt;p&gt;But that's still a few minutes to get up and running, and having a VM for each project quickly ends up taking a shitload of resources and space on the disk.&lt;br /&gt;
You could take Laravel's initial approach with &lt;a href="http://laravel.com/docs/master/homestead"&gt;Homestead&lt;/a&gt; and run several projects on the same VM, but it kinda defeats the purpose of having isolated environments.&lt;/p&gt;
&lt;p&gt;So what does Docker have to do with this?&lt;/p&gt;
&lt;p&gt;Well, the promise behind it is to provide isolated environments running on a same virtual machine (with &lt;a href="https://github.com/boot2docker/boot2docker"&gt;Boot2Docker&lt;/a&gt;) that starts in about five seconds.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"So... I could replace all my Vagrant boxes with a single super-fast VM running Docker?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Exactamundo.&lt;/p&gt;
&lt;p&gt;And that's what we are going to do today, step by step.&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data"&gt;Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#volumes-and-data-containers"&gt;Volumes and data containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mysql"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#phpmyadmin"&gt;phpMyAdmin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#handling-multiple-projects"&gt;Handling multiple projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, I'm working on a Mac, so this tutorial will be written from a Mac user point of view. That being said, in practice, once the installation is done, the way Docker is used shouldn't differ much (if at all). So, whether you're on a Mac or a PC, just head &lt;a href="https://docs.docker.com/toolbox/overview/"&gt;over here&lt;/a&gt;, download and install Docker Toolbox and follow the instructions for your platform (&lt;a href="https://docs.docker.com/toolbox/toolbox_install_mac/"&gt;Mac OS&lt;/a&gt;, &lt;a href="https://docs.docker.com/toolbox/toolbox_install_windows/"&gt;Windows&lt;/a&gt;) (or, if you're a Linux user, go straight to the specific &lt;a href="http://docs.docker.com/linux/started/"&gt;installation guide&lt;/a&gt; - no need to get Docker Toolbox).&lt;/p&gt;
&lt;p&gt;As stated on the website, Docker Toolbox will install all the stuff you need to get started.&lt;/p&gt;
&lt;p&gt;Follow the steps of the &lt;a href="https://docs.docker.com/engine/getstarted/"&gt;Get Started with Docker guide&lt;/a&gt; all the way down to the &lt;em&gt;Tag, push, and pull your image&lt;/em&gt; section: it's all very clear and well written and will even help you get your bearings with the terminal if you're not familiar with it.&lt;/p&gt;
&lt;p&gt;I'll take it from there.&lt;/p&gt;
&lt;p&gt;In the meantime, here is a dancing Tyrion:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dancing Tyrion" src="/images/2015/12/18/docker-tutorial3.gif" title="Dancing Tyrion" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might get this kind of error when trying to complete the first step:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Network timed out while trying to connect to https://index.docker.io/v1/repositories/library/hello-world/images. You may want to check your internet connection or if you are behind a proxy.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that case, simply run &lt;code&gt;docker-machine restart default&lt;/code&gt; and try again.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;All good? Well done.&lt;/p&gt;
&lt;p&gt;By now, you should have a virtual machine running with &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; (the virtualisation software used by default under the hood) and know how to find, run, build, push and pull images, and have a better idea of what Docker is and how it works.&lt;/p&gt;
&lt;p&gt;That's pretty cool already, but not exactly concrete. How do you get to the point where you open your browser and display the website you are currently building and interact with a database and everything?&lt;/p&gt;
&lt;p&gt;Stick with me.&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Everything we'll do under this section is available as a &lt;a href="https://github.com/osteel/docker-tutorial"&gt;GitHub repository&lt;/a&gt; you can refer to if you get stuck at any time (you can also directly use it as is if you want).&lt;/p&gt;
&lt;p&gt;Also, as you may have noticed I already started to use the terms &lt;em&gt;virtual machine&lt;/em&gt; and &lt;em&gt;VM&lt;/em&gt; to refer to the same thing. I will sometimes mention a &lt;em&gt;Docker machine&lt;/em&gt; as well. Don't get confused: they are all the same.&lt;/p&gt;
&lt;p&gt;Now that this is clear, let's decide on the technologies. I usually work with the &lt;a href="https://lemp.io/"&gt;LEMP stack&lt;/a&gt;, and I would like to get my hands on PHP7, so let's go for a Linux/PHP7/Nginx/MySQL stack (we'll see how to throw a framework into the mix in another post).&lt;/p&gt;
&lt;p&gt;As we want to have the different parts of the stack to run in separate containers, we need a way to orchestrate them: that's when &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; comes in.&lt;/p&gt;
&lt;p&gt;A lot of tutorials will teach you how to set up a single container first, or a couple of and how to link them together using Docker commands, but in real life it is very unlikely that only one or two containers are going to be needed, and using simple Docker commands to link more containers to each other can quickly become a pain in the bottom.&lt;/p&gt;
&lt;p&gt;Docker Compose allows you to describe your stack specifying the different containers that will compose it through a YAML config file. As the recommended practice is to have one process per container, we will separate things as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a container for Nginx&lt;/li&gt;
&lt;li&gt;a container for PHP-FPM&lt;/li&gt;
&lt;li&gt;a container for MySQL&lt;/li&gt;
&lt;li&gt;a container for phpMyAdmin&lt;/li&gt;
&lt;li&gt;a container to make MySQL data persistent&lt;/li&gt;
&lt;li&gt;a container for the application code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another common thing among the tutorials and articles I came through is that their authors often use their own images, which I find somewhat confusing for the newcomers, especially as they rarely explain why they do so.&lt;/p&gt;
&lt;p&gt;Here, we'll use the official images and extra Dockerfiles to extend them.&lt;/p&gt;
&lt;h3 id="nginx"&gt;Nginx&lt;/h3&gt;
&lt;p&gt;But first, let's start with an extremely basic configuration to make sure everything is working properly and that we're all on the same page (this will also allow you to familiarise with a few commands in the process).&lt;/p&gt;
&lt;p&gt;Create a folder for your project (I named mine &lt;em&gt;docker-tutorial&lt;/em&gt;) and add a &lt;code&gt;docker-compose.yml&lt;/code&gt; file into it, with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx:
    image: nginx:latest
    ports:
        - 80:80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save it and, from that same folder in your terminal, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might take a little while as the Nginx image needs to be pulled first. When it is done, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ip default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the IP address that displays and paste it in the address bar of your favourite browser. You should see Nginx's welcome page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nginx welcome page" src="/images/2015/12/18/docker-tutorial4.png" title="Nginx welcome page" /&gt;&lt;/p&gt;
&lt;p&gt;Nice! So what did we do here?&lt;/p&gt;
&lt;p&gt;First we told Docker Compose that we wanted a container named &lt;code&gt;nginx&lt;/code&gt; to use the &lt;a href="https://hub.docker.com/_/nginx/"&gt;latest official Nginx image&lt;/a&gt; and publish its port 80 (the standard port used by HTTP) on the port 80 of our host machine (that's my Mac in my case).&lt;/p&gt;
&lt;p&gt;Then we asked Docker Compose to build and start the containers described in &lt;code&gt;docker-compose.yml&lt;/code&gt; (just one so far) with &lt;code&gt;docker-compose up&lt;/code&gt;. Option &lt;code&gt;-d&lt;/code&gt; allows to have the containers running in the background and gives the terminal back.&lt;/p&gt;
&lt;p&gt;Finally, we displayed the private IP address of the virtual machine created by Docker and named &lt;code&gt;default&lt;/code&gt; (you can check this running &lt;code&gt;docker-machine ls&lt;/code&gt;, which will give you the list of running machines).&lt;/p&gt;
&lt;p&gt;As we published the port 80 of this virtual machine, we can access it from our host machine.&lt;/p&gt;
&lt;p&gt;One last thing to observe before we move on: in your terminal, type &lt;code&gt;docker ps&lt;/code&gt;. You should see something like that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of containers" src="/images/2015/12/18/docker-tutorial5.png" title="List of containers" /&gt;&lt;/p&gt;
&lt;p&gt;That's the list of all the running containers and the images they use. For now we only have one container, using the official Nginx image. Here its name is &lt;em&gt;dockertutorial_nginx_1&lt;/em&gt;: Docker Compose came up with it using the name of the current directory and the image's and appended a digit to prevent name collisions.&lt;/p&gt;
&lt;h3 id="php"&gt;PHP&lt;/h3&gt;
&lt;p&gt;Still following? Good. Now let's try and add PHP and a custom &lt;code&gt;index.php&lt;/code&gt; file to be displayed when accessing the machine's private IP.&lt;/p&gt;
&lt;p&gt;Replace the content of &lt;code&gt;docker-compose.yml&lt;/code&gt; with this one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx:
    build: ./nginx/
    ports:
        - 80:80
    links:
        - php
    volumes:
        - ./www/html:/var/www/html

php:
    image: php:7.0-fpm
    expose:
        - 9000
    volumes:
        - ./www/html:/var/www/html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few things here: we added a new container named &lt;code&gt;php&lt;/code&gt;, which will use the official PHP image, and more specifically the &lt;code&gt;7.0-fpm&lt;/code&gt; tag. As this image doesn't expose the port 9000 by default, we specify it ourselves.&lt;/p&gt;
&lt;p&gt;At this point you might be wondering what is the difference between &lt;code&gt;expose&lt;/code&gt; and &lt;code&gt;ports&lt;/code&gt;: the former allows to expose some ports to the &lt;em&gt;other containers only&lt;/em&gt;, and the latter makes them accessible to the &lt;em&gt;host machine&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We also added a &lt;code&gt;volumes&lt;/code&gt; key. What we're saying here is that the directory &lt;code&gt;./www/html&lt;/code&gt; must be mounted inside the container as its &lt;code&gt;/var/www/html&lt;/code&gt; directory. To simplify, it means that the content of &lt;code&gt;./www/html&lt;/code&gt; on our host machine will be &lt;em&gt;in sync&lt;/em&gt; with the container's &lt;code&gt;/var/www/html&lt;/code&gt; directory. It also means that this content will be &lt;em&gt;persistent&lt;/em&gt; even if we destroy the container.&lt;br /&gt;
More on that later.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have trouble mounting a local folder inside a container, please have a look at the corresponding &lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-host-directory-as-a-data-volume"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The &lt;code&gt;nginx&lt;/code&gt; container's config has been slightly modified as well: it got the same &lt;code&gt;volumes&lt;/code&gt; key as the &lt;code&gt;php&lt;/code&gt; one (as the Nginx container needs an access to the content to be able to serve it), and a new &lt;code&gt;links&lt;/code&gt; key appeared. We are telling Docker Compose that the &lt;code&gt;nginx&lt;/code&gt; container needs a link to the &lt;code&gt;php&lt;/code&gt; one (don't worry if you are confused, this will make sense soon).&lt;/p&gt;
&lt;p&gt;Finally, we replaced the &lt;code&gt;image&lt;/code&gt; key for a &lt;code&gt;build&lt;/code&gt; one, pointing to a &lt;code&gt;nginx/&lt;/code&gt; directory inside the current folder. Here, we tell Docker Compose not to use an existing image but to use the &lt;code&gt;Dockerfile&lt;/code&gt; from &lt;code&gt;nginx/&lt;/code&gt; to build a new image.&lt;/p&gt;
&lt;p&gt;If you followed the &lt;em&gt;get started&lt;/em&gt; guide, you should already have an idea of what a Dockerfile is. Basically, it is a file allowing to describe what must be installed on the image, what commands should be run on it, etc.&lt;/p&gt;
&lt;p&gt;Here is what ours looks like (create a &lt;code&gt;Dockerfile&lt;/code&gt; file with this content under a new &lt;code&gt;nginx/&lt;/code&gt; directory):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM nginx:latest

COPY ./default.conf /etc/nginx/conf.d/default.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not much to see, eh!&lt;/p&gt;
&lt;p&gt;We start from the official Nginx image we have already used earlier and we replace the default configuration it contains with our own (might be worth noting that by default the official Nginx image will only take files named following the pattern &lt;code&gt;*.conf&lt;/code&gt; and under &lt;code&gt;conf.d/&lt;/code&gt; into account - a mere detail but it drove me crazy for almost three hours at the time).&lt;/p&gt;
&lt;p&gt;Let's add this &lt;code&gt;default.conf&lt;/code&gt; file into &lt;code&gt;nginx/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80 default_server;
    root /var/www/html;
    index index.html index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/error.log error;

    sendfile off;

    client_max_body_size 100m;

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a very basic Nginx server config.&lt;/p&gt;
&lt;p&gt;What is interesting to note here however is this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fastcgi_pass php:9000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are asking Nginx to proxy the requests to the port 9000 of our &lt;code&gt;php&lt;/code&gt; container: that's what the &lt;code&gt;links&lt;/code&gt; key from the config for the &lt;code&gt;nginx&lt;/code&gt; container in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file was for!&lt;/p&gt;
&lt;p&gt;We just need one more file - &lt;code&gt;index.php&lt;/code&gt;, inside &lt;code&gt;www/html&lt;/code&gt; under the current directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;img src="https://tech.osteel.me/images/2015/12/18/docker-tutorial2.gif" alt="Hello World!" /&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it only contains HTML but we just want to make sure that PHP files are correctly served.&lt;/p&gt;
&lt;p&gt;Here is what your tree should look like by now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tree" src="/images/2015/12/18/docker-tutorial6.png" title="Tree" /&gt;&lt;/p&gt;
&lt;p&gt;Go back to your terminal and run &lt;code&gt;docker-compose up -d&lt;/code&gt; again. Docker Compose will detect the configuration changes and build and start the containers again (it will also pull the PHP image):&lt;/p&gt;
&lt;p&gt;&lt;img alt="docker-compose up" src="/images/2015/12/18/docker-tutorial7.png" title="docker-compose up" /&gt;&lt;/p&gt;
&lt;p&gt;Browse the virtual machine's private IP again (&lt;code&gt;docker-machine ip default&lt;/code&gt; if you closed the tab): you should be greeted by a famous Doctor.&lt;/p&gt;
&lt;p&gt;Now type &lt;code&gt;docker ps&lt;/code&gt; in your terminal to display the list of running containers again:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of containers" src="/images/2015/12/18/docker-tutorial8.png" title="List of containers" /&gt;&lt;/p&gt;
&lt;p&gt;We can see a new one appeared, using the official PHP image, and the Nginx one looks a bit different from the previous one: Docker Compose used the Dockerfile to automatically build a new image from the official Nginx one, and used it for the container.&lt;/p&gt;
&lt;p&gt;Now if you remember, I said earlier that the current directory is in sync with the containers' (because of the &lt;code&gt;volumes&lt;/code&gt; key in &lt;code&gt;docker-compose.yml&lt;/code&gt;). Let's check if I'm not a liar: open &lt;code&gt;index.php&lt;/code&gt; and change the page title for &lt;em&gt;"Hello Universe!"&lt;/em&gt;, for example. Save and reload the page.&lt;/p&gt;
&lt;p&gt;See the change? Sweet.&lt;/p&gt;
&lt;p&gt;Now we have got two containers for Nginx and PHP, talking to each other and serving files we can update from our host machine and see the result instantly.&lt;/p&gt;
&lt;p&gt;Time to add some database madness!&lt;/p&gt;
&lt;h3 id="data"&gt;Data&lt;/h3&gt;
&lt;h4 id="volumes-and-data-containers"&gt;Volumes and data containers&lt;/h4&gt;
&lt;p&gt;Before we actually dive into the configuration of MySQL, let's have a closer look at this &lt;code&gt;volumes&lt;/code&gt; thing. Both the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;php&lt;/code&gt; containers have the same directory mounted inside, and it's common practice to use what is called a &lt;em&gt;data container&lt;/em&gt; to hold this kind of data.&lt;br /&gt;
In other words, it's a way to &lt;em&gt;factorise&lt;/em&gt; the access to this data by other containers.&lt;/p&gt;
&lt;p&gt;Change the content of &lt;code&gt;docker-compose.yml&lt;/code&gt; for the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx:
    build: ./nginx/
    ports:
        - 80:80
    links:
        - php
    volumes_from:
        - app

php:
    image: php:7.0-fpm
    expose:
        - 9000
    volumes_from:
        - app

app:
    image: php:7.0-fpm
    volumes:
        - ./www/html:/var/www/html
    command: "true"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Several things happened: first, we added a new container named &lt;code&gt;app&lt;/code&gt;, using the same &lt;code&gt;volumes&lt;/code&gt; parameter as the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;php&lt;/code&gt; ones. The purpose of this container is solely to hold the application code: when Docker Compose will create it, it is going to be stopped at once as it doesn't do anything apart from executing the command &lt;em&gt;"true"&lt;/em&gt;. This is not a problem as for the volume to be accessible, the container needs to exist but doesn't need to be running, also preventing the pointless use of extra resources.&lt;br /&gt;
Besides, you'll notice that we're using the same PHP image as the &lt;code&gt;php&lt;/code&gt; container's: this is a good practice as this image already exists and reusing it doesn't take any extra space (as opposed to using a &lt;em&gt;data-only&lt;/em&gt; image such as &lt;em&gt;busybox&lt;/em&gt;, as you may see in other tutorials out there).&lt;/p&gt;
&lt;p&gt;The other change we made is &lt;code&gt;volumes&lt;/code&gt; was replaced with &lt;code&gt;volumes_from&lt;/code&gt; in &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;php&lt;/code&gt;'s configurations and both are pointing to this new &lt;code&gt;app&lt;/code&gt; container. This is quite self-explanatory, but basically we are telling Docker Compose to mount the volumes from &lt;code&gt;app&lt;/code&gt; in both these containers.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt; again and make sure you can still access the virtual machine's private IP properly.&lt;br /&gt;
Running &lt;code&gt;docker ps&lt;/code&gt; now should display this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of containers" src="/images/2015/12/18/docker-tutorial9.png" title="List of containers" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Wait a minute. Where's the &lt;code&gt;app&lt;/code&gt; container?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm glad you asked. If you recall I've just said that the container was stopped right after its creation, and &lt;code&gt;docker ps&lt;/code&gt; only displays the &lt;em&gt;running&lt;/em&gt; containers.&lt;br /&gt;
Now run &lt;code&gt;docker ps -a&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of containers" src="/images/2015/12/18/docker-tutorial10.png" title="List of containers" /&gt;&lt;/p&gt;
&lt;p&gt;There it is!&lt;/p&gt;
&lt;p&gt;If you're interested in reading more about data containers and volumes (and I encourage you to do so), I'd suggest &lt;a href="http://container-solutions.com/understanding-volumes-docker/" title="Understanding Volumes in Docker"&gt;this article by Adrian Mouat&lt;/a&gt; which gives a good overview (you will also find all the sources I used at the end of this article).&lt;/p&gt;
&lt;h4 id="mysql"&gt;MySQL&lt;/h4&gt;
&lt;p&gt;Alright! Enough digression, back to MySQL. &lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;docker-compose.yml&lt;/code&gt; again and add this at the end:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql:
    image: mysql:latest
    volumes_from:
        - data
    environment:
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: project
        MYSQL_USER: project
        MYSQL_PASSWORD: project

data:
    image: mysql:latest
    volumes:
        - /var/lib/mysql
    command: "true"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update the config for the &lt;code&gt;php&lt;/code&gt; container to add a link to the &lt;code&gt;mysql&lt;/code&gt; one and use a Dockerfile to build the image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php:
    build: ./php/
    expose:
        - 9000
    links:
        - mysql
    volumes_from:
        - app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You already know what the purpose of the &lt;code&gt;links&lt;/code&gt; parameter is, so let's have a look at the new Dockerfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM php:7.0-fpm

RUN docker-php-ext-install pdo_mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, not much in there: we simply install the &lt;em&gt;pdo_mysql&lt;/em&gt; extension so we can connect to the database (see &lt;em&gt;How to install more PHP extensions&lt;/em&gt; from the &lt;a href="https://hub.docker.com/_/php/"&gt;image's doc&lt;/a&gt;). Put this file in a new &lt;code&gt;php/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Moving on to the MySQL configuration: we start from the &lt;a href="https://hub.docker.com/_/mysql/"&gt;official MySQL image&lt;/a&gt;, and as you can see there is a new &lt;code&gt;environment&lt;/code&gt; key we haven't met so far: it allows to declare some environment variables that will be accessible in the container. More specifically here, we set the root password for MySQL, and a name (&lt;code&gt;project&lt;/code&gt;), a user and a password for a database to be created (all the available variables are listed in the &lt;a href="https://hub.docker.com/_/mysql/"&gt;image's documentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Following the same principle as exposed earlier, we also declare a &lt;code&gt;data&lt;/code&gt; container whose aim is only to hold the MySQL data present in &lt;code&gt;/var/lib/mysql&lt;/code&gt; on the container (and reusing the same MySQL image to save disk space). You might have noticed that, unlike what we were doing so far, we do not declare a specific directory on the host machine to be mounted into &lt;code&gt;/var/lib/mysql&lt;/code&gt; (normally specified before the colon): we don't need to know where this directory is, we just want its content to persist, so we let Docker Compose handle this part.&lt;br /&gt;
Although that does not mean we have no idea where this folder sits - but we'll have a look at this later.&lt;/p&gt;
&lt;p&gt;One thing worth noting right now tho, is that if this volume already contains MySQL data, the &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; variable will be ignored and if the &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; already exists, it will remain untouched.&lt;/p&gt;
&lt;p&gt;In order to be able to test the connection to the database straight away, let's update the &lt;code&gt;index.php&lt;/code&gt; file a bit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;img src="https://tech.osteel.me/images/2015/12/18/docker-tutorial2.gif" alt="Hello World!" /&amp;gt;
        &amp;lt;?php
        $database   = $user = $password = "project";
        $host       = "mysql";
        $connection = new PDO("mysql:host={$host};dbname={$database};charset=utf8", $user, $password);
        $query      = $connection-&amp;gt;query("SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'");
        $tables     = $query-&amp;gt;fetchAll(PDO::FETCH_COLUMN);

        if (empty($tables)) {
            echo "&amp;lt;p&amp;gt;There are no tables in database \"{$database}\".&amp;lt;/p&amp;gt;";
        } else {
            echo "&amp;lt;p&amp;gt;Database \"{$database}\" has the following tables:&amp;lt;/p&amp;gt;";
            echo "&amp;lt;ul&amp;gt;";
            foreach ($tables as $table) {
                echo "&amp;lt;li&amp;gt;{$table}&amp;lt;/li&amp;gt;";
            }
            echo "&amp;lt;/ul&amp;gt;";
        }
        ?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This script will try to connect to the database and list the tables it contains.&lt;/p&gt;
&lt;p&gt;We're all set! Run &lt;code&gt;docker-compose up -d&lt;/code&gt; in your terminal again, followed by &lt;code&gt;docker ps -a&lt;/code&gt; (again, it might take a little while as the MySQL image needs to be pulled). You should see five containers, two of which are exited:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of containers" src="/images/2015/12/18/docker-tutorial11.png" title="List of containers" /&gt;&lt;/p&gt;
&lt;p&gt;Now refresh the browser tab: &lt;em&gt;"There are no tables in database 'project'"&lt;/em&gt; should appear.&lt;/p&gt;
&lt;p&gt;Event though the next point is about phpMyAdmin and you will be able to use it to edit your databases, I am now going to show you how to access the running MySQL container and use the MySQL command line interface.&lt;/p&gt;
&lt;p&gt;From the result of the previous command, copy the &lt;em&gt;running&lt;/em&gt; MySQL container ID (&lt;code&gt;5207587d116b&lt;/code&gt; in our case) and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec -it 5207587d116b /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are now running an interactive shell in this container (you can also use its name instead of its ID).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/exec/"&gt;&lt;code&gt;docker exec&lt;/code&gt;&lt;/a&gt; allows to execute a command in a running container, &lt;code&gt;-t&lt;/code&gt; attaches a terminal and &lt;code&gt;-i&lt;/code&gt; makes it interactive. Finally, &lt;code&gt;/bin/bash&lt;/code&gt; is the command that is run and creates a &lt;code&gt;bash&lt;/code&gt; instance inside the container.&lt;/p&gt;
&lt;p&gt;Of course, you can use the same command for other containers too.&lt;/p&gt;
&lt;p&gt;From there, all you need to do is run &lt;code&gt;mysql -uroot -psecret&lt;/code&gt; to enter the MySQL CLI. List the databases running &lt;code&gt;show databases;&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="List of databases" src="/images/2015/12/18/docker-tutorial12.png" title="List of databases" /&gt;&lt;/p&gt;
&lt;p&gt;Change the current database for &lt;code&gt;project&lt;/code&gt; and create a new table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql&amp;gt; use project
$ mysql&amp;gt; CREATE TABLE users (id int);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refresh the project page: the table &lt;code&gt;users&lt;/code&gt; should now be listed.&lt;/p&gt;
&lt;p&gt;You can exit the MySQL CLI entering &lt;code&gt;\q&lt;/code&gt; and the container with &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is one question about the MySQL data we haven't answered yet: where does it sit on the host machine?&lt;/p&gt;
&lt;p&gt;Earlier we set up the &lt;code&gt;data&lt;/code&gt; container in &lt;code&gt;docker-compose.yml&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data:
    image: mysql:latest
    volumes:
        - /var/lib/mysql
    command: "true"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means we let Docker Compose mount a directory of its choice from the host machine into &lt;code&gt;/var/lib/mysql&lt;/code&gt;. So where is it?&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;docker ps -a&lt;/code&gt; again, copy the ID of the &lt;em&gt;exited&lt;/em&gt; MySQL container this time (&lt;code&gt;7970b851b07a&lt;/code&gt; in our case) , and run :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker inspect 7970b851b07a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some JSON data should appear on your screen. Look for the &lt;code&gt;Mounts&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...,
"Mounts": [
    {
        "Name": "0cd0f26f7a41e40437019d9e5514b237e492dc72a6459da88d36621a9af2599f",
        "Source": "/mnt/sda1/var/lib/docker/volumes/0cd0f26f7a41e40437019d9e5514b237e492dc72a6459da88d36621a9af2599f/_data",
        "Destination": "/var/lib/mysql",
        "Driver": "local",
        "Mode": "",
        "RW": true
    }
],
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data contained in the volume sits in the &lt;code&gt;"Source"&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Hmm I see.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But… what happens to the volumes if we remove the containers that hold them?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Excellent question!&lt;/p&gt;
&lt;p&gt;Well, they actually stay around, taking disk space for nothing.&lt;/p&gt;
&lt;p&gt;Two solutions for this. First, we can make sure to remove the volumes along with the container using the &lt;code&gt;-v&lt;/code&gt; option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker rm -v containerid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, if some containers were removed without the &lt;code&gt;-v&lt;/code&gt; option, resulting in dangling volumes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker volume rm $(docker volume ls -qf dangling=true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command uses the &lt;code&gt;docker volume ls&lt;/code&gt; command with the &lt;code&gt;q&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; options to respectively list the volumes' names only and keep the dangling ones (&lt;code&gt;dangling=true&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Check the &lt;a href="https://docs.docker.com/engine/reference/commandline/cli/"&gt;Docker command line documentation&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h3 id="phpmyadmin"&gt;phpMyAdmin&lt;/h3&gt;
&lt;p&gt;Being able to access a container and deal with MySQL using the command line interface is a good thing, but sometimes it is convenient to have a more friendly user interface. PHPMyAdmin is arguably the &lt;em&gt;de facto&lt;/em&gt; choice when it comes to MySQL, so let's set it up using Docker!&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;docker-compose.yml&lt;/code&gt; again and add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
        - 8080:80
    links:
        - mysql
    environment:
        PMA_HOST: mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, we start from the &lt;a href="https://hub.docker.com/r/phpmyadmin/phpmyadmin/"&gt;official phpMyAdmin image&lt;/a&gt;. We publish its port 80 to the virtual machine's port 8080, we link it to the &lt;code&gt;mysql&lt;/code&gt; container (obviously) and we set it as the host using the &lt;code&gt;PMA_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Save the changes and run &lt;code&gt;docker-compose up -d&lt;/code&gt; again. The image will be downloaded and, once everything is up, visit the project page again, appending &lt;code&gt;:8080&lt;/code&gt; to the private IP (that's how we access the VM's port 8080):&lt;/p&gt;
&lt;p&gt;&lt;img alt="phpMyAdmin" src="/images/2015/12/18/docker-tutorial13.png" title="phpMyAdmin" /&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;root&lt;/code&gt; / &lt;code&gt;secret&lt;/code&gt; as credentials and you're in (&lt;code&gt;project&lt;/code&gt; / &lt;code&gt;project&lt;/code&gt; will work too, giving access to the &lt;code&gt;project&lt;/code&gt; database only, as defined in the &lt;code&gt;mysql&lt;/code&gt; container configuration).&lt;/p&gt;
&lt;p&gt;That one was easy, right?&lt;/p&gt;
&lt;p&gt;That's actually it for the setup!&lt;/p&gt;
&lt;p&gt;This is a lot to digest already, so taking a break might be a good idea. Don't forget to read on eventually though, as the next couple of sections will most likely clarify a few points.&lt;/p&gt;
&lt;p&gt;Again, the setup is also available as a &lt;a href="https://github.com/osteel/docker-tutorial"&gt;GitHub repository&lt;/a&gt;. Feel free to clone it and play around.&lt;/p&gt;
&lt;h2 id="handling-multiple-projects"&gt;Handling multiple projects&lt;/h2&gt;
&lt;p&gt;One big advantage of using Docker rather than say, multiple Vagrant boxes, is if several containers use the same base images, the disk space usage will only increase by the read-write layer of each container, which is usually only a few megabytes.&lt;br /&gt;
To put it differently, if you use the same stack for most of your projects, each new project will basically only take a few extra megabytes to run (not taking into account the size of the codebase here, obviously).&lt;/p&gt;
&lt;p&gt;Say you want to use the same stack except you need PostgreSQL instead of MySQL. All you need to do is change the database container image for your new project, and all the other containers will reuse the images you already have locally.&lt;/p&gt;
&lt;p&gt;Pretty neat.&lt;/p&gt;
&lt;p&gt;But how do you concretely deal with several projects using the same virtual machine?&lt;/p&gt;
&lt;p&gt;First thing to consider is a Docker machine has only one private IP address, so unless you decide to use a different port per project (which should be absolutely fine), you won't be able to have multiple web projects running on the port 80 at the same time.&lt;/p&gt;
&lt;p&gt;That's not really an issue as you can easily stop containers.&lt;/p&gt;
&lt;p&gt;You might have noticed that we used &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; commands in turn, which might be a tad confusing. To simplify, let's say &lt;code&gt;docker-compose&lt;/code&gt; allows to run the same commands as &lt;code&gt;docker&lt;/code&gt;, but on all the containers defined in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file at once, or for these containers only.&lt;/p&gt;
&lt;p&gt;Let's take a couple of examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You already know this command: it displays all the containers of the Docker machine, be they running or not. &lt;em&gt;All&lt;/em&gt; of them.&lt;/p&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will do the same, but for the containers defined in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file of the current directory only (you will notice that &lt;code&gt;-a&lt;/code&gt; is not necessary and that the order of the displayed info is slightly different).&lt;/p&gt;
&lt;p&gt;It comes in handy when you begin to have a lot of containers managed by the same VM.&lt;br /&gt;
But there is more:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will stop all the containers described in the current &lt;code&gt;docker-compose.yml&lt;/code&gt; file. Basically when you are done with a project, run this command to stop all its related containers. To connect the dots with what I said above, that will also free the port 80 for another project if need be.&lt;/p&gt;
&lt;p&gt;Start them again using the now familiar &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also delete all the &lt;em&gt;stopped&lt;/em&gt; containers of the current project running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose rm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like its equivalent &lt;code&gt;docker rm&lt;/code&gt;, you can add the option &lt;code&gt;-v&lt;/code&gt; if you want to remove the corresponding volumes as well (if you don't, you might end up with dangling volumes as already mentioned earlier).&lt;/p&gt;
&lt;p&gt;Check the &lt;a href="https://docs.docker.com/engine/reference/commandline/cli/"&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/reference/"&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/a&gt; references for more details.&lt;/p&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Obviously, not everything is always going to work at once. Docker Compose might refuse to build an image or start a container and what is displayed in the console is not always very helpful.&lt;/p&gt;
&lt;p&gt;When something goes wrong, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose logs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will display the logs for the containers of the current &lt;code&gt;docker-compose.yml&lt;/code&gt; file. You can also run &lt;code&gt;docker-compose ps&lt;/code&gt; and check the &lt;code&gt;State&lt;/code&gt; column: if there is an exit code different than &lt;code&gt;0&lt;/code&gt;, there was a problem with the container.&lt;/p&gt;
&lt;p&gt;Display the logs specific to a container with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker logs containerid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The container's name will work too.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Docker is an amazing technology and of course there is much more to it (I'm not even started with deployment and how to use it into production and believe me, it is very promising).&lt;/p&gt;
&lt;p&gt;Here we used Docker Toolbox and Boot2Docker for simplicity, because it sets up a lot of things for us automatically, but we could have used a Vagrant box just the same and install Docker on it. There is no obligation whatsoever.&lt;/p&gt;
&lt;p&gt;Putting all this together was no trivial exercise, especially as I knew very little about Docker before I started to write this article. It actually took me a couple of days of tinkering around before I started to make any sense of it.&lt;/p&gt;
&lt;p&gt;Docker is evolving super quickly and there are many resources out there from which it's not always easy to separate the wheat from the chaff.&lt;/p&gt;
&lt;p&gt;I believe I only kept the wheat, but then again I'm still a humble beginner so if you spot some chaff, you are very welcome to let me know about it in the comments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docks" src="/images/2015/12/18/docker-tutorial14.gif" title="Docks" /&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discoveringdocker.com/" title="Discovering Docker (e-book)"&gt;Discovering Docker (e-book)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jverdeyen.be/docker/how-php-symfony-coreos-docker/" title="How I develop in PHP with CoreOS and Docker"&gt;How I develop in PHP with CoreOS and Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.newmediacampaigns.com/blog/docker-for-php-developers" title="Docker for PHP Developers"&gt;Docker for PHP Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://container-solutions.com/understanding-volumes-docker/" title="Understanding Volumes in Docker"&gt;Understanding Volumes in Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/dockervolumes/" title="Manage data in containers"&gt;Manage data in containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.docker.com/2015/04/tips-for-deploying-nginx-official-image-with-docker/" title="Tips for Deploying NGINX (Official Image) with Docker"&gt;Tips for Deploying NGINX (Official Image) with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/cli/" title="Use the Docker command line"&gt;Use the Docker command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/reference/" title="Compose CLI reference"&gt;Compose CLI reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/" title="Dockerfile reference"&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="php"></category><category term="mysql"></category><category term="phpmyadmin"></category><category term="nginx"></category><category term="tutorial"></category><category term="webdevelopment"></category><category term="environment"></category></entry><entry><title>How to use the fork of a repository with Composer</title><link href="https://tech.osteel.me/posts/how-to-use-the-fork-of-a-repository-with-composer" rel="alternate"></link><published>2016-08-04T00:00:00+01:00</published><updated>2016-08-04T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-08-10:posts/how-to-use-the-fork-of-a-repository-with-composer</id><summary type="html">&lt;p&gt;&lt;img alt="Composer and GitHub" src="/images/2015/08/10/composer-fork.jpg" title="Composer and GitHub" /&gt;&lt;/p&gt;
&lt;p&gt;When using packages maintained by other developers, you often find yourself waiting for a fix, an update or the merge of a PR that will come with the next release but you need it now. A workaround is to fork the corresponding repository (which you may have done already if you are the author of the PR), make the updates you need and then use your fork in your project instead of the original package.&lt;/p&gt;
&lt;p&gt;If I wanted to use a fork of &lt;a href="https://github.com/guzzle/guzzle"&gt;Guzzle&lt;/a&gt; for example, I would edit &lt;code&gt;composer.json&lt;/code&gt; like so (&lt;a href="https://github.com/osteel"&gt;&lt;code&gt;osteel&lt;/code&gt;&lt;/a&gt; is my GitHub username):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{  
    "name": "osteel/myproject",  
    "description": "My project.",  
    "license": "MIT",  
    "type": "project",  
    "repositories": [  
        {  
            "type": "vcs",  
            "url": "https://github.com/osteel/guzzle"  
        }  
    ],  
    "require": {  
        "laravel/lumen-framework": "5.1.*",  
        "guzzlehttp/guzzle": "dev-master"  
    }  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would use the master branch of my fork (replace &lt;em&gt;master&lt;/em&gt; with whichever branch name you want to use).&lt;/p&gt;
&lt;p&gt;Don't forget to watch the original repository to be aware of new releases, or use &lt;a href="http://gh-release-watch.com"&gt;http://gh-release-watch.com&lt;/a&gt; if you don't want to get notifications for all the issues, conversations, etc (while GitHub is considering the possibility of &lt;a href="https://github.com/isaacs/github/issues/410"&gt;watching for releases only&lt;/a&gt;).&lt;/p&gt;</summary><category term="composer"></category><category term="github"></category><category term="fork"></category><category term="repository"></category><category term="php"></category></entry><entry><title>Handling CORS with Nginx</title><link href="https://tech.osteel.me/posts/handling-cors-with-nginx" rel="alternate"></link><published>2015-08-02T00:00:00+01:00</published><updated>2015-08-02T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-07-19:posts/handling-cors-with-nginx</id><summary type="html">&lt;p&gt;&lt;a href="http://nginx.org/"&gt;&lt;img alt="Nginx logo" src="/images/2015/07/19/nginx.png" title="Nginx logo" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE 2015/08/02]&lt;/strong&gt;&lt;br /&gt;
As &lt;a href="https://twitter.com/OtaK_/status/623057774260408320"&gt;@OtaK_ pointed out&lt;/a&gt;, in most cases CORS should be handled directly by the app as it should return the allowed verbs by endpoint, instead of all of them being allowed by Nginx. This config should only be used for quick development, of a prototype or PoC for example, or if you are certain that the same verbs are allowed for all the endpoints (that would be the case for the assets returned by a CDN, for instance).&lt;br /&gt;
&lt;strong&gt;[/UPDATE]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the always wider adoption of API-driven architecture, chances are you already had to deal with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" title="HTTP access control (CORS)"&gt;cross-origin resource sharing&lt;/a&gt; at some point.&lt;/p&gt;
&lt;p&gt;Whilst it is possible to deal with it from the code and you will find many packages or snippets to do so, we can remove the CORS handling from our app and let the HTTP server take care of it.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://enable-cors.org/index.html"&gt;Enable CORS&lt;/a&gt; website contains useful resources to this end, but when I tried to use their &lt;a href="http://enable-cors.org/server_nginx.html"&gt;Nginx config&lt;/a&gt; for my own projects it didn't quite work as expected.&lt;/p&gt;
&lt;p&gt;The following examples are based on the Nginx server configurations generated by &lt;a href="http://laravel.com/docs/master/homestead"&gt;Homestead&lt;/a&gt;, but the steps won't change much even if you are not using Laravel's dev environment.&lt;/p&gt;
&lt;h2 id="nginx-extras"&gt;nginx-extras&lt;/h2&gt;
&lt;p&gt;First of all, Nginx's traditional &lt;code&gt;add_header&lt;/code&gt; directive doesn't work with &lt;code&gt;4xx&lt;/code&gt; responses. As we still want to add custom headers to them, we need to install the &lt;a href="http://wiki.nginx.org/HttpHeadersMoreModule"&gt;ngx_headers_more module&lt;/a&gt; to be able to use the &lt;code&gt;more_set_headers&lt;/code&gt; directive, which also works with &lt;code&gt;4xx&lt;/code&gt; responses.&lt;/p&gt;
&lt;p&gt;While the documentation suggests to build the Nginx source with the module, if you are on a Debian distro you can actually easily install it with the &lt;a href="https://packages.debian.org/sid/nginx-extras"&gt;nginx-extras package&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx-extras
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-server-configuration"&gt;The server configuration&lt;/h2&gt;
&lt;p&gt;Here is what a typical server config of a Laravel project looks like, &lt;em&gt;without&lt;/em&gt; the CORS bit (I am voluntarily omitting the SSL part to keep the post short, but it works exactly the same):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name example-site.com;
    root "/home/vagrant/projects/example-site/public";

    index index.html index.htm index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/example-site.com-error.log error;

    sendfile off;

    client_max_body_size 100m;

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;em&gt;with&lt;/em&gt; the CORS handling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name example-site.com;
    root "/home/vagrant/projects/example-site/public";

    index index.html index.htm index.php;

    charset utf-8;

    more_set_headers 'Access-Control-Allow-Origin: $http_origin';
    more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE, HEAD';
    more_set_headers 'Access-Control-Allow-Credentials: true';
    more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept,Authorization';

    location / {
        if ($request_method = 'OPTIONS') {
            more_set_headers 'Access-Control-Allow-Origin: $http_origin';
            more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE, HEAD';
            more_set_headers 'Access-Control-Max-Age: 1728000';
            more_set_headers 'Access-Control-Allow-Credentials: true';
            more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept,Authorization';
            more_set_headers 'Content-Type: text/plain; charset=UTF-8';
            more_set_headers 'Content-Length: 0';
            return 204;
        }
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/example-site.com-error.log error;

    sendfile off;

    client_max_body_size 100m;

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.ht {
        deny all;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that is pretty much it.&lt;/p&gt;
&lt;p&gt;All you need to do now is to reload your Nginx confs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service nginx reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="extra-considerations"&gt;Extra considerations&lt;/h2&gt;
&lt;p&gt;Note that this allows &lt;em&gt;any&lt;/em&gt; domain to access your app, and while this is most likely enough for local development, on a production server you might want to fine-tune this configuration to allow specific domains only (&lt;code&gt;Access_Control_Allow_Origin&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;More generally, all the headers' values are examples and you can modify them as you see fit.&lt;/p&gt;
&lt;p&gt;You could also put the global and options-related snippets into separate files (in &lt;code&gt;/etc/nginx/shared/&lt;/code&gt;, for example) and import them with the Nginx's &lt;code&gt;include&lt;/code&gt; directive.&lt;/p&gt;</summary><category term="cors"></category><category term="crossoriginresourcesharing"></category><category term="nginx"></category><category term="homestead"></category></entry><entry><title>Database management with Adminer (and how to install on Homestead)</title><link href="https://tech.osteel.me/posts/database-management-with-adminer-and-how-to-install-on-homestead" rel="alternate"></link><published>2015-06-19T00:00:00+01:00</published><updated>2015-06-19T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-06-19:posts/database-management-with-adminer-and-how-to-install-on-homestead</id><summary type="html">&lt;p&gt;For quite some time now I have been prefering accessing databases from the CLI, but sometimes it can feel overkill when wanting to quickly check or update something, say.&lt;/p&gt;
&lt;p&gt;In this kind of case I usually look to PHPMyAdmin, but as I was looking for an equivalent for PostgreSQL I stumbled upon &lt;a href="http://www.adminer.org/"&gt;Adminer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is basically a single file PHP script allowing to connect to and manage different DBMSs (namely MySQL, PostgreSQL, SQLite, MS SQL, Oracle, Firebird, SimpleDB, Elasticsearch and MongoDB) super easily.&lt;/p&gt;
&lt;p&gt;Here are a few simple steps to use it on Homestead, but the process wouldn't differ much whatever your development environment is.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="http://www.adminer.org/#download"&gt;download &lt;code&gt;adminer.php&lt;/code&gt;&lt;/a&gt;, rename it &lt;code&gt;index.php&lt;/code&gt; and move it to an &lt;code&gt;adminer&lt;/code&gt; folder under your usual Homestead projects directory.&lt;/p&gt;
&lt;p&gt;Add a new site to your &lt;code&gt;Homestead.yaml&lt;/code&gt; file (adapt the path to your own config if necessary):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sites:
    - map: adminer.local
    to: /home/vagrant/projects/adminer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Re-provision your box:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/Homestead
$ vagrant provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit your local &lt;code&gt;hosts&lt;/code&gt; file to match the Homestead box IP address to the domain (on a Mac that's &lt;code&gt;/etc/hosts&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.10.10   adminer.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now be able to access &lt;a href="http://adminer.local"&gt;http://adminer.local&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adminer" src="/images/2015/06/19/adminer.png" title="Adminer" /&gt;&lt;/p&gt;
&lt;p&gt;To access the MySQL databases, simply select &lt;em&gt;"MySQL"&lt;/em&gt; in the &lt;em&gt;"System"&lt;/em&gt; dropdown, type &lt;em&gt;"localhost"&lt;/em&gt; in &lt;em&gt;"Server"&lt;/em&gt; (there is a placeholder that looks like the value is entered by default but you actually need to type it in), and the default &lt;em&gt;"homestead"&lt;/em&gt; and &lt;em&gt;"secret"&lt;/em&gt; as &lt;em&gt;"Username"&lt;/em&gt; and &lt;em&gt;"Password"&lt;/em&gt; respectively (you can also tick the &lt;em&gt;"Permanent login"&lt;/em&gt; box so the details are added as a link on the left column for quick access).&lt;/p&gt;
&lt;p&gt;The default PostgreSQL user doesn't have a password so you need to set one first.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh&lt;/code&gt; your Homestead box and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo -u postgres psql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should be connected to PostgreSQL (notice &lt;code&gt;postgres=#&lt;/code&gt; at the beginning of the prompt). Now type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ postgres=# alter user postgres password 'secret';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You've just set up a password for the default user (&lt;em&gt;"secret"&lt;/em&gt;, just like for MySQL). Quit this interface typing &lt;code&gt;\q&lt;/code&gt; and try to access the PostgreSQL databases from Adminer (select &lt;em&gt;"PostgreSQL"&lt;/em&gt; in the &lt;em&gt;"System"&lt;/em&gt; dropdown, type &lt;em&gt;"localhost"&lt;/em&gt; in &lt;em&gt;"Server"&lt;/em&gt;, and &lt;em&gt;"postgres"&lt;/em&gt; and &lt;em&gt;"secret"&lt;/em&gt; as &lt;em&gt;"Username"&lt;/em&gt; and &lt;em&gt;"Password"&lt;/em&gt; respectively).&lt;/p&gt;
&lt;p&gt;I personnally don't like the default theme, and there are a few other designs available &lt;a href="http://www.adminer.org/#extras"&gt;from the website&lt;/a&gt;. Download whichever you fancy (I went for &lt;em&gt;"pappu687"&lt;/em&gt;) and place the &lt;code&gt;adminer.css&lt;/code&gt; file at the same level as the &lt;code&gt;index.php&lt;/code&gt; file you moved earlier.&lt;/p&gt;
&lt;p&gt;Refresh &lt;a href="http://adminer.local"&gt;http://adminer.local&lt;/a&gt;. You're done!&lt;/p&gt;</summary><category term="adminer"></category><category term="phpmyadmin"></category><category term="database"></category><category term="homestead"></category><category term="laravel"></category></entry><entry><title>Laravel Homestead: debug an API with Xdebug and cURL in Sublime Text</title><link href="https://tech.osteel.me/posts/laravel-homestead-debug-an-api-with-xdebug-and-curl-in-sublime-text" rel="alternate"></link><published>2015-05-23T00:00:00+01:00</published><updated>2015-05-23T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-05-23:posts/laravel-homestead-debug-an-api-with-xdebug-and-curl-in-sublime-text</id><summary type="html">&lt;h2 id="foreword"&gt;Foreword&lt;/h2&gt;
&lt;p&gt;There are a few tutorials out there about how to set up Sublime Text and Xdebug so they play nice together. The good news is that in our case, Homestead has covered the configuration of Xdebug for us: the tool is already available and reporting for duty.&lt;/p&gt;
&lt;p&gt;You will find its settings in &lt;code&gt;/etc/php5/fpm/conf.d/20-xdebug.ini&lt;/code&gt;, which should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zend_extension=xdebug.so
xdebug.remote_enable = 1
xdebug.remote_connect_back = 1
xdebug.remote_port = 9000
xdebug.max_nesting_level = 250
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I won't go into more detail about this, but you can have a look at &lt;a href="http://www.sitepoint.com/debugging-xdebug-sublime-text-3/" title="Debugging with Xdebug and Sublime Text 3"&gt;this post by sitepoint&lt;/a&gt; for a more complete explanation.&lt;/p&gt;
&lt;p&gt;Might be worth mentioning that my host machine runs Mac OS, and the steps below might slightly differ if you are on a different OS.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This is assuming &lt;a href="http://laravel.com/docs/master/homestead" title="Laravel Homestead - Documentation"&gt;Homestead is installed&lt;/a&gt; on your machine and that you've got a basic knowledge of it. If you are confused by the documentation, &lt;a href="https://laracasts.com/series/laravel-5-fundamentals/episodes/2"&gt;this free Laracast&lt;/a&gt; might help. I also wrote a &lt;a href="/posts/2015/04/23/how-to-start-a-new-laravel5-project-with-homestead-quick-reference.html" title="How to start a new Laravel 5 project with Homestead - quick reference"&gt;short guide on how to set up a basic PHP/MySQL project on Homestead&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We will use a small Laravel project (v5.0.31) for testing purpose, which you can clone from &lt;a href="https://github.com/osteel/xdebug-api-blog-tutorial"&gt;this repository&lt;/a&gt;, inside a directory of your choice (you probably already have one containing your Laravel projects):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:osteel/xdebug-api-blog-tutorial.git xdebug-api
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the site in your &lt;code&gt;~/.homestead/Homestead.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sites:
    - map: xdebug-api.local
      to: /home/vagrant/path/to/xdebug-api/public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;/path/to/&lt;/code&gt; should be replaced with the path to the project on your Homestead box.&lt;/p&gt;
&lt;p&gt;Match the Homestead IP address with "xdebug-api.local" in your local &lt;code&gt;hosts&lt;/code&gt; file (&lt;code&gt;/etc/hosts&lt;/code&gt; on a Mac) (of course, adapt the IP address if you changed the default one):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.10.10 xdebug-api.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now re-provision your Homestead box. Go to &lt;code&gt;~/Homestead/&lt;/code&gt; and run &lt;code&gt;vagrant provision&lt;/code&gt; if the box is already running, or &lt;code&gt;vagrant up --provision&lt;/code&gt; if it needs to be started.&lt;/p&gt;
&lt;p&gt;You should now be able to access &lt;a href="http://xdebug-api.local"&gt;http://xdebug-api.local&lt;/a&gt;, which should display the Laravel welcome page.&lt;/p&gt;
&lt;h2 id="sublime-text"&gt;Sublime Text&lt;/h2&gt;
&lt;p&gt;We first need to get the &lt;a href="https://packagecontrol.io/packages/Xdebug%20Client"&gt;Xdebug Client package&lt;/a&gt; for Sublime.&lt;/p&gt;
&lt;p&gt;If you've never installed any package before, the easiest way is to &lt;a href="https://packagecontrol.io/installation"&gt;install package control&lt;/a&gt; first. Follow the steps, then hit &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt; in Sublime (or &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt; on Windows) and type "install" until the "Package Control: Package Install" entry appears:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Package Control" src="/images/2015/05/23/package-control.png" title="Package Control" /&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;code&gt;enter&lt;/code&gt; and wait for the packages input to display. Type "xdebug" and hit &lt;code&gt;enter&lt;/code&gt; after having selected the Xdebug Client one to install it.&lt;/p&gt;
&lt;p&gt;We now need to set up a Sublime Text project.&lt;/p&gt;
&lt;p&gt;Open the project folder in Sublime, then go to the "Project" menu, "Save Project As...". Name it "xdebug-api.sublime-project" and save it at the root. Open it and replace its content with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    "folders":
    [
        {
            "follow_symlinks": true,
            "path": "."
        }
    ],
    "settings": {
        "xdebug": {
             "url": "http://xdebug-api.local/",
             "path_mapping": {
                "/home/vagrant/path/to/xdebug-api/" : "/path/to/xdebug-api/"
             }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the two occurrences of &lt;code&gt;/path/to/&lt;/code&gt; should be replaced with the path to the project on the Homestead box and the path to the project on your host machine respectively.&lt;/p&gt;
&lt;h2 id="using-xdebug"&gt;Using Xdebug&lt;/h2&gt;
&lt;p&gt;Let's make sure everything is correctly set up.&lt;/p&gt;
&lt;p&gt;The project is extremely simple and offers a couple of endpoints, both in the &lt;code&gt;WelcomeController.php&lt;/code&gt; file and declared in &lt;code&gt;routes.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One will receive GET requests and the other POST ones (corresponding to the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; methods in &lt;code&gt;WelcomeController.php&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Route::get('/', 'WelcomeController@index');
Route::get('/get', 'WelcomeController@get');
Route::post('/post', 'WelcomeController@post');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we installed the package, there is a new "Xdebug" menu available under "Tools":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tools Xdebug" src="/images/2015/05/23/tools-xdebug.png" title="Tools Xdebug" /&gt;&lt;/p&gt;
&lt;p&gt;Add a breakpoint in the &lt;code&gt;index&lt;/code&gt; method of &lt;code&gt;WelcomeController.php&lt;/code&gt; (notice the circle on the left):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breakpoint" src="/images/2015/05/23/breakpoint.png" title="Breakpoint" /&gt;&lt;/p&gt;
&lt;p&gt;Now start the debugging mode ("Tools", "Xdebug", "Start Debugging (Launch Browser)"): your default browser will open &lt;a href="http://xdebug-api.local/?XDEBUG_SESSION_START=sublime.xdebug"&gt;http://xdebug-api.local/?XDEBUG_SESSION_START=sublime.xdebug&lt;/a&gt;. The page should just hang in there, and switching back to Sublime Text you should see something like that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Debugging" src="/images/2015/05/23/debugging.png" title="Debugging" /&gt;&lt;/p&gt;
&lt;p&gt;The script execution stopped at your breakpoint, and Xdebug displays information about the different objects available at this point and their values in the panels at the bottom.&lt;/p&gt;
&lt;p&gt;Now you might think that you could basically test all the GET endpoints of your API this way, and you would not be entirely wrong.&lt;/p&gt;
&lt;p&gt;But how about other methods (POST, PUT, etc.)? And what if you need a specific header, such as a bearer token?&lt;/p&gt;
&lt;p&gt;That's where cURL comes in handy.&lt;/p&gt;
&lt;h2 id="curl"&gt;cURL&lt;/h2&gt;
&lt;p&gt;First let's add another breakpoint, in the &lt;code&gt;get&lt;/code&gt; method this time:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breakpoint 2" src="/images/2015/05/23/breakpoint2.png" title="Breakpoint 2" /&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal on your host machine and run (cURL is available on Mac OS by default, but you might need to install it if you use another platform):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl http://xdebug-api.local/get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get an array of pizzas in JSON format. The breakpoint was ignored, the reason being Xdebug needs a cookie to be read so its session can be started (that's what happens when you append "?XDEBUG_SESSION_START=sublime.xdebug" to the URL: a cookie is created).&lt;/p&gt;
&lt;p&gt;What we are going to do is to "add" this cookie to the cURL call. Now run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -b "XDEBUG_SESSION=sublime.xdebug" http://xdebug-api.local/get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script execution should stop at the breakpoint and Sublime Text should look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Debugging 2" src="/images/2015/05/23/debugging2.png" title="Debugging 2" /&gt;&lt;/p&gt;
&lt;p&gt;What happened here is we told cURL to pass a cookie to the request, created from a string (&lt;code&gt;"XDEBUG_SESSION=sublime.xdebug"&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now let's try a POST request.&lt;/p&gt;
&lt;p&gt;Create a new breakpoint in the &lt;code&gt;post&lt;/code&gt; method:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breakpoint 3" src="/images/2015/05/23/breakpoint3.png" title="Breakpoint 3" /&gt;&lt;/p&gt;
&lt;p&gt;And run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -b "XDEBUG_SESSION=sublime.xdebug" -X POST -H "Content-Type: application/json" -d '{"name":"Pepperoni"}' http://xdebug-api.local/post
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Displaying back Sublime Text; you should get something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Debugging 3" src="/images/2015/05/23/debugging3.png" title="Debugging 3" /&gt;&lt;/p&gt;
&lt;p&gt;To explain the command a little bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-X&lt;/code&gt; allows to specify the method (&lt;code&gt;GET&lt;/code&gt; by default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H&lt;/code&gt; allows to specify headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; allows to pass some data (here, some JSON)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many things you can do with cURL, that should cover pretty much all the cases presented by your API. I encourage you to have a look at its &lt;a href="http://curl.haxx.se/docs/manpage.html" title="cURL - How To Use"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="extra-considerations"&gt;Extra considerations&lt;/h2&gt;
&lt;h3 id="alias"&gt;Alias&lt;/h3&gt;
&lt;p&gt;You will probably agree that having to type &lt;code&gt;-b "XDEBUG_SESSION=sublime.xdebug"&lt;/code&gt; every time is somewhat annoying.&lt;/p&gt;
&lt;p&gt;To speed up the process a little bit, I use an alias command I named &lt;code&gt;curlx&lt;/code&gt;. To add it on a Mac for example, edit &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias curlx='curl -b "XDEBUG_SESSION=sublime.xdebug"'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then &lt;code&gt;source&lt;/code&gt; the file so the new alias is taken into account:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curlx http://xdebug-api.local/get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the breakpoint previously set in the &lt;code&gt;get&lt;/code&gt; method is still active, your script should stop there.&lt;/p&gt;
&lt;h3 id="curl-command-handy"&gt;cURL command handy&lt;/h3&gt;
&lt;p&gt;You may also have noticed that I put a cURL command in the description of each method in &lt;code&gt;WelcomeController.php&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cURL command" src="/images/2015/05/23/curl-command.png" title="cURL command" /&gt;&lt;/p&gt;
&lt;p&gt;I do so so I can test them quickly, with a terminal open on the side.&lt;/p&gt;
&lt;h3 id="how-to-use-xdebug"&gt;How to use Xdebug&lt;/h3&gt;
&lt;p&gt;Finally, this tutorial doesn't actually explain &lt;em&gt;how&lt;/em&gt; you might use Xdebug. For concrete examples, you can watch a couple of Laracast videos (free upon opening an account):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/19" title="Xdebug"&gt;Xdebug&lt;/a&gt; (from 5'20'')&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/20" title="Xdebug and Laravel"&gt;Xdebug and Laravel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These videos were shot using PHPStorm, but the described processes apply all the same.&lt;/p&gt;</summary><category term="laravel"></category><category term="homestead"></category><category term="xdebug"></category><category term="curl"></category><category term="sublimetext"></category><category term="api"></category></entry><entry><title>Extending Homestead: how to customize Laravel's Virtual Machine (the example of Apache)</title><link href="https://tech.osteel.me/posts/extending-homestead-how-to-customize-laravels-virtual-machine-the-example-of-apache" rel="alternate"></link><published>2015-05-20T00:00:00+01:00</published><updated>2015-05-20T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-05-13:posts/extending-homestead-how-to-customize-laravels-virtual-machine-the-example-of-apache</id><summary type="html">&lt;p&gt;Homestead offers a nice pre-packaged environment. But as a project grows in complexity, there will be a time where extra packages will be necessary. How to install them properly, and not to lose everything any time we need to recreate the box? How does one &lt;em&gt;extend&lt;/em&gt; Homestead?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Laravel Welcome Screen" src="/images/2015/05/13/laravel-welcome.png" title="Laravel Welcome Screen" /&gt;&lt;/p&gt;
&lt;h2 id="foreword"&gt;Foreword&lt;/h2&gt;
&lt;p&gt;Impatient kids can skip to &lt;a href="#prerequisites"&gt;the next section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The more I use Laravel, the more I enjoy it.&lt;/p&gt;
&lt;p&gt;I am also quite a fan of &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's actually one of the things that got me interested in the framework in the first place: that they were offering a pre-packaged Vagrant box (namely Homestead). The fact they are using such a cool tool can only be a good sign, right?&lt;/p&gt;
&lt;p&gt;But then I realized they were implicitely advocating using the same box for all sorts of PHP projects.&lt;/p&gt;
&lt;p&gt;I understand that most of them wouldn't even use all of the &lt;a href="http://laravel.com/docs/master/homestead#included-software"&gt;included features&lt;/a&gt;, but it nonetheless feels like it goes against the principle of Vagrant, that is isolating project environments and more specifically mimicking the production server as closely as possible. It's like leaving the window open for the &lt;em&gt;"it works on my machine"&lt;/em&gt; syndrom when the door has been carefully locked.&lt;/p&gt;
&lt;p&gt;It also poses another problem: if the included software is pretty good as it is, chances are developers will need extra packages at some point. There will be those who don't really know how to install them, as everything was set up for them from the start, and those who are comfortable enough to do it from the CLI, but then what if they need to recreate the Vagrant box for some reason? All the extra stuff is gone.&lt;/p&gt;
&lt;p&gt;I stumbled upon &lt;a href="http://dev.imagineeasy.com/post/86116559974/why-laravel-homestead-makes-me-nervous" title="Why Laravel Homestead Makes Me Nervous"&gt;Yitzchak Schaffer's post&lt;/a&gt; on the subject, where I got introduced to the &lt;em&gt;"Laragarden"&lt;/em&gt; term, which defines the feeling quite well. He explains his concerns in a more detailed way than I do, and if you are interested in the subject I invite you to read his post.&lt;/p&gt;
&lt;p&gt;Now those familiar with Vagrant will probably have thought of provisioning by now, and that was my thinking too. I started to look for a clean way to &lt;em&gt;customize&lt;/em&gt; Homestead, which led me to &lt;a href="http://thereluctantdeveloper.com/2014/06/extending-laravel-homestead" title="\&amp;quot;Extending\&amp;quot; Laravel's Homestead"&gt;this post&lt;/a&gt;, in which the author advocates creating a bash script to run any time the Homestead box is (re)created.&lt;/p&gt;
&lt;p&gt;This looked clean enough to me, except that I couldn't be bothered executing the script manually every time, hence my decision to edit Homestead's &lt;code&gt;VagrantFile&lt;/code&gt; instead. That's when I realised the guys behind Laravel had that covered already.&lt;/p&gt;
&lt;p&gt;More on that in a bit.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This is assuming you already have &lt;a href="http://laravel.com/docs/master/homestead" title="Laravel Homestead - Documentation"&gt;homestead running on your machine&lt;/a&gt;. If you are confused by the documentation, &lt;a href="https://laracasts.com/series/laravel-5-fundamentals/episodes/2"&gt;this free Laracast&lt;/a&gt; might help.&lt;/p&gt;
&lt;p&gt;Might be worth mentioning that my host machine runs Mac OS, and the steps below might slightly differ if you are on a different OS.&lt;/p&gt;
&lt;h2 id="custom-provisioning"&gt;Custom provisioning&lt;/h2&gt;
&lt;p&gt;Looking at the &lt;code&gt;VagrantFile&lt;/code&gt;, I noticed a few interesting lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;afterScriptPath = File.expand_path("~/.homestead/after.sh")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and, later on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if File.exists? afterScriptPath then
    config.vm.provision "shell", path: afterScriptPath
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the content of &lt;code&gt;~/.homestead/after.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# If you would like to do some extra provisioning you may
# add any commands you wish to this file and they will
# be run after the Homestead machine is provisioned.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gotta love Laravel...&lt;/p&gt;
&lt;p&gt;What it means is that after all the base Homestead set up is done, the script will look for a file named &lt;code&gt;after.sh&lt;/code&gt; in the &lt;code&gt;.homestead/&lt;/code&gt; folder under your user's directory, and run its content if it exists.&lt;/p&gt;
&lt;p&gt;This file is created along with the &lt;code&gt;Homestead.yaml&lt;/code&gt; file when you first run &lt;code&gt;bash init.sh&lt;/code&gt; after cloning the Homestead repository. As &lt;code&gt;~/.homestead/&lt;/code&gt; is an independent folder, and if you work with other developers on the same project(s), it might be a good idea to version it for consistency across the team.&lt;/p&gt;
&lt;p&gt;From there, all that is left to do is actually to put the necessary install scripts in &lt;code&gt;after.sh&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Handy!&lt;/p&gt;
&lt;h3 id="the-example-of-apache"&gt;The example of Apache&lt;/h3&gt;
&lt;p&gt;Let's take a simple example here. Homestead comes with Nginx preinstalled (nothing bad about that, quite the opposite actually), but you might have some projects that need to be run on Apache. If both servers cannot run at the same time, there is no harm in having them both installed and starting one or the other according to the current need.&lt;/p&gt;
&lt;p&gt;From your &lt;em&gt;host&lt;/em&gt; machine, open a terminal window and edit the &lt;code&gt;after.sh&lt;/code&gt; mentioned above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.homestead/after.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add these lines at the end of it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install -y apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this will do is it will update the package lists to make sure we'll grab the latest version of the Apache one, and then install it (&lt;code&gt;-y&lt;/code&gt; is there to answer &lt;em&gt;"yes"&lt;/em&gt; by default where the user is normally prompted).&lt;/p&gt;
&lt;p&gt;Save the file and go to &lt;code&gt;~/Homestead/&lt;/code&gt;, then run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will force Homestead to re-run the provision scripts, and install the Apache server using the script you've just added.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ssh&lt;/em&gt; your Homestead box and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service apache status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went alright, you should get something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* apache2 is not running
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is expected, as it means that &lt;em&gt;1.&lt;/em&gt; Apache has been correctly installed and &lt;em&gt;2.&lt;/em&gt; Nginx is already running and we can't have both running at the same time. What we need to do now is to stop Nginx first and then start Apache:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service nginx stop
sudo service apache2 start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accessing your Homestead machine from the browser should now display the default Apache screen (chances are the address is &lt;a href="http://192.168.10.10"&gt;http://192.168.10.10&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apache Welcome Screen" src="/images/2015/05/13/apache-welcome.png" title="Apache Welcome Screen" /&gt;&lt;/p&gt;
&lt;p&gt;That being said and done, you should be aware that Homestead will &lt;em&gt;not&lt;/em&gt; create the Apache Virtual Hosts for you (as it does for the Nginx server confs). You will have to add them yourself in &lt;code&gt;/etc/apache2/&lt;/code&gt;.&lt;br /&gt;
This also means that if you recreate the Homestead box, these Virtual Hosts will be gone (it is not that difficult to use provisioning to automate this, but this is beyond the scope of this article - more on that in the conclusion).&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here is how to &lt;em&gt;extend&lt;/em&gt; your Homestead box in a clean and simple way (all it takes is to update an existing file, after all).&lt;/p&gt;
&lt;p&gt;Of course it implies using bash scripts and that might be a bit frustrating for &lt;a href="https://www.chef.io/"&gt;Chef&lt;/a&gt; or &lt;a href="https://puppetlabs.com/"&gt;Puppet&lt;/a&gt; users (even though I don't think there would be any harm in updating the &lt;code&gt;Vagrantfile&lt;/code&gt; directly), but I'd say it is a good start already, and it kinda shows that Laravel's intent is not necessarily to lock you up in their &lt;em&gt;Laragarden&lt;/em&gt; (even though you won't find any mention of &lt;code&gt;after.sh&lt;/code&gt; in the official documentation, at the time of writing).&lt;/p&gt;
&lt;p&gt;To my opinion, Homestead is definitely a good kick-start and a nice first exposure to Vagrant to some users, but as a project grows in complexity, using a dedicated Vagrant box might be a good idea.&lt;/p&gt;
&lt;p&gt;By the way, if you want to learn more about Vagrant, I wrote an &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html"&gt;article explaining how to set up a Vagrant box for local development step by step&lt;/a&gt;. It will also show you how to import a Nginx server config, which can be adapted to Apache Virtual Hosts. Just sayin' ;)&lt;/p&gt;</summary><category term="laravel"></category><category term="homestead"></category><category term="apache"></category><category term="vagrant"></category></entry><entry><title>How to start a new Laravel 5 project with Homestead - quick reference</title><link href="https://tech.osteel.me/posts/how-to-start-a-new-laravel5-project-with-homestead-quick-reference" rel="alternate"></link><published>2015-05-11T00:00:00+01:00</published><updated>2015-05-11T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-04-23:posts/how-to-start-a-new-laravel5-project-with-homestead-quick-reference</id><summary type="html">&lt;p&gt;I wrote this short get-started guide mainly for my own use, to have a reference handy to quickly set up a new Laravel project with a MySQL database. But as I felt the need to write it, one might find some interest in it as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[UPDATE 11/05/2015]:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the use of Composer to install Homestead &lt;a href="https://twitter.com/laravelphp/status/597797885628022784"&gt;has been deprecated&lt;/a&gt; (at least it disappeared from the doc), this post is not using the &lt;code&gt;homestead&lt;/code&gt; commands anymore.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This is assuming &lt;a href="http://laravel.com/docs/master/homestead" title="Laravel Homestead - Documentation"&gt;homestead is installed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If it is not the case, please follow the instructions first: once completed, you will have a fully provisioned virtual machine run by Vagrant and containing everything necessary to develop with Laravel in the best conditions (if you are having trouble following the different steps, here is a &lt;a href="https://laracasts.com/series/laravel-5-fundamentals/episodes/2" title="Virtual Machines and Homestead"&gt;free Laracast video&lt;/a&gt; that might explain it better).&lt;/p&gt;
&lt;p&gt;If you have no idea what Vagrant is and why you need to install it along with something like VirtualBox, feel free to read &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html"&gt;the article I wrote on the subject&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="a-note-about-ssh"&gt;A note about ssh&lt;/h3&gt;
&lt;p&gt;Laravel's documentation suggests to add an alias to &lt;em&gt;ssh&lt;/em&gt; the Homestead box more quickly. I personnally prefer to use an ssh config to that purpose, as it is intended to.&lt;/p&gt;
&lt;p&gt;Update or create a &lt;code&gt;config&lt;/code&gt; file in the &lt;code&gt;.ssh&lt;/code&gt; folder of your home directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Homestead
Host homestead
HostName 127.0.0.1
Port 2222
User vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now access the Homestead machine from anywhere running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh homestead
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="create-the-project"&gt;Create the project&lt;/h2&gt;
&lt;p&gt;First add a new site to the &lt;code&gt;~/.homestead/Homestead.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.homestead/Homestead.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sites:
    - map: site1.local
      to: /home/vagrant/projects/site1
    - map: new-site.local
      to: /home/vagrant/projects/new-site/public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we want to start a new Laravel project (arbitrarily called "new-site") so we point the root to the &lt;code&gt;public/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;There is also another method, using the &lt;code&gt;serve&lt;/code&gt; script, allowing to add a new project without having to edit &lt;code&gt;Homestead.yaml&lt;/code&gt; nor to provision the box again. My preference goes to the first method because I like keep track of my existing projects in &lt;code&gt;Homestead.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I don't specify the database in this file, because I don't want the databases to be reset every time I provision the Vagrant box. Speaking of which, we now need to run this command, from &lt;code&gt;~/Homestead/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up —-provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if your box isn't running yet.&lt;/p&gt;
&lt;p&gt;This will basically create the right Nginx config on the Vagrant box and restart Nginx in there (and, like I said, reset the databases that are declared in the &lt;code&gt;Homestead.yaml&lt;/code&gt; file, so be careful. Simply remove the databases for which you don't want that to happen under &lt;code&gt;databases&lt;/code&gt; from that file).&lt;/p&gt;
&lt;p&gt;Now, edit the &lt;code&gt;hosts&lt;/code&gt; file of your host machine (&lt;code&gt;sudo vim /etc/hosts&lt;/code&gt; on MacOS) to match the new domain to the box's IP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.10.10    new-site.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, &lt;code&gt;ssh&lt;/code&gt; the box and create your new project using Composer (in my config, all my projects are under the &lt;code&gt;~/projects/&lt;/code&gt; directory of the Vagrant box) (this will probably take a little while):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh homestead
cd projects
composer create-project laravel/laravel new-site
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will copy Laravel and all its dependencies in the &lt;code&gt;new-site&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;If everything went fine, you should now be able to access &lt;a href="http://new-site.local"&gt;http://new-site.local&lt;/a&gt; and see the default Laravel screen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Laravel Welcome Screen" src="/images/2015/04/23/laravel-welcome.png" title="Laravel Welcome Screen" /&gt;&lt;/p&gt;
&lt;h2 id="set-up-the-database"&gt;Set up the database&lt;/h2&gt;
&lt;p&gt;From the Homestead box, connect to MySQL and create the database with the right user (the password for &lt;code&gt;homestead&lt;/code&gt; is "secret"):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -uhomestead -p
create database newsite;
grant usage on *.* to newsite@localhost identified by 'password';
grant all privileges on newsite.* to newsite@localhost;
flush privileges;
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be sure to note the chosen password and edit the &lt;code&gt;.env&lt;/code&gt; file of your project, changing the values for the database details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DB_HOST=localhost
DB_DATABASE=newsite
DB_USERNAME=newsite
DB_PASSWORD=password
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Laravel comes with a couple of database migration scripts, creating the &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;password_resets&lt;/code&gt; tables respectively. A quick way to check that the database is correctly set up is to run these scripts, from the project's root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the migration is successful, you're all set! Reset the database if necessary:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan migrate:reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's it! A few quick steps to get started on a new Laravel project with Homestead.&lt;/p&gt;</summary><category term="laravel"></category><category term="homestead"></category></entry><entry><title>Install and deploy a Pelican blog using Fabric - Part 4: workflow, extras and conclusion</title><link href="https://tech.osteel.me/posts/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion" rel="alternate"></link><published>2015-03-11T00:00:00+00:00</published><updated>2015-03-11T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-03-04:posts/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion</id><summary type="html">&lt;p&gt;Alright! This was a bit of a long road, but we are finally getting there. In the &lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html" title="Install and deploy a Pelican blog using Fabric - Part 3: Fabric"&gt;previous part&lt;/a&gt;, we used Fabric to fully provision a server and pull our content from a Git repository. In this fourth and last part, we are going to review a complete worklow, take a few extra steps to complete our blog and conclude our journey.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/24/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment.html" title="Install and deploy a Pelican blog using Fabric - Part 1: local environment"&gt;Part 1: local environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/26/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration.html" title="Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration"&gt;Part 2: installation and configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html" title="Install and deploy a Pelican blog using Fabric - Part 3: Fabric"&gt;Part 3: Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: workflow, extras and conclusion&lt;ul&gt;
&lt;li&gt;&lt;a href="#complete-workflow"&gt;Complete workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extras"&gt;Extras&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#images-favicon-and-other-static-files"&gt;Images, favicon and other static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#google-analytics"&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sitemap"&gt;Sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feeds"&gt;Feeds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="complete-workflow"&gt;Complete Workflow&lt;/h2&gt;
&lt;p&gt;Let's have a look at what a complete workflow would look like: it will also summarize all that we have done so far.&lt;/p&gt;
&lt;p&gt;Here is mine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new article directly under &lt;em&gt;"content/posts/"&lt;/em&gt;, with &lt;em&gt;"Status: draft"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Edit the content (I personally use &lt;a href="http://25.io/mou/" title="Official website"&gt;Mou&lt;/a&gt;, a Markdown editor for Mac)&lt;/li&gt;
&lt;li&gt;Generate and serve the blog locally: &lt;code&gt;fab reserve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access &lt;em&gt;http://localhost:8000/drafts&lt;/em&gt; and check the look of the article&lt;/li&gt;
&lt;li&gt;Edit and push the article to the Git repository as often as necessary until it is finished&lt;/li&gt;
&lt;li&gt;When ready to publish, create the right year/month/day folders under &lt;em&gt;"content/"&lt;/em&gt;, move the article there and remove &lt;em&gt;"Status: draft"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Git commit and push&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab publish&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the article on the live website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...and Bob's your uncle.&lt;/p&gt;
&lt;h2 id="extras"&gt;Extras&lt;/h2&gt;
&lt;p&gt;If you followed all the steps up to now, you already have a fully functional blog. But there are a few extra things you will probably want to add in. Some of them are coming from the &lt;a href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks" title="Tips and Tricks"&gt;tips and tricks&lt;/a&gt; page.&lt;/p&gt;
&lt;h3 id="images-favicon-and-other-static-files"&gt;Images, favicon and other static files&lt;/h3&gt;
&lt;p&gt;Chances are you will want to add images to some of your articles. They will have to be stored somewhere and copied over at compilation.&lt;/p&gt;
&lt;p&gt;To that end, create a folder named &lt;em&gt;"images"&lt;/em&gt; in &lt;em&gt;"content"&lt;/em&gt;. I personally follow the same structure as for the articles, e.g. I place pictures under &lt;em&gt;"images/2015/02/22/"&lt;/em&gt; for articles published on that day.&lt;/p&gt;
&lt;p&gt;To have this directory copied to &lt;em&gt;"output/"&lt;/em&gt; with the rest of the content, open &lt;em&gt;"pelicanconf.py"&lt;/em&gt; and add this section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;STATIC_PATHS = [
    'images'
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This simply indicates to the generation script that this directory is to be copied as is under &lt;em&gt;"output/"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And this is how you would embed images in your articles (Markdown syntax):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!["Example image"](/images/2015/02/22/example.jpg "Example image")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about a favicon? Create another directory under &lt;em&gt;"content/"&lt;/em&gt;, named &lt;em&gt;"extra"&lt;/em&gt;. Place your favicon in there, and edit the config file again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;STATIC_PATHS = [
    'images',
    'extra'
]

EXTRA_PATH_METADATA = {
    'extra/favicon.ico': {'path': 'favicon.ico'}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;"EXTRA_PATH_METADATA"&lt;/em&gt; allows to specify more precisely the path of specific files. Here, we basically say that we want &lt;em&gt;"favicon.ico"&lt;/em&gt; from the &lt;em&gt;"extra"&lt;/em&gt; directory to be copied at the root of the blog.&lt;/p&gt;
&lt;p&gt;You can add as many files as you wish in there, such as a &lt;em&gt;"robots.txt"&lt;/em&gt;, for example.&lt;/p&gt;
&lt;h3 id="google-analytics"&gt;Google Analytics&lt;/h3&gt;
&lt;p&gt;Pelican supports Google Analytics out of the box. All it takes is to add the following line to the &lt;em&gt;"publishconf.py"&lt;/em&gt; file (&lt;em&gt;"UA-XXXX-Y"&lt;/em&gt; being your own tracking id):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GOOGLE_ANALYTICS = "UA-XXXX-Y"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sitemap"&gt;Sitemap&lt;/h3&gt;
&lt;p&gt;Under &lt;em&gt;"theme/templates/"&lt;/em&gt;, add a &lt;em&gt;"sitemap.html"&lt;/em&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&amp;gt;

{% for article in articles %}
  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;{{ SITEURL }}/{{ article.url }}&amp;lt;/loc&amp;gt;
    &amp;lt;priority&amp;gt;0.8&amp;lt;/priority&amp;gt;
  &amp;lt;/url&amp;gt;

  {% for translation in article.translations %}
  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;{{ SITEURL }}/{{ translation.url }}&amp;lt;/loc&amp;gt;
    &amp;lt;priority&amp;gt;0.8&amp;lt;/priority&amp;gt;
  &amp;lt;/url&amp;gt;
  {% endfor %}
{% endfor %}

{% for page in pages %}
  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;{{ SITEURL }}/{{ page.url }}&amp;lt;/loc&amp;gt;
    &amp;lt;priority&amp;gt;1.0&amp;lt;/priority&amp;gt;
  &amp;lt;/url&amp;gt;

  {% for translation in page.translations %}
  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;{{ SITEURL }}/{{ translation.url }}&amp;lt;/loc&amp;gt;
    &amp;lt;priority&amp;gt;1.0&amp;lt;/priority&amp;gt;
  &amp;lt;/url&amp;gt;
  {% endfor %}
{% endfor %}

&amp;lt;/urlset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit &lt;em&gt;"pelicanconf.py"&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DIRECT_TEMPLATES = (('index', 'tags', 'categories', 'archives', 'sitemap'))
SITEMAP_SAVE_AS = 'sitemap.xml'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="feeds"&gt;Feeds&lt;/h3&gt;
&lt;p&gt;Are also supported by default. This is just a matter of configuration, which is all well explained in the &lt;a href="http://pelican.readthedocs.org/en/latest/settings.html#feed-settings" title="Pelican Documentation - Feeds"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well well well. Obviously this was way more complicated than just opening a Tumblr or a Wordpress. I assume that if you chose to go down that road, it was also for the educational aspects that were coming with it.&lt;/p&gt;
&lt;p&gt;So did I.&lt;/p&gt;
&lt;p&gt;And really, I have learned a lot putting all this together, and I hope you are taking away a little bit of new knowledge as well.&lt;/p&gt;
&lt;p&gt;So now what?&lt;/p&gt;
&lt;p&gt;Well first, tap yourself on the back and take a break, you deserved it.&lt;/p&gt;
&lt;p&gt;Anything unclear? Don't hesitate to refer to the &lt;a href="https://github.com/osteel/pelican-blog-tutorial"&gt;result repository&lt;/a&gt;, it might be helpful. Or just drop a line in the comments, I'll be happy to help. &lt;/p&gt;
&lt;p&gt;Then, here are a few leads if you want to go further.&lt;/p&gt;
&lt;p&gt;The first and obvious one is to host everything on a real server. I personally use a &lt;a href="https://www.digitalocean.com/?refcode=e4dc203be3c9" title="Official website"&gt;DigitalOcean&lt;/a&gt; (referral link) droplet, because it is cheap and easy to setup (the most basic one is more than enough to serve a static HTML blog like Pelican). In any case, once you have got your server, all it should take is to update the corresponding section of the &lt;em&gt;"fabfile.py"&lt;/em&gt; file, as described at the end of the &lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html#provision"&gt;&lt;em&gt;"provision"&lt;/em&gt; section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You could also add a new Fabric function to speed up the process of starting a new article (have a look at the &lt;em&gt;make&lt;/em&gt; version of this on the &lt;a href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks#make-newpost" title="Tips and Tricks"&gt;tips and tricks&lt;/a&gt; page for inspiration, or use it as is if you prefer).&lt;/p&gt;
&lt;p&gt;Finally, if you are using GitHub to host your repository, why not trying to &lt;a href="http://carlos.jenkins.co.cr/2014/09/22/autodeploy-a-github-hosted-pelican-blog/" title="Autodeploy a GitHub-hosted Pelican blog"&gt;use a webhook&lt;/a&gt; to make the publication even easier?&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;p&gt;This tutorial is the result of the combination of many different sources. Apart from the &lt;a href="http://pelican.readthedocs.org/en/latest/index.html" title="Pelican documentation"&gt;official Pelican documentation&lt;/a&gt; and the &lt;a href="http://docs.fabfile.org/en/latest/index.html" title="Fabric documentation"&gt;Fabric one&lt;/a&gt;, here are the articles and people that were helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jamesnewbrain.com/how-to-host-pelican-github-vps-blog.html" title="How to use Pelican, GitHub, and a DigitalOcean VPS to host a cool blog"&gt;How to use Pelican, GitHub, and a DigitalOcean VPS to host a cool blog&lt;/a&gt;: this is the post that truly got me started. I was having a hard time finding a complete resource and I found all I needed to get the ball rolling in this excellent work&lt;/li&gt;
&lt;li&gt;&lt;a href="http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/" title="How I built this website, using Pelican: Part 1 - Setup"&gt;How I built this website, using Pelican: Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html" title="Howto Setup Comments with Disqus in Pelican"&gt;Howto Setup Comments with Disqus in Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finally, thanks to &lt;a href="https://twitter.com/jshmc"&gt;Josh&lt;/a&gt; for having introduced me to Fabric&lt;/li&gt;
&lt;/ul&gt;</summary><category term="vagrant"></category><category term="fabric"></category><category term="tutorial"></category><category term="python"></category><category term="blog"></category><category term="pelican"></category></entry><entry><title>Install and deploy a Pelican blog using Fabric - Part 3: Fabric</title><link href="https://tech.osteel.me/posts/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric" rel="alternate"></link><published>2015-03-04T00:00:00+00:00</published><updated>2015-03-04T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-03-02:posts/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric</id><summary type="html">&lt;p&gt;In &lt;a href="/posts/2015/02/26/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration.html" title="Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration"&gt;part 2&lt;/a&gt;, we covered the installation and configuration of Pelican in our local environment. It is now time to provision our server and publish content using Fabric.&lt;/p&gt;
&lt;p&gt;But first, let's version our blog.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/24/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment.html" title="Install and deploy a Pelican blog using Fabric - Part 1: local environment"&gt;Part 1: local environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/26/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration.html" title="Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration"&gt;Part 2: installation and configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: Fabric&lt;ul&gt;
&lt;li&gt;&lt;a href="#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deployment-with-fabric"&gt;Deployment with Fabric&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fabfilepy"&gt;fabfile.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#provision"&gt;Provision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#publish"&gt;Publish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/04/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion.html" title="Install and deploy a Pelican blog using Fabric - Part 4: workflow, extras and conclusion"&gt;Part 4: workflow, extras and conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt;
&lt;p&gt;The next stop in our journey is versioning. What we want to do is to be able to push our content to some repository so it can be pulled on the server later on (and it is always good to have a backup that we can clone and start working on locally in no time).&lt;/p&gt;
&lt;p&gt;Create a new repo on your favorite host (like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; or &lt;a href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt;) and set up your local one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git remote add origin your-repo-address
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a &lt;em&gt;".gitignore"&lt;/em&gt; file (&lt;em&gt;".vagrant/"&lt;/em&gt; is not required if you don't use Vagrant):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output/*
*.py[cod]
cache/
.vagrant/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We exclude the content of &lt;em&gt;"output/"&lt;/em&gt; as the content will be generated directly on the live server, with its own settings.&lt;/p&gt;
&lt;p&gt;Make your first commit and push your code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -A
git commit -m 'First commit'
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;h2 id="deployment-with-fabric"&gt;Deployment with Fabric&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.fabfile.org/" title="Fabric website"&gt;Fabric&lt;/a&gt; is a command-line tool written in Python allowing to perform remote operations over SSH. It is often used for server provisioning and deployment.&lt;/p&gt;
&lt;p&gt;We installed it earlier with pip (&lt;code&gt;pip install Fabric&lt;/code&gt;) and started using it already to build and serve our blog locally, using the &lt;code&gt;fab build&lt;/code&gt; and &lt;code&gt;fab serve&lt;/code&gt; commands among others. These commands are contained in a file named &lt;em&gt;"fabfile.py"&lt;/em&gt;, at the root of your blog. We are now going to have a look at it and explain it a little bit.&lt;/p&gt;
&lt;h3 id="fabfilepy"&gt;fabfile.py&lt;/h3&gt;
&lt;p&gt;Let's open the file in and editor and dissect it section by section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from fabric.api import *
import fabric.contrib.project as project
import os
import sys
import SimpleHTTPServer
import SocketServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically the imports of all the necessary libraries. &lt;em&gt;SimpleHTTPServer&lt;/em&gt; is the one used by &lt;code&gt;fab serve&lt;/code&gt;, for example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Local path configuration (can be absolute or relative to fabfile)
env.deploy_path = 'output'
DEPLOY_PATH = env.deploy_path

# Remote server configuration
production = 'root@localhost:22'
dest_path = '/var/www'

# Rackspace Cloud Files configuration settings
env.cloudfiles_username = 'my_rackspace_username'
env.cloudfiles_api_key = 'my_rackspace_api_key'
env.cloudfiles_container = 'my_cloudfiles_container'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section is about configuration. We will update the &lt;em&gt;"Remote server configuration"&lt;/em&gt; bit soon. We are not using &lt;em&gt;Rackspace&lt;/em&gt; in this tutorial so we can just ignore this part.&lt;/p&gt;
&lt;p&gt;The following function definitions (e.g. &lt;em&gt;"def clean()"&lt;/em&gt;) are all the commands you can run from the terminal (using &lt;em&gt;"fab command_name"&lt;/em&gt; as you already know). You are already familiar with a few of them (&lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;reserve&lt;/code&gt;) and I encourage you to take a look at the others and try them out (you might find that you are more comfortable with some of them for your workflow). The code for most of these commands is quite self-explanatory.&lt;/p&gt;
&lt;p&gt;Now let's have a look at the last one, &lt;em&gt;"publish"&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@hosts(production)
def publish():
    local('pelican -s publishconf.py')
    project.rsync_project(
        remote_dir=dest_path,
        exclude=".DS_Store",
        local_dir=DEPLOY_PATH.rstrip('/') + '/',
        delete=True,
        extra_opts='-c',
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's happenning here? First, we indicate that we want to &lt;em&gt;ssh&lt;/em&gt; the host whose configuration is contained in the &lt;em&gt;"production"&lt;/em&gt; variable mentioned above. Then, in the body of the function itself, we first generate the HTML &lt;em&gt;locally&lt;/em&gt; using the live config (&lt;em&gt;"publishconf.py"&lt;/em&gt;), and we synchronize the output with the remote server's destination directory defined by the &lt;em&gt;"dest_path"&lt;/em&gt; variable and the &lt;em&gt;"DEPLOY_PATH"&lt;/em&gt; environment variable.&lt;/p&gt;
&lt;p&gt;The synchronization is performed using &lt;a href="http://docs.fabfile.org/en/latest/api/contrib/project.html" title="Documentation"&gt;&lt;code&gt;project.rsync_project&lt;/code&gt;&lt;/a&gt;, which is a wrapper for the &lt;code&gt;rsync&lt;/code&gt; command, allowing to upload newly modified files only.&lt;/p&gt;
&lt;p&gt;Basically, everything is there already for you to update a remote server with new content with a single command executed locally. And honestly that might be just enough for your needs. &lt;/p&gt;
&lt;p&gt;But it implies that the remote server already exists and is properly set up. And we'd rather see the new content being pulled from our Git repository instead.&lt;/p&gt;
&lt;p&gt;Now, you could just stop here for today. I won't be mad, promised.&lt;/p&gt;
&lt;p&gt;But if you are interested in seeing how to update the &lt;em&gt;fabfile&lt;/em&gt; to both provision our server and publish our versionned content, stick with me.&lt;/p&gt;
&lt;h3 id="provision"&gt;Provision&lt;/h3&gt;
&lt;p&gt;Still there? Good.&lt;/p&gt;
&lt;p&gt;In our context, what's behind the word &lt;em&gt;"provisioning"&lt;/em&gt; is the act of installing all the required software, packages, dependencies, etc for a project to work on a server. &lt;/p&gt;
&lt;p&gt;But before that, we are going to create the different error pages.&lt;/p&gt;
&lt;p&gt;By default, when trying to access a page that doesn't exist for example, the default HTTP server's 404 page will be displayed.&lt;/p&gt;
&lt;p&gt;And it's ugly.&lt;/p&gt;
&lt;p&gt;And even if we all agree that the true beauty comes from the inside, we don't want it to be ugly.&lt;/p&gt;
&lt;p&gt;Under &lt;em&gt;"content/pages/"&lt;/em&gt;, create a new folder named &lt;em&gt;"errors/"&lt;/em&gt; and the files &lt;em&gt;"403.md"&lt;/em&gt;, &lt;em&gt;"404.md"&lt;/em&gt; and &lt;em&gt;"50x.md"&lt;/em&gt; in it (adapt the extensions to the format you chose).&lt;/p&gt;
&lt;p&gt;Here is the content of my &lt;em&gt;404&lt;/em&gt; page as an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: Hmm...
Slug: 404
Status: hidden

Nope. Don't know what you're talking about, pal.

[Go home](/ "Back to home").
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not much new here, except for the &lt;em&gt;"hidden"&lt;/em&gt; status, whose effect is to prevent it from being displayed along with the other pages (&lt;em&gt;"about"&lt;/em&gt; etc).&lt;/p&gt;
&lt;p&gt;Follow the same format for the two other pages.&lt;/p&gt;
&lt;p&gt;When you are done, create a new file called &lt;em&gt;"blog.conf"&lt;/em&gt; under the &lt;em&gt;".provision/"&lt;/em&gt; directory, with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80; ## listen for ipv4; this line is default and implied
    listen [::]:80 default ipv6only=on; ## listen for ipv6

    # Make site accessible from http://my-blog.local.com
    server_name my-blog.local.com;
    root /var/www/blog;

    location = / {
        # Instead of handling the index, just
        # rewrite / to /index.html
        rewrite ^ /index.html;
    }

    location / {
        try_files $uri.htm $uri.html $uri =404;
    }

    access_log /var/log/blog/access.log;
    error_log /var/log/blog/error.log;

    # Redirect server error pages
    error_page 500 502 503 504 /pages/50x.html;
    error_page 404 /pages/404.html;
    error_page 403 /pages/403.html;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may have recognized the nginx format: it is indeed the HTTP server I am going to use (feel free to adapt this to your favorite one).&lt;/p&gt;
&lt;p&gt;This is a rather basic config: the website will be accessible at &lt;em&gt;http://my-blog.local.com&lt;/em&gt;, its root will be &lt;em&gt;"/var/www/blog/"&lt;/em&gt; on the remote server, the logs will be written under &lt;em&gt;"/var/log/blog/"&lt;/em&gt;, and the errors will be redirected to the different pages you have just created.&lt;/p&gt;
&lt;p&gt;Now, open back &lt;em&gt;"fabfile.py"&lt;/em&gt; and, before the &lt;em&gt;"publish"&lt;/em&gt; function, add a &lt;em&gt;"provision"&lt;/em&gt; one (it could be after as well, but the provisioning is supposed to come &lt;em&gt;before&lt;/em&gt; the publication, right? But maybe that is just my OCD speaking):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@hosts(production)
def provision():
    if run('nginx -v', warn_only=True).failed:
        sudo('apt-get -y install nginx')
        sudo('rm /etc/nginx/sites-available/default')
        sudo('service nginx start')
    put('./.provision/blog.conf', '/etc/nginx/sites-available/blog.conf', use_sudo=True)
    sudo('rm -f /etc/nginx/sites-enabled/blog.conf')
    sudo('ln -s /etc/nginx/sites-available/blog.conf /etc/nginx/sites-enabled/blog.conf')

    if run('test -d %s/%s' % (log_path, sitename), warn_only=True).failed:
        sudo('mkdir %s/%s' % (log_path, sitename))

    if run('test -d %s' % root_path, warn_only=True).failed:
        sudo('mkdir %s' % root_path)

    if run('git -v', warn_only=True).failed:
        sudo('apt-get install -y git-core')

    if run('pip --version', warn_only=True).failed:
        run('wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py -P /tmp/')
        sudo('python /tmp/get-pip.py')
        run('rm /tmp/get-pip.py')

    if run('fab --version', warn_only=True).failed:
        sudo('pip install Fabric')

    if run('virtualenv --version', warn_only=True).failed:
        sudo('pip install virtualenv')
        sudo('pip install virtualenvwrapper')
        run('echo "export WORKON_HOME=$HOME/.virtualenvs" &amp;gt;&amp;gt; /home/vagrant/.bashrc')
        run('echo "source /usr/local/bin/virtualenvwrapper.sh" &amp;gt;&amp;gt; /home/vagrant/.bashrc')
        with prefix('WORKON_HOME=$HOME/.virtualenvs'):
            with prefix('source /usr/local/bin/virtualenvwrapper.sh'):
                run('mkvirtualenv %s' % sitename)

    sudo('service nginx restart')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a few things here but, if you look closely, you will realize these are basically all the steps you have taken at the beginning of the tutorial.&lt;/p&gt;
&lt;p&gt;The pattern is almost always the same:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test if the package is installed (&lt;code&gt;if run('package --version', warn_only=True).failed:&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;install it if it is not&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;"warn_only=True"&lt;/em&gt; parameter allows Fabric not to exit in case of a command failure: this is exactly what we want, i.e. knowing if the command fails so we can install the missing package.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"with prefix"&lt;/em&gt; allows to execute the subsequent commands in the context of the current one. If your version of Python is prior to 2.6, you will need to add &lt;code&gt;from __future__ import with_statement&lt;/code&gt; at the top of the file.&lt;/p&gt;
&lt;p&gt;We will &lt;em&gt;ssh&lt;/em&gt; the &lt;em&gt;"server"&lt;/em&gt; box as the &lt;em&gt;"vagrant"&lt;/em&gt; user, meaning the &lt;em&gt;"run"&lt;/em&gt; commands will be executed with its permissions, and the &lt;em&gt;"sudo"&lt;/em&gt; ones with the root permissions, just like we did throughout this tutorial.&lt;/p&gt;
&lt;p&gt;Back to the actual script: we first install nginx if necessary (and remove the default config), start it, copy the server config file we created earlier to the right location, and recreate the symlink.&lt;/p&gt;
&lt;p&gt;Then we ensure the destination directories for the logs and the blog's generated HTML exist, that Git is installed, then pip, Fabric, virtualenv and virtualenvwrapper, we create the &lt;em&gt;"blog"&lt;/em&gt; virtual environment and, finally, we restart nginx.&lt;br /&gt;
Again, if you followed this tutorial from the start, this should feel familiar.&lt;/p&gt;
&lt;p&gt;Now as I am using &lt;em&gt;Ubuntu 14.04.1 LTS&lt;/em&gt; boxes, I &lt;em&gt;know&lt;/em&gt; my &lt;em&gt;"remote"&lt;/em&gt; server comes with Python preinstalled. If yours doesn't, well you will have to add the steps to install it :)&lt;/p&gt;
&lt;p&gt;Shall we test this now? Sure thing, but we need to do something first. Remember the configuration section of &lt;em&gt;"fabfile.py"&lt;/em&gt; mentioned earlier? It is time to set up the details of our remote server. This is where the use of Vagrant comes in handy as, if you used the Vagrant config I gave you at the beginning of this post, then the &lt;em&gt;"remote server"&lt;/em&gt; box is already there, reporting for duty.&lt;/p&gt;
&lt;p&gt;Open a new terminal on your host machine, go to the blog's root, and type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update &lt;em&gt;"fabfile.py"&lt;/em&gt;, changing the server configuration for this one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Remote server configuration
production = 'vagrant@192.168.72.3:22'
env.key_filename = '/home/vagrant/.ssh/insecure_private_key'
root_path = '/var/www'
log_path = '/var/log'
dest_path = '~/dev'
sitename = 'blog'
symlink_folder = 'output'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IP address is the one that was specified in the Vagrant config, and the private SSH key is the Vagrant one, copied over from the host machine, via this line of the config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Copy the default Vagrant ssh private key over
local.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "~/.ssh/insecure_private_key"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned earlier, we will &lt;em&gt;ssh&lt;/em&gt; the box as the &lt;em&gt;"vagrant"&lt;/em&gt; user. The rest of the variables are path/folder names used in both the &lt;em&gt;"provision"&lt;/em&gt; and &lt;em&gt;"publish"&lt;/em&gt; functions (next section). &lt;/p&gt;
&lt;p&gt;Now, from the &lt;em&gt;"local"&lt;/em&gt; Vagrant machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything is set up properly, you should see a series of text lines scrolling off the screen: your &lt;em&gt;"server"&lt;/em&gt; box is being provisionned :)&lt;/p&gt;
&lt;p&gt;When it is done, you can &lt;em&gt;ssh&lt;/em&gt; your &lt;em&gt;"server"&lt;/em&gt; VM and play around to observe that everything was properly installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant ssh server
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="publish"&gt;Publish&lt;/h3&gt;
&lt;p&gt;We are now able to provision a server with everything required to run our blog, and all it takes is to update a few lines of configuration in &lt;em&gt;"fabfile.py"&lt;/em&gt; and running one command.&lt;/p&gt;
&lt;p&gt;Pretty cool, eh?&lt;/p&gt;
&lt;p&gt;Anyway, we are yet to update the &lt;em&gt;"publish"&lt;/em&gt; function to automate the publication of new content, pulling it from our Git repository.&lt;/p&gt;
&lt;p&gt;Here is what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@hosts(production)
def publish():
    if run('cat ~/.ssh/id_rsa.pub', warn_only=True).failed:
        run('ssh-keygen -N "" -f ~/.ssh/id_rsa')
        key = run('cat ~/.ssh/id_rsa.pub')
        prompt("Add this key to your Git repository and then hit return:\n\n%s\n\n" % key)

    if run('test -d %s' % dest_path, warn_only=True).failed:
        run('mkdir %s' % dest_path)

    with cd(dest_path):
        if run('test -d %s' % sitename, warn_only=True).failed:
            run('mkdir %s' % sitename)
            with cd(sitename):
                run('git clone %s .' % git_repository)
                if run('test -d %s' % symlink_folder, warn_only=True).failed:
                    run('mkdir %s' % symlink_folder)
                sudo('ln -s %s/%s/%s %s/%s' % (dest_path, sitename, symlink_folder, root_path, sitename))

        with cd(sitename):
            run('git reset --hard HEAD')
            run('git pull origin master')
            with prefix('WORKON_HOME=$HOME/.virtualenvs'):
                with prefix('source /usr/local/bin/virtualenvwrapper.sh'):
                    run('workon %s' % sitename)
                    run('pip install -r requirements.txt')
                    run('fab preview')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we check if there is an existing SSH private key for the &lt;em&gt;"vagrant"&lt;/em&gt; user (or whatever user you set up): we are going to pull the content from a Git repository over SSH, so we need one. If none is found, the script will generate one for us and display it so we can add it to our repo. Once this is done, just hit &lt;em&gt;return&lt;/em&gt; to continue the execution.&lt;/p&gt;
&lt;p&gt;The destination path is then created if necessary: in our case, the repository is cloned and updated in &lt;em&gt;"~/dev/blog"&lt;/em&gt;. From there, a symlink is created between &lt;em&gt;"~/dev/blog/output"&lt;/em&gt; and &lt;em&gt;"/var/www/blog"&lt;/em&gt;, so the generated HTML files alone are in &lt;em&gt;"/var/www/blog"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the Virtual Environment is activated, the pip dependencies installed, and the content generated with the live config.&lt;/p&gt;
&lt;p&gt;Let's test our new function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab publish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the execution is over, you should be able to see your blog at the private IP address &lt;a href="http://192.168.72.3"&gt;192.168.72.3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is one last little step to take to access it from the server name as defined in the nginx config. Open the &lt;em&gt;"hosts"&lt;/em&gt; file of your host machine and add the following line (change the domain for the one you chose, if different):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.72.3    my-blog.local.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now access &lt;a href="http://my-blog.local.com"&gt;http://my-blog.local.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's it! You now know how to provision a server and publish your content using Fabric.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="/posts/2015/03/04/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion.html" title="Install and deploy a Pelican blog using Fabric - Part 4: workflow, extras and conclusion"&gt;next part&lt;/a&gt;, we will review a complete workflow, implement a few extra things and conclude this tutorial with a few openings on what to do to go further.&lt;/p&gt;</summary><category term="vagrant"></category><category term="fabric"></category><category term="tutorial"></category><category term="python"></category><category term="blog"></category><category term="pelican"></category></entry><entry><title>Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration</title><link href="https://tech.osteel.me/posts/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration" rel="alternate"></link><published>2015-03-04T00:00:00+00:00</published><updated>2015-03-04T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-02-26:posts/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration</id><summary type="html">&lt;p&gt;In &lt;a href="/posts/2015/02/24/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment.html" title="Install and deploy a Pelican blog using Fabric - Part 1: local environment"&gt;part 1&lt;/a&gt;, we set up a local environment containing everything Pelican requires to run properly.&lt;/p&gt;
&lt;p&gt;Let's move on to the installation and configuration of Pelican itself.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/24/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment.html" title="Install and deploy a Pelican blog using Fabric - Part 1: local environment"&gt;Part 1: local environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: installation and configuration&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican-installation"&gt;Pelican installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-content"&gt;Writing content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#theme"&gt;Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#urls"&gt;URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html" title="Install and deploy a Pelican blog using Fabric - Part 3: Fabric"&gt;Part 3: Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/04/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion.html" title="Install and deploy a Pelican blog using Fabric - Part 4: workflow, extras and conclusion"&gt;Part 4: workflow, extras and conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pelican-installation"&gt;Pelican installation&lt;/h2&gt;
&lt;p&gt;If you are using The Vagrant config provided in part 1, start the &lt;em&gt;"local"&lt;/em&gt; box and &lt;em&gt;ssh&lt;/em&gt; it if it is not already the case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up local
vagrant ssh local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, activate the Virtual Environment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;workon blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to the directory you want your blog to reside in (if you are using Vagrant, this is &lt;em&gt;"/vagrant"&lt;/em&gt;) and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install pelican
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pelican allows to use either &lt;a href="http://docutils.sourceforge.net/rst.html" title="Official website"&gt;reStructuredText&lt;/a&gt; or &lt;a href="http://daringfireball.net/projects/markdown/" title="Official website"&gt;Markdown&lt;/a&gt; formats for your articles. I personally use Markdown, but the choice is up to you.&lt;br /&gt;
You can also use plain HTML if that's your thing.&lt;/p&gt;
&lt;p&gt;Install your weapon of choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install Markdown
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now is a good time to save our current list of dependencies. Type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip freeze
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will give you the list of the packages that are installed in your VE. It should more or less look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blinker==1.3
docutils==0.12
feedgenerator==1.7
Jinja2==2.7.3
Markdown==2.5.2
MarkupSafe==0.23
pelican==3.5.0
Pygments==2.0.2
python-dateutil==2.4.0
pytz==2014.10
six==1.9.0
Unidecode==0.4.17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pip allows you to save this list into a file, in order to quickly reinstall its content if you need to (on another machine, for example):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you need to do to reinstall this environment somewhere else is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Handy.&lt;/p&gt;
&lt;p&gt;Now let's set up the skeleton for your blog using the built-in wizard:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pelican will now ask you a series of questions. Some of them have a value between square brackets at the end: this is the default value you can select simply hitting &lt;em&gt;return&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I will only list the questions that might be a bit confusing here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only if you already have a domain name that will point to your blog. You will be able to update this later directly in the publish config file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)
Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Answer &lt;em&gt;"Yes"&lt;/em&gt; to both, these are functionalities we are going to use.&lt;/p&gt;
&lt;p&gt;Then say &lt;em&gt;"No"&lt;/em&gt; to all the different means to upload your blog. You might end up wanting to use one of the listed methods, but they are not covered in this article.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Done. Your new project is available at /vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet!&lt;/p&gt;
&lt;p&gt;Now let's have a glance at the default look of the blog. Type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab serve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You've just launched a local webserver, that uses the port 8000 by default. Open your browser and navigate to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;: the default skeleton and template should display (this also works with the Vagrant box because we activated the port forwarding option, cf the Vagrantfile in the &lt;a href="#the-vagrant-way"&gt;Vagrant way section&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Default theme&amp;quot;" src="/images/2015/02/26/pelican-skeleton.png" title="Default theme" /&gt;&lt;/p&gt;
&lt;p&gt;That was easy, wasn't it?&lt;/p&gt;
&lt;p&gt;Interrupt the server and regain control of your terminal typing &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fab build&lt;/code&gt; and &lt;code&gt;fab serve&lt;/code&gt; are Fabric commands. The first one generates the HTML content (more on this in the next section) and the second one creates the server. You can also use the shortcut command &lt;code&gt;fab reserve&lt;/code&gt; that runs both ones in turn.&lt;/p&gt;
&lt;p&gt;Fabric is not the only way to generate content, spawn a HTTP server etc. You can read more about that in the &lt;a href="http://docs.getpelican.com/en/latest/publish.html" title="Pelican documentation - Publish"&gt;online documentation&lt;/a&gt;.&lt;br /&gt;
Here I choose to use Fabric simply because this is also what we are going to use for pubication later on. Better get familiar with it right now.&lt;/p&gt;
&lt;p&gt;I will give more details about it in part 3.&lt;/p&gt;
&lt;h2 id="writing-content"&gt;Writing content&lt;/h2&gt;
&lt;p&gt;How about actually writing something now?&lt;/p&gt;
&lt;p&gt;Create a file in the &lt;em&gt;"content"&lt;/em&gt; folder, something like &lt;em&gt;"my-first-post.md"&lt;/em&gt; (put the appropriate extension if you didn't go for Markdown). Add some content in it, following this format at the beginning:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Author: osteel
Title: My first post!
Date: 2015-02-22
Slug: my-first-post
Category: test

##A subtitle

Some **Markdown** content, with some *formatting*.

A list:

 - Milk
 - Butter
 - Eggs

Etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pelican will analyze the first lines to properly generate the post. Rebuild and serve your blog with &lt;code&gt;fab reserve&lt;/code&gt;, and reload &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;: you should see your post.&lt;/p&gt;
&lt;p&gt;The generated HTML files are put into the &lt;em&gt;"output"&lt;/em&gt; folder. A &lt;em&gt;"test"&lt;/em&gt; category was automatically created and placed in the header (if you had specified none, it would have created a category called &lt;em&gt;"misc"&lt;/em&gt; by default).&lt;/p&gt;
&lt;p&gt;This is basically how to write articles. Pelican also allows to create static pages that are not posts (typically, the &lt;em&gt;"about"&lt;/em&gt; or &lt;em&gt;"contact"&lt;/em&gt; pages). Simply add a &lt;em&gt;"pages"&lt;/em&gt; folder under &lt;em&gt;"content"&lt;/em&gt;, and edit a &lt;em&gt;"about.md"&lt;/em&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: About
Slug: about

Amazing blog.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regenerate the content and refresh the web page: a new &lt;em&gt;"about"&lt;/em&gt; entry has been placed in the header.&lt;/p&gt;
&lt;p&gt;These are the very basics of writing content. You probably wonder how to tweak the template to your taste now. Don't worry, we are getting there.&lt;/p&gt;
&lt;p&gt;But first, let's pick a theme!&lt;/p&gt;
&lt;h2 id="theme"&gt;Theme&lt;/h2&gt;
&lt;p&gt;The default theme is nice, but chances are you will want to change it.&lt;/p&gt;
&lt;p&gt;Pelican comes with a variety of themes to choose among the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;official repository&lt;/a&gt; ones or custom ones made by various people.&lt;/p&gt;
&lt;p&gt;I am not going to invent much here and will mostly follow the instructions available on the repository's page.&lt;/p&gt;
&lt;p&gt;First, clone all the themes in a local directory (if you are using the Vagrant box, you will probably want to install Git now - &lt;code&gt;sudo apt-get install -y git-core&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, open the &lt;em&gt;"pelicanconf.py"&lt;/em&gt; file and add these lines at the end (change &lt;em&gt;"vagrant"&lt;/em&gt; for the correct username if necessary):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Theme
THEME = "/home/vagrant/pelican-themes/mnmlist"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebuild and serve:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fab reserve
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;: you are now looking at the &lt;em&gt;"mnmlist"&lt;/em&gt; theme!&lt;/p&gt;
&lt;p&gt;Test as many themes as you like until you find one that suits you. I personally went for the &lt;a href="https://github.com/duilio/pelican-octopress-theme" title="GitHub repo"&gt;Octopress&lt;/a&gt; one, ported from &lt;a href="http://octopress.org/" title="Official website"&gt;Octopress&lt;/a&gt; by Maurizio Sambati.&lt;/p&gt;
&lt;p&gt;Once you picked one, copy its content in a new &lt;em&gt;"theme"&lt;/em&gt; folder in your blog's directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir theme
cp -rf ~/pelican-themes/mnmlist/* theme/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit &lt;em&gt;"pelicanconf.py"&lt;/em&gt; again and change the value of &lt;em&gt;"THEME"&lt;/em&gt; for the new location:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;THEME = "theme"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebuild and refresh to make sure it worked.&lt;/p&gt;
&lt;p&gt;You can now remove the other themes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf ~/pelican-themes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the themes have their own settings. Just have look at the theme's own README file to know what they are (here is the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/mnmlist"&gt;&lt;em&gt;"mnmlist"&lt;/em&gt;&lt;/a&gt; one, for example).&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;We had a quick preview of the configuration in the previous section, when we changed the theme's path. Pelican actually has two configuration files: &lt;em&gt;"pelicanconf.py"&lt;/em&gt;, with whom we made acquaintance already, and &lt;em&gt;"publishconf.py"&lt;/em&gt;, which contains production-wise settings.&lt;/p&gt;
&lt;p&gt;The latter should contain settings that are relevant to your live environment only; we will see examples later on.&lt;/p&gt;
&lt;p&gt;Your &lt;em&gt;"pelicanconf.py"&lt;/em&gt; file should currently look like something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*- #
from __future__ import unicode_literals

AUTHOR = u'osteel'
SITENAME = u'My Blog'
SITEURL = ''

PATH = 'content'

TIMEZONE = 'Europe/Paris'

DEFAULT_LANG = u'en'

# Feed generation is usually not desired when developing
FEED_ALL_ATOM = None
CATEGORY_FEED_ATOM = None
TRANSLATION_FEED_ATOM = None
AUTHOR_FEED_ATOM = None
AUTHOR_FEED_RSS = None

# Blogroll
LINKS = (('Pelican', 'http://getpelican.com/'),
         ('Python.org', 'http://python.org/'),
         ('Jinja2', 'http://jinja.pocoo.org/'),
         ('You can modify those links in your config file', '#'),)

# Social widget
SOCIAL = (('You can add links in your config file', '#'),
          ('Another social link', '#'),)

DEFAULT_PAGINATION = 10

# Uncomment following line if you want document-relative URLs when developing
#RELATIVE_URLS = True

# Theme
THEME = "theme"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the parameters are pretty straightforward, and I invite you to have a look at the &lt;a href="http://pelican.readthedocs.org/en/latest/settings.html" title="Pelican documentation - Settings"&gt;documentation&lt;/a&gt; that describes them all.&lt;/p&gt;
&lt;p&gt;I am going to focus on specific areas: URLs, plugins and comments.&lt;/p&gt;
&lt;h3 id="urls"&gt;URLs&lt;/h3&gt;
&lt;p&gt;For now, our posts' URLs look like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://sitename.com/article-slug.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to change this to adopt a format like the one I am using for my blog:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://sitename.com/year/month/day/article-slug.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obtaining this result is pretty easy. Open the &lt;em&gt;"pelicanconf.py"&lt;/em&gt; file and add these lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# URLs
ARTICLE_URL = 'posts/{date:%Y}/{date:%m}/{date:%d}/{slug}.html'
ARTICLE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/{date:%d}/{slug}.html'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let's move the post we created earlier in a folder reflecting this structure. Go to the &lt;em&gt;"content"&lt;/em&gt; folder and create subfolders as following (change the date if you want to):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd content
mkdir 2015 2015/02 2015/02/22
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then move the post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv my-first-post.md 2015/02/22
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebuild and refresh: URLs are now a bit more structured.&lt;/p&gt;
&lt;p&gt;Of course, this is just an example, and you are free to adopt any format you want.&lt;/p&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;/h3&gt;
&lt;p&gt;Pelican supports plugins since its version 3.0, allowing to add functionalities without having to touch the core. Plugins are maintained in a &lt;a href="https://github.com/getpelican/pelican-plugins" title="Pelican - Plugins GitHub repository"&gt;separate repository&lt;/a&gt; just like the themes.&lt;/p&gt;
&lt;p&gt;You will find a description of each one of them there, and we are going to manage them the same way we did for the themes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; them all locally, and copy over those you want in a new &lt;em&gt;"plugins"&lt;/em&gt; folder in your blog's directory. If you want to use the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;Liquid Tags&lt;/a&gt; plugin for example, this is how you would do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/getpelican/pelican-plugins ~/pelican-plugins
mkdir plugins
cp -rf ~/pelican-plugins/liquid_tags plugins/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open &lt;em&gt;"pelicanconf.py"&lt;/em&gt; and add these lines at the end:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Plugins
PLUGIN_PATHS = ['plugins']
PLUGINS = ['liquid_tags']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pelican now knows where to find the plugins and which ones to load.&lt;/p&gt;
&lt;p&gt;Rebuild and refresh.&lt;/p&gt;
&lt;p&gt;Copy as many plugins as you like, update the config file accordingly and, when you are done, delete the other ones:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf ~/pelican-plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="comments"&gt;Comments&lt;/h3&gt;
&lt;p&gt;Pelican natively supports &lt;a href="https://disqus.com/" title="Official website"&gt;Disqus&lt;/a&gt;, a third party service that will take care of your commenting system for free, externally (nothing to host).&lt;/p&gt;
&lt;p&gt;Head to the website and create an account. Set it up as you like and note your sitename, which is just the string before &lt;em&gt;".disqus"&lt;/em&gt; in the URL of your account.&lt;br /&gt;
For example, mine is &lt;em&gt;"https://osteel.disqus.com"&lt;/em&gt;, so my sitename is &lt;em&gt;"osteel"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now edit &lt;em&gt;"pelicanconf.py"&lt;/em&gt; and add the following line (with the right sitename, of course):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DISQUS_SITENAME = "osteel"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build, serve and refresh: you should have a nice comment box at the bottom of your article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We added this config parameter to &lt;em&gt;"pelicanconf.py"&lt;/em&gt; so you could see the result straight away, but this actually only relevant in the context of your live environment (Disqus won't recognize your local URL). This is typically one of the settings that should be in the other config file, &lt;em&gt;"publishconf.py"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That's it for today. In &lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html" title="Install and deploy a Pelican blog using Fabric - Part 3: Fabric"&gt;part 3&lt;/a&gt;, we will see how to use Fabric to automate the provisioning of a server and the publication of new content.&lt;/p&gt;</summary><category term="vagrant"></category><category term="fabric"></category><category term="tutorial"></category><category term="python"></category><category term="blog"></category><category term="pelican"></category></entry><entry><title>Install and deploy a Pelican blog using Fabric - Part 1: local environment</title><link href="https://tech.osteel.me/posts/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment" rel="alternate"></link><published>2016-08-03T00:00:00+01:00</published><updated>2016-08-03T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-02-24:posts/install-and-deploy-a-pelican-blog-using-fabric-part-1-local-environment</id><summary type="html">&lt;p&gt;&lt;img alt="&amp;quot;Pelican tutorial&amp;quot;" src="/images/2015/02/24/pelican-main.png" title="Pelican tutorial" /&gt;&lt;/p&gt;
&lt;p&gt;This series of articles will walk you through the different steps to install, setup and deploy your first &lt;a href="http://docs.getpelican.com/en/latest/index.html" title="Pelican documentation"&gt;Pelican&lt;/a&gt; blog (just like this one).&lt;/p&gt;
&lt;p&gt;If its aim is to be accessible to most people, there are a couple of pre-requisites that would definitely facilitate your progression:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being comfortable with your OS's CLI&lt;/li&gt;
&lt;li&gt;Being comfortable with Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A developer background is preferable overall, even though there is no need to be familiar with Python. I knew nothing about this language when I started using Pelican.&lt;/p&gt;
&lt;p&gt;If you are not technical at all however, this is probably not for you.&lt;/p&gt;
&lt;p&gt;Pelican is a static website generator, meaning that it does not require any server logic (typically, a database), making it lightweight and easy to host. The script spits out HTML files which are then served to the client.&lt;/p&gt;
&lt;p&gt;Wanna play straight away? Head to the &lt;a href="https://github.com/osteel/pelican-blog-tutorial" title="Pelican blog tutorial"&gt;GitHub repository&lt;/a&gt; now and follow the instructions.&lt;/p&gt;
&lt;p&gt;If you are stuck at any point during this tutorial, don't hesitate to refer to it as well.&lt;/p&gt;
&lt;p&gt;In this first part, we are just going to set up our local environment to be able to install Pelican later on.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: local environment&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-vagrant-way"&gt;The Vagrant way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-pip-and-virtualenv"&gt;Python, pip and virtualenv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pip"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtualenv"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/02/26/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration.html" title="Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration"&gt;Part 2: installation and configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/02/install-and-deploy-a-pelican-blog-using-fabric-part-3-fabric.html" title="Install and deploy a Pelican blog using Fabric - Part 3: Fabric"&gt;Part 3: Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/posts/2015/03/04/install-and-deploy-a-pelican-blog-using-fabric-part-4-workflow-extras-and-conclusion.html" title="Install and deploy a Pelican blog using Fabric - Part 4: workflow, extras and conclusion"&gt;Part 4: workflow, extras and conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-vagrant-way"&gt;The Vagrant way&lt;/h2&gt;
&lt;p&gt;I am quite a fan of &lt;a href="https://www.vagrantup.com/" title="Official website"&gt;Vagrant&lt;/a&gt;, and I would advise to use an empty Vagrant box to play around safely.
If you are not familiar with Vagrant and wish to learn more about it, take a look at &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is completely optional tho, especially if you are on Mac OS. For Windows users however, this is strongly recommended (there is a &lt;a href="/posts/2015/01/25/how-to-use-vagrant-on-windows.html"&gt;dedicated tutorial here&lt;/a&gt; about how to use Vagrant on Windows), even though the team behind Pelican seems to have ensured the compatibility for this platform.&lt;/p&gt;
&lt;p&gt;Specific steps for Windows are not covered in this series of articles.&lt;/p&gt;
&lt;p&gt;The following tutorial was made using &lt;em&gt;Ubuntu 14.04.1 LTS&lt;/em&gt; boxes, and the part that will cover the deployment with Fabric relies on one of Vagrant's features (&lt;a href="https://docs.vagrantup.com/v2/multi-machine/index.html" title="Vagrant doc - Multi-Machine"&gt;&lt;em&gt;"Multi-Machine"&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you choose not to use Vagrant, you will still learn how to deploy your blog using Fabric, but you won't be able to test it right away.&lt;/p&gt;
&lt;p&gt;If you choose to take the Vagrant way however, use this Vagrantfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Used box
  config.vm.box = "ubuntu/trusty32"

  config.vm.define "local" do |local|
    # Accessing "localhost:8000" will access port 8000 on the guest machine
    local.vm.network :forwarded_port, guest: 8000, host: 8000, auto_correct: true

    # Copy the default Vagrant ssh private key over
    local.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "~/.ssh/insecure_private_key"
  end

  config.vm.define "server" do |server|
    # Private IP
    server.vm.network :private_network, ip: "192.168.72.3"
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don't worry too much if you don't understand everything at first, I will explain a bit more in due time. Just know that this config will allow you to run two different machines: one will be your local one (conveniently named &lt;em&gt;"local"&lt;/em&gt;) and the other one (named &lt;em&gt;"server"&lt;/em&gt;) will be used to simulate a remote server.&lt;/p&gt;
&lt;p&gt;For now, begin your journey with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up local
vagrant ssh local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unless stated otherwise, all the steps covered in this part and the next ones need to happen on the &lt;em&gt;"local"&lt;/em&gt; machine.&lt;/p&gt;
&lt;h2 id="python-pip-and-virtualenv"&gt;Python, pip and virtualenv&lt;/h2&gt;
&lt;h3 id="python"&gt;Python&lt;/h3&gt;
&lt;p&gt;Pelican is written in Python and is installed via &lt;em&gt;pip&lt;/em&gt;, the language's &lt;a href="https://pypi.python.org/pypi" title="The Python Package Index"&gt;recommended tool&lt;/a&gt; to install packages (it is basically what &lt;em&gt;npm&lt;/em&gt; is to JavaScript).
Pelican works with Python 2.7.x, and chances are it is already available on your OS. To make sure of this, open a terminal and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the command fails, please head to the &lt;a href="https://wiki.python.org/moin/BeginnersGuide/Download" title="Beginners Guide"&gt;installation guide&lt;/a&gt; and follow instructions for your platform.&lt;/p&gt;
&lt;p&gt;Pelican &lt;em&gt;should&lt;/em&gt; just work with Python 3.3+ as well, but as our intent is to use Fabric for deployment, we will stick to 2.7.x in this tutorial.&lt;/p&gt;
&lt;h3 id="pip"&gt;pip&lt;/h3&gt;
&lt;p&gt;If the version of Python you have is 2.7.9+, you are in luck because pip is already included. If not, install it this way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://bootstrap.pypa.io/get-pip.py -P /tmp/
sudo python /tmp/get-pip.py
rm /tmp/get-pip.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-P&lt;/code&gt; option allows to prefix the downloaded file with the destination folder (&lt;em&gt;"/tmp/"&lt;/em&gt; in our case).&lt;/p&gt;
&lt;p&gt;Let's take this opportunity of having pip handy to install &lt;a href="http://www.fabfile.org/" title="Official website"&gt;&lt;em&gt;Fabric&lt;/em&gt;&lt;/a&gt; straight away:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pip install Fabric
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to use it soon enough.&lt;/p&gt;
&lt;p&gt;We could now install Pelican right away using pip, but we are going to take an extra step before that.&lt;/p&gt;
&lt;h3 id="virtualenv"&gt;virtualenv&lt;/h3&gt;
&lt;p&gt;If you are a developer, you may have come across situations where different projects need different versions of the same language to run, or different versions of other dependencies. Python is no exception to this, and it came up with a solution to address it: the use of Virtual Environments.&lt;/p&gt;
&lt;p&gt;A Virtual Environment (VE) isolates a set of dependencies for a project. We are going to use &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" title="Documentation"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; along with its buddy &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/index.html" title="Documentation"&gt;&lt;em&gt;virtualenvwrapper&lt;/em&gt;&lt;/a&gt; to that purpose.&lt;/p&gt;
&lt;p&gt;First, we need to install them using pip:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, virtualenv will create a folder named after the environment's directly inside the project's folder, and will do so for each project. virtualenvwrapper adds a set of functionalities on top of virtualenv to make its use easier, and placing all the VEs in the same folder is one of them (much cleaner IMHO and prevents us from having to add the folders in each project's &lt;em&gt;.gitignore&lt;/em&gt; file).&lt;/p&gt;
&lt;p&gt;Let's define where virtualenwrapper should gather all the folders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 'export WORKON_HOME=$HOME/.virtualenvs' &amp;gt;&amp;gt; /home/vagrant/.bashrc
echo 'source /usr/local/bin/virtualenvwrapper.sh' &amp;gt;&amp;gt; /home/vagrant/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that I am using a Vagrant box here, hence &lt;em&gt;"vagrant"&lt;/em&gt; as the username. Change this for the right value if necessary.&lt;/p&gt;
&lt;p&gt;I place these commands at the end of my &lt;em&gt;.bashrc&lt;/em&gt; file so that &lt;em&gt;WORKON_HOME&lt;/em&gt; is correctly initialized any time I start a new shell.&lt;/p&gt;
&lt;p&gt;Let's &lt;code&gt;source&lt;/code&gt; our &lt;em&gt;.bashrc&lt;/em&gt; file so the shell is updated with the new values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is now time to create our first VE. As we are setting up a blog, let's call it &lt;em&gt;"blog"&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvirtualenv blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your prompt should now look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(blog)vagrant@vagrant-ubuntu-trusty-32:/vagrant$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mind the &lt;em&gt;"(blog)"&lt;/em&gt; bit at the beginning: it indicates that you are currently using the &lt;em&gt;blog&lt;/em&gt; VE. &lt;code&gt;mkvirtualenv&lt;/code&gt; not only creates it, but activates it as well.&lt;/p&gt;
&lt;p&gt;This is how you leave it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's check that the VE's folder was added to the right location:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls $WORKON_HOME
ls ~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both commands should give the same list, and the &lt;em&gt;"blog"&lt;/em&gt; folder should be among them (only if you set &lt;em&gt;".virtualenvs"&lt;/em&gt; as the destination folder earlier, of course).&lt;/p&gt;
&lt;p&gt;To activate your VE, use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;workon blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you are, ready to move on to the installation of Pelican itself.&lt;/p&gt;
&lt;p&gt;Note that all the steps above is how you would prepare an environment for a Python project in general.&lt;/p&gt;
&lt;p&gt;Just sayin' :)&lt;/p&gt;
&lt;p&gt;In the &lt;a href="/posts/2015/02/26/install-and-deploy-a-pelican-blog-using-fabric-part-2-installation-and-configuration.html" title="Install and deploy a Pelican blog using Fabric - Part 2: installation and configuration"&gt;next part&lt;/a&gt;, we will see how to install and configure Pelican in our shiny new environment.&lt;/p&gt;</summary><category term="vagrant"></category><category term="fabric"></category><category term="tutorial"></category><category term="python"></category><category term="blog"></category><category term="pelican"></category></entry><entry><title>How to use Vagrant for local web development</title><link href="https://tech.osteel.me/posts/how-to-use-vagrant-for-local-web-development" rel="alternate"></link><published>2015-01-25T00:00:00+00:00</published><updated>2015-01-25T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-01-25:posts/how-to-use-vagrant-for-local-web-development</id><summary type="html">&lt;p&gt;&lt;a href="https://www.vagrantup.com/" title="Vagrant website"&gt;&lt;img alt="&amp;quot;Vagrant logo&amp;quot;" src="/images/2015/01/25/vagrant.png" title="Vagrant logo" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article shows how to quickly get up and running with Vagrant, to create and use local Virtual Machines as development environments, all with a single command. This is indeed written from a web developer's standing point, and I will not spend too much time describing how things work under the hood (not that I am an expert anyway).&lt;/p&gt;
&lt;p&gt;The point of Vagrant is precisely not to have to worry too much about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final result of this tutorial is available as a &lt;a href="https://github.com/OSteEL/vagrant-blog-tutorial" title="vagrant-blog-tutorial repo"&gt;Github repository&lt;/a&gt;.&lt;/strong&gt; In case of trouble, don't hesitate to refer to it.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;Vagrant?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-installation"&gt;Basic installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#picking-a-box"&gt;Picking a box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrantfile"&gt;Vagrantfile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#port-forwarding"&gt;Port-forwarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-ip"&gt;Private IP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#provisioning"&gt;Provisioning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#shell-scripts"&gt;Shell scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#server-config"&gt;Server config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-the-private-ip"&gt;Matching the private IP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitignore"&gt;.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handle-port-collisions"&gt;Handle port collisions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copy-host-git-config"&gt;Copy host git config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gui-console"&gt;GUI console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-the-host-machine-when-using–a-private-network"&gt;Access the host machine when using a private network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-now"&gt;What now?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#provisioning-tools"&gt;Provisioning tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant-share"&gt;Vagrant Share&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="vagrant"&gt;Vagrant?&lt;/h2&gt;
&lt;p&gt;Vagrant greatly simplifies the use of Virtual Machines to spawn development environments in no time (well, it's probably more like no &lt;em&gt;effort&lt;/em&gt; than time).&lt;/p&gt;
&lt;p&gt;To understand what a Virtual Machine (VM) is, think of an emulator: you install it on your computer so you can then run software that &lt;em&gt;believe&lt;/em&gt; they are running in the environment they were designed for. All inside your own machine (which is then called the host).&lt;/p&gt;
&lt;p&gt;That is essentially what a VM is.&lt;/p&gt;
&lt;p&gt;Vagrant is a VM &lt;em&gt;manager&lt;/em&gt;, in the sense that it reduces the management and the configuration of VMs to a handful of commands.&lt;/p&gt;
&lt;p&gt;It relies on a VM &lt;em&gt;provider&lt;/em&gt;, that deals with virtualization itself. As its support is shipped with Vagrant, we will use VirtualBox, but &lt;a href="http://docs.vagrantup.com/v2/providers/" title="Vagrant doc - providers"&gt;others exist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what is actually the point? The main argument is the consistency of the environments among developers working on the same project, and more importantly that these environments reflect the production ones. Ship a Vagrant configuration with each project, and every developer will work on the same environment locally.&lt;br /&gt;
No surprises when pushing the code live, no more &lt;em&gt;"it works on my machine"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The other advantages I see is the fact that one can still use their editor of choice, as Vagrant folders are shared with the host by default. It also permits not to clutter up your computer with tons of different libraries and software that aren't used by every project.&lt;br /&gt;
If something goes wrong, you don't screw your machine: you destroy your VM instance and recreate it instead.&lt;/p&gt;
&lt;p&gt;Easy. And safe.&lt;/p&gt;
&lt;h2 id="basic-installation"&gt;Basic installation&lt;/h2&gt;
&lt;p&gt;First, download VirtualBox at &lt;a href="https://www.virtualbox.org/wiki/Downloads" title="VirtualBox - Downloads"&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt; (&lt;em&gt;"platform packages"&lt;/em&gt;) and install it.&lt;br /&gt;
Then, download Vagrant at &lt;a href="https://www.vagrantup.com/downloads.html" title="Vagrant - Downloads"&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt; (v1.7.2 at the time of writing), install.&lt;/p&gt;
&lt;p&gt;Open up a terminal and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The version should be displayed. If not, log out your session, log back in and try again.&lt;/p&gt;
&lt;h2 id="picking-a-box"&gt;Picking a box&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.vagrantup.com/v2/getting-started/index.html" title="Vagrant doc - get started"&gt;Vagrant's documentation&lt;/a&gt; uses a &lt;em&gt;Ubuntu 12.04 LTS 32-bit&lt;/em&gt; server box. Now let's say you want &lt;em&gt;Ubuntu 14.0 LTS 32-bit&lt;/em&gt;: go to the &lt;a href="https://atlas.hashicorp.com/boxes/search"&gt;catalog of Vagrant boxes&lt;/a&gt; and type &lt;em&gt;"Ubuntu 14.04"&lt;/em&gt; in the search field.&lt;br /&gt;
Spot the Ubuntu one in the list: &lt;em&gt;"ubuntu/trusty32"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now get back to your terminal, browse to the directory you want your project to reside in, and type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant init ubuntu/trusty32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The terminal should display something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information about using Vagrant.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good. Now type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how you start your Virtual Machine. As you picked &lt;em&gt;Ubuntu 14.04&lt;/em&gt;, Vagrant will try to install it: as it won't find a corresponding box on your computer, it will fetch it directly from the catalog (this can take a while according to your connection speed), and boot it once the download is over.&lt;/p&gt;
&lt;p&gt;All you have to do now is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BOOM! You are now in your &lt;em&gt;Ubuntu 14.04&lt;/em&gt; server.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note for Windows users:&lt;/em&gt; the &lt;code&gt;vagrant ssh&lt;/code&gt; command might not work for you if SSH is not in your PATH variable. I invite you to take a look at &lt;a href="/posts/2015/01/25/how-to-use-vagrant-on-windows.html" title="How to use Vagrant on Windows"&gt;this separate article&lt;/a&gt; and come back.&lt;/p&gt;
&lt;p&gt;What exactly happened here? &lt;code&gt;vagrant init&lt;/code&gt; created a &lt;code&gt;Vagrantfile&lt;/code&gt; file in the directory. This file contains the various settings Vagrant needs to spawn a VM. You can have a look at it now, it is basically full of commented examples (don't freak out, it is not as bad as it looks).&lt;/p&gt;
&lt;p&gt;You will find one uncommented line tho:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.box = "ubuntu/trusty32"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah, you got it: as we invoked &lt;code&gt;vagrant init&lt;/code&gt; followed by the box we wanted to use, Vagrant created its config file with the corresponding setting.&lt;/p&gt;
&lt;p&gt;While you are connected to your box, type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Vagrantfile should be listed. This is the same Vagrantfile you have just updated: &lt;code&gt;/vagrant&lt;/code&gt; is the folder that is shared between the host machine and the VM.&lt;/p&gt;
&lt;p&gt;You can simply leave your box typing &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;d&lt;/code&gt;. I won't explain how to shutdown it; just take a couple of minutes to read about the different available options in &lt;a href="https://docs.vagrantup.com/v2/getting-started/teardown.html" title="Vagrant doc - Teardown"&gt;the doc&lt;/a&gt;, they are well explained.&lt;br /&gt;
Just know that even if you destroy your box, files under &lt;code&gt;/vagrant&lt;/code&gt; remain untouched.&lt;/p&gt;
&lt;h2 id="vagrantfile"&gt;Vagrantfile&lt;/h2&gt;
&lt;p&gt;I am not going to go through all the options here, only those I most often use.&lt;/p&gt;
&lt;p&gt;The Vagrantfiles are written in Ruby, but no Ruby background is required (I don't know much about Ruby myself).&lt;/p&gt;
&lt;p&gt;Let's look into accessing your VM from the host. Using your host machine's editor to update files on your VM via shared folders is nice, but at some point you will want to admire your work in a browser, which implies for it to have access to your Vagrant box somehow.&lt;/p&gt;
&lt;p&gt;The easiest way to achieve this is probably using port-forwarding.&lt;/p&gt;
&lt;h3 id="port-forwarding"&gt;Port-forwarding&lt;/h3&gt;
&lt;p&gt;First let's run a quick test. Open a terminal on your host machine and type the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;telnet localhost 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unless the port 8080 is already in use by something else (in which case change 8080 for whatever port you know is available), you should get something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trying 127.0.0.1...
telnet: connect to address 127.0.0.1: Connection refused
Trying ::1...
telnet: connect to address ::1: Connection refused
telnet: Unable to connect to remote host
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit your Vagrantfile and add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.network :forwarded_port, guest: 80, host: 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now reload your VM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;code&gt;vagrant up&lt;/code&gt; if you had shut it down. Once it is booted, try the &lt;code&gt;telnet&lt;/code&gt; command above again in the other terminal window. This is what you should read:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Port 8080 is now being listened to, and connections to it are forwarded to port 80 of the Vagrant box. This comes in handy when you use something like &lt;a href="https://github.com/gruntjs/grunt-contrib-connect#usage-examples" title="Project's Github page"&gt;&lt;code&gt;grunt-contrib-connect&lt;/code&gt;&lt;/a&gt; to quickly spawn a static HTTP server on a specific port. In our case, using port 80 in the Grunt config and accessing &lt;code&gt;http://localhost:8080&lt;/code&gt; from our host machine would display the website contained in the folder set with the &lt;code&gt;base&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;This is nice for quick prototyping for example, as no further server configuration is required. In most cases however, as we want to replicate a production environment as accurately as possible, we will want to use a proper server config.&lt;/p&gt;
&lt;p&gt;To do so, we are going to assign a private IP to our box.&lt;/p&gt;
&lt;h3 id="private-ip"&gt;Private IP&lt;/h3&gt;
&lt;p&gt;First, go back to the terminal and try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ping 192.168.68.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get &lt;code&gt;request timeout&lt;/code&gt; responses. Edit the Vagrantfile again and add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.network :private_network, ip: "192.168.68.8"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload your VM and try again: you should now get responses.&lt;/p&gt;
&lt;p&gt;This is it for the options I mainly use; I rarely need the rest. Be curious and scan through the &lt;a href="https://docs.vagrantup.com/v2/" title="Vagrant doc"&gt;official documentation&lt;/a&gt;, it is well written and I am sure you will find something useful to you.&lt;/p&gt;
&lt;p&gt;On a side note, and to emphasize the usefulness of Vagrantfiles, I think their beauty resides in the fact that all it takes to make the environment available to other developers is to version them with your projects. Whenever you clone a project containing a Vagrantfile to a machine with Vagrant installed on it, you are at a &lt;code&gt;vagrant up&lt;/code&gt; away from having it running locally.&lt;/p&gt;
&lt;p&gt;The rest of the process to get your website displayed using the private IP is covered in the next section.&lt;/p&gt;
&lt;h2 id="provisioning"&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Alright, so you've got your VM running, you can edit files from outside of it, and access it from the host machine using its private IP.&lt;/p&gt;
&lt;p&gt;How to properly display your work in a browser now?&lt;/p&gt;
&lt;p&gt;Let's cut to the chase here: it implies setting a server on your VM and matching its IP to the domain name you chose in the host machine's &lt;code&gt;hosts&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;As our Vagrant box is almost empty at this point, we need to install a HTTP server on it. We will go for Nginx here, but instead of installing it and setting up the server from the VM itself, we are going to use provisioning.&lt;/p&gt;
&lt;h3 id="shell-scripts"&gt;Shell scripts&lt;/h3&gt;
&lt;p&gt;Provisioning is achieved from the Vagrantfile as well and, if different means are available to do so, I will only cover the most basic one for now, i.e. using shell scripts (I will mention the other ways later on).&lt;/p&gt;
&lt;p&gt;Open the Vagrantfile in your editor, and add this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.provision :shell, :path =&amp;gt; ".provision/bootstrap.sh"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically what we tell Vagrant is &lt;em&gt;"Use the shell script that you will find in &lt;code&gt;.provision/bootstrap.sh&lt;/code&gt; to provision the box"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don't reload your box just yet, as we need to create this file first. Add a new folder named &lt;em&gt;".provision"&lt;/em&gt; in your project (same level as the Vagranfile), and create a &lt;code&gt;bootstrap.sh&lt;/code&gt; file in it. Here is the full content of this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

# nginx
sudo apt-get -y install nginx
sudo service nginx start

# set up nginx server
sudo cp /vagrant/.provision/nginx/nginx.conf /etc/nginx/sites-available/site.conf
sudo chmod 644 /etc/nginx/sites-available/site.conf
sudo ln -s /etc/nginx/sites-available/site.conf /etc/nginx/sites-enabled/site.conf
sudo service nginx restart

# clean /var/www
sudo rm -Rf /var/www

# symlink /var/www =&amp;gt; /vagrant
ln -s /vagrant /var/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let's describe it step by step:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are basically telling where to look for the &lt;code&gt;bash&lt;/code&gt; program.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# nginx
sudo apt-get -y install nginx
sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Nginx and start it. The &lt;code&gt;-y&lt;/code&gt; option allows to automatically answer &lt;em&gt;"yes"&lt;/em&gt; where user input is normally required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# set up nginx server
sudo cp /vagrant/.provision/nginx/nginx.conf /etc/nginx/sites-available/site.conf
sudo chmod 644 /etc/nginx/sites-available/site.conf
sudo ln -s /etc/nginx/sites-available/site.conf /etc/nginx/sites-enabled/site.conf
sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We copy the server configuration from &lt;code&gt;.provision/nginx/nginx.conf&lt;/code&gt; (yet to be written at this point, we're getting there) to Nginx's &lt;code&gt;sites-available&lt;/code&gt; folder, ensure the permissions are right, then create the symlink from &lt;code&gt;sites-enabled/site.conf&lt;/code&gt; to &lt;code&gt;sites-available/site.conf&lt;/code&gt;, and restart Nginx to take this new config into account.&lt;/p&gt;
&lt;p&gt;Finally, we create a symbolic link from &lt;code&gt;/var/www&lt;/code&gt; to &lt;code&gt;/vagrant&lt;/code&gt;, after having removed the default files Nginx creates at installation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# clean /var/www
sudo rm -Rf /var/www

# symlink /var/www =&amp;gt; /vagrant
ln -s /vagrant /var/www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/var/www&lt;/code&gt; is often where the code goes on a server (even though &lt;code&gt;/srv/www/&lt;/code&gt; might be more relevant, but that's &lt;a href="http://unix.stackexchange.com/questions/47436/why-is-the-root-directory-on-a-web-server-put-by-default-in-var-www" title="Why is the root directory on a web server put by default in \&amp;quot;/var/www\&amp;quot;?"&gt;another debate&lt;/a&gt;). As mentioned earlier, on a Vagrant VM the shared folder is &lt;code&gt;/vagrant&lt;/code&gt;. Using such a symlink allows to match your production server's settings (or staging or whatevs).&lt;br /&gt;
This is completely optional tho.&lt;/p&gt;
&lt;h3 id="server-config"&gt;Server config&lt;/h3&gt;
&lt;p&gt;Almost there! If you are attentive, you know that we now need the Nginx server config. Under the &lt;code&gt;.provision&lt;/code&gt; folder, create a new folder named &lt;em&gt;"nginx"&lt;/em&gt; and open a new &lt;code&gt;nginx.conf&lt;/code&gt; file in it. Here is its content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
  listen 80;

  server_name vagrant-test.local.com;
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;
  root   /var/www;

  location / {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing too esoteric here, this is a very basic Nginx server config. Just note that our server name will be &lt;em&gt;"vagrant-test.local.com"&lt;/em&gt;. Save your file, and reload the box using this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant reload --provision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Normally, the provisioning is done only at the first boot of the VM. By specifying the &lt;code&gt;--provision&lt;/code&gt; option, we force Vagrant to perform the provisioning again.&lt;/p&gt;
&lt;p&gt;The start up will take slightly longer than previously, and you should see quite a lot more instructions on the screen: the packages listed in the &lt;code&gt;bootstrap.sh&lt;/code&gt; file are being installed.&lt;/p&gt;
&lt;h2 id="matching-the-private-ip"&gt;Matching the private IP&lt;/h2&gt;
&lt;p&gt;We only need two little extra steps now: adding the private IP and the server name to the host machine's &lt;code&gt;hosts&lt;/code&gt; file and creating a simple &lt;code&gt;index.html&lt;/code&gt; file in our box to be displayed in the browser later on. On Mac OS, edit the &lt;code&gt;hosts&lt;/code&gt; file with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On Windows, you will find it under &lt;code&gt;Windows/System32/Drivers/etc/&lt;/code&gt; (you will have to edit it in &lt;code&gt;admin&lt;/code&gt; mode).&lt;/p&gt;
&lt;p&gt;Add the following line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.68.8    vagrant-test.local.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save and quit.&lt;/p&gt;
&lt;p&gt;Now add a little &lt;code&gt;index.html&lt;/code&gt; file at your project's root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Vagrant test&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Oh hi!&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright ladies and gentlemen, drumroll please: open your favorite browser and navigate to &lt;code&gt;http://vagrant-test.local.com&lt;/code&gt;. You should see the HTML page you have just created ＼(^o^)／&lt;/p&gt;
&lt;p&gt;Phew! That was a rocky ride, eh!&lt;/p&gt;
&lt;p&gt;Well, yeah. But think about it this way: save this basic config somewhere (craft it to your needs, adding PHP or whatever floats your boat), and use it anytime you start a new project. You can now get up and running with a simple &lt;code&gt;vagrant up&lt;/code&gt; command and a new line in the &lt;code&gt;hosts&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I don't know about you, but it sounds quite nice to me.&lt;/p&gt;
&lt;h2 id="tips"&gt;Tips&lt;/h2&gt;
&lt;h3 id="gitignore"&gt;.gitignore&lt;/h3&gt;
&lt;p&gt;If you use Git, add ".vagrant/" to your &lt;code&gt;.gitignore&lt;/code&gt; file. Vagrant creates this folder when booting the VM: it contains auto-generated stuff you don't want to version.&lt;/p&gt;
&lt;h3 id="handle-port-collisions"&gt;Handle port collisions&lt;/h3&gt;
&lt;p&gt;When using port-forwarding, it can happen that a Vagrant box uses a port that is not available. It will tell you about it anyway, but if the host machine's port doesn't really matter to you, amend the corresponding line in the Vagrantfile this way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.network :forwarded_port, guest: 8080, host: 80, auto_correct: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;auto_correct&lt;/code&gt; parameter will allow Vagrant to automatically assign another port of the host machine in case of unavailability (and tell you about it, of course).&lt;/p&gt;
&lt;h3 id="copy-host-git-config"&gt;Copy host git config&lt;/h3&gt;
&lt;p&gt;I usually try to avoid having too many terminal windows open at the same time. That's why I like to install Git on my VMs so I don't need another terminal window only to perform the versioning operations. This implies having your Git config inside the Vagrant box, which is actually quite easy to do automatically. In your Vagrantfile, add this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.provision "file", source: "~/.gitconfig", destination: "~/.gitconfig"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the first boot of the VM, your Git config file will be copied over.&lt;/p&gt;
&lt;h3 id="gui-console"&gt;GUI console&lt;/h3&gt;
&lt;p&gt;Occasionaly, you may have some trouble booting your VM. This can notably happen when your box wasn't properly shut down the last time you used it. The boot process might just hang there, and the reason may not be obvious. In that case, add the following lines to your Vagrantfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.provider :virtualbox do |vb|
  vb.gui = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and try to boot again. What this does is it will open VirtualBox's GUI console, which displays what is happening behind the scenes, and thus should help you troubleshoot the issue.&lt;/p&gt;
&lt;h3 id="access-the-host-machine-when-using-a-private-network"&gt;Access the host machine when using a private network&lt;/h3&gt;
&lt;p&gt;Sometimes, you may need to access the host machine from the guest one. How to do so?&lt;/p&gt;
&lt;p&gt;When you set up a private network, &lt;em&gt;192.168.68.8&lt;/em&gt; in our case, the host machine automatically takes &lt;em&gt;192.168.68.1&lt;/em&gt; as its private IP address.&lt;/p&gt;
&lt;h2 id="what-now"&gt;What now?&lt;/h2&gt;
&lt;p&gt;Well, that is quite a lot to digest already. And yet this is just the beginning, there are many more features to explore.&lt;/p&gt;
&lt;p&gt;Just to mention a couple of them tho:&lt;/p&gt;
&lt;h3 id="provisioning-tools"&gt;Provisioning tools&lt;/h3&gt;
&lt;p&gt;In this tutorial, we used simple shell scripts. But it turns out Vagrant (supposedly) plays nicely with more advanced solutions such as &lt;a href="https://www.chef.io/" title="Official website"&gt;Chef&lt;/a&gt; or &lt;a href="http://puppetlabs.com/" title="Official website"&gt;Puppet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Admitedly tho, I tried to use Puppet something like a year ago, and completely failed to get it working with Vagrant. I am yet to give Chef a try.&lt;/p&gt;
&lt;h3 id="vagrant-share"&gt;Vagrant Share&lt;/h3&gt;
&lt;p&gt;Local development is good, but soon you will be confronted with the need to expose your work to the world, whether it is to show some progress to a client or to allow an API to reach your application. This is achievable with nice tools such as &lt;a href="https://ngrok.com/" title="Official website"&gt;ngrok&lt;/a&gt; (hopefully I will soon publish a tutorial about it), but Vagrant unveiled a new service a few months ago, called &lt;a href="https://docs.vagrantup.com/v2/share/index.html" title="Vagrant doc - Vagrant Share"&gt;"Vagrant Share"&lt;/a&gt;, that does just that.&lt;/p&gt;
&lt;p&gt;I am yet to try it out (a tutorial would probably follow), but it definitely looks promising.&lt;/p&gt;</summary><category term="vagrant"></category><category term="tutorial"></category><category term="webdevelopment"></category><category term="environment"></category></entry><entry><title>How to use Vagrant on Windows</title><link href="https://tech.osteel.me/posts/how-to-use-vagrant-on-windows" rel="alternate"></link><published>2015-02-17T00:00:00+00:00</published><updated>2015-02-17T00:00:00+00:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2015-01-25:posts/how-to-use-vagrant-on-windows</id><summary type="html">&lt;p&gt;&lt;a href="https://www.vagrantup.com/" title="Vagrant website"&gt;&lt;img alt="&amp;quot;Vagrant logo&amp;quot;" src="/images/2015/01/25/vagrant.png" title="Vagrant logo" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article shows how to deal with Windows' specificities while trying to work with Vagrant. If you are not familiar at all with the latter, I suggest you go through this &lt;a href="/posts/2015/01/25/how-to-use-vagrant-for-local-web-development.html" title="How to use Vagrant for local web development"&gt;Vagrant tutorial&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the following was tested on Windows 8, but the steps described below shouldn't change too much between the different versions.&lt;/p&gt;
&lt;h2 id="vagrant-ssh"&gt;Vagrant ssh&lt;/h2&gt;
&lt;p&gt;The first issue I came across was that &lt;code&gt;vagrant ssh&lt;/code&gt; doesn't work out of the box. I was greeted with a constructive message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`ssh` executable not found in any directories in the %PATH% variable. Is an SSH client installed? Try installing Cygwin, MinGW or Git, all of witch contain an SSH client. Or use your favorite SSH client with the following authentication information shown below:

Host: 127.0.0.1
Port: 2222
Username: vagrant
Private key: C:/path/to/project/.vagrant/machines/default/virtualbox/private_key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fine. Let's &lt;a href="http://git-scm.com/downloads" title="Git - Downloads"&gt;install Git&lt;/a&gt;, then (considering it is not already the case).&lt;/p&gt;
&lt;h3 id="git-install"&gt;Git install&lt;/h3&gt;
&lt;p&gt;The key is when the &lt;em&gt;"Adjusting your PATH environment"&lt;/em&gt; screen pops up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Adjusting your PATH environment screen&amp;quot;" src="/images/2015/01/25/vagrant-windows1.png" title="Adjusting your PATH environment screen" /&gt;&lt;/p&gt;
&lt;p&gt;You want to select &lt;em&gt;"Use Git and optional Unix tools from the Windows Command Prompt"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now I know the message in red looks quite scary, but honestly, unless you are a hardcore user of the Windows console, there is not much to worry about. Basically it will override some of the commands and add a few others.&lt;br /&gt;
Personally, it never caused me any trouble.&lt;/p&gt;
&lt;p&gt;If you are still a bit worried tho, be reassured: none of this is irreversible. All you would need to do is uninstall Git, or update the PATH variable removing the incriminated part.&lt;/p&gt;
&lt;p&gt;More on that in a minute.&lt;/p&gt;
&lt;p&gt;Try to &lt;code&gt;vagrant ssh&lt;/code&gt; your VM again, this time it should do it (you might need to open a new terminal for the update to take effect, tho).&lt;/p&gt;
&lt;h3 id="what-if-git-is-installed-already"&gt;What if Git is installed already?&lt;/h3&gt;
&lt;p&gt;Well, it was the case for me as well.&lt;/p&gt;
&lt;p&gt;You could always remove it and install it again, but there is another way.&lt;/p&gt;
&lt;p&gt;You will have to do manually what the installation of Git could have done for you, but fortunately it is quite trivial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;Control Panel&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;System and Security&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;em&gt;System&lt;/em&gt;, then on the &lt;em&gt;Change Settings&lt;/em&gt; button&lt;/li&gt;
&lt;li&gt;Display the &lt;em&gt;Advanced&lt;/em&gt; tab and click on &lt;em&gt;Environment Variables...&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Look for the &lt;em&gt;Path&lt;/em&gt; variable in the &lt;em&gt;System variables&lt;/em&gt; list, select it then &lt;em&gt;Edit...&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the string, add the path to Git's bin (something like &lt;em&gt;"C:\Program Files\Git\bin"&lt;/em&gt;) (don't forget to add a semicolon first to separate it from the previous path):&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Edit the PATH variable&amp;quot;" src="/images/2015/01/25/vagrant-windows2.png" title="Edit the PATH variable" /&gt;&lt;/p&gt;
&lt;p&gt;Validate and close the different menus. Try to &lt;code&gt;vagrant ssh&lt;/code&gt; your box again, it should work (again, you might need to open a new terminal first).&lt;/p&gt;
&lt;p&gt;You probably guessed it already, but if you don't want Git's commands to override the Windows ones anymore, all you need to do is to remove that bit.&lt;/p&gt;
&lt;p&gt;You will need to find another way for &lt;code&gt;ssh&lt;/code&gt; to work though!&lt;/p&gt;
&lt;p&gt;Ah, but wait. There &lt;em&gt;is&lt;/em&gt; another way.&lt;/p&gt;
&lt;h2 id="putty"&gt;PuTTY&lt;/h2&gt;
&lt;p&gt;Remember that error message we initially got trying to &lt;code&gt;ssh&lt;/code&gt; the box? Let's have a look at the second part of it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Or use your favorite SSH client with the following authentication information shown below:

Host: 127.0.0.1
Port: 2222
Username: vagrant
Private key: C:/path/to/project/.vagrant/machines/default/virtualbox/private_key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wasn't joking when I said it was constructive, because it really tells you what to do.&lt;/p&gt;
&lt;p&gt;The Windows console works ok but let's be honest, in the long run it is a real pain to use. It does the trick for a quick &lt;code&gt;vagrant ssh&lt;/code&gt; but when the time comes to actually do some work on an Ubuntu server for example, a better shell is desirable.&lt;/p&gt;
&lt;h3 id="enter-putty"&gt;Enter PuTTY&lt;/h3&gt;
&lt;p&gt;PuTTY is a very lightweight tool that allows to do a lot of cool stuff. Some of you are probably familiar with it already, and using it jointly with Vagrant is quite nice.&lt;/p&gt;
&lt;p&gt;We will use it to &lt;code&gt;ssh&lt;/code&gt; our boxes, and rely on the info given by the message above to that purpose.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" title="PuTTY - Downloads"&gt;download it&lt;/a&gt; if that is not the case already (the first &lt;em&gt;putty.exe&lt;/em&gt; link will do).&lt;/p&gt;
&lt;p&gt;Download &lt;em&gt;puttygen.exe&lt;/em&gt; as well, we are going to need it.&lt;/p&gt;
&lt;p&gt;PuTTY and PuTTYGen are stand-alone applications (no need to install them), so just double click on the &lt;em&gt;.exe&lt;/em&gt; files.&lt;/p&gt;
&lt;p&gt;Let's open PuTTYGen first: PuTTY uses its own key format, and we need to convert Vagrant's one first. Click on &lt;em&gt;File&lt;/em&gt; then &lt;em&gt;Load private key&lt;/em&gt;, select the file indicated by the error message earlier (e.g. &lt;em&gt;"C:/path/to/project/.vagrant/machines/default/virtualbox/private_key"&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Once selected, PuTTY is kind enough to tell us what to do with it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;PuttyGen&amp;quot;" src="/images/2015/01/25/vagrant-windows3.png" title="PuttyGen" /&gt;&lt;/p&gt;
&lt;p&gt;Ensure &lt;em&gt;SSH-2 RSA&lt;/em&gt; is selected, and that the number in &lt;em&gt;Number of bits in a generated key&lt;/em&gt; is 2048. Then click on &lt;em&gt;Save private key&lt;/em&gt; (don't set a passphrase) and save it under your own user directory's &lt;em&gt;.ssh&lt;/em&gt; folder, as &lt;em&gt;"vagrant_private_key"&lt;/em&gt;. From now on, we will use this key for all the Vagrant boxes.&lt;/p&gt;
&lt;p&gt;Close PuTTYGen and open PuTTY. In the &lt;em&gt;Hostname&lt;/em&gt; field, type &lt;code&gt;127.0.0.1&lt;/code&gt;. In the &lt;em&gt;Port&lt;/em&gt; one, &lt;code&gt;2222&lt;/code&gt;. Ensure &lt;em&gt;SSH&lt;/em&gt; is selected and, in the &lt;em&gt;Saved Sessions&lt;/em&gt; field, type &lt;code&gt;vagrant&lt;/code&gt; and click &lt;em&gt;Save&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Putty SSH connection configuration 1&amp;quot;" src="/images/2015/01/25/vagrant-windows4.png" title="Putty SSH connection configuration 1" /&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;em&gt;Connection&lt;/em&gt; then &lt;em&gt;Data&lt;/em&gt;, and in the &lt;em&gt;Auto-login username&lt;/em&gt; field, enter &lt;em&gt;"vagrant"&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Putty SSH connection configuration 2&amp;quot;" src="/images/2015/01/25/vagrant-windows5.png" title="Putty SSH connection configuration 2" /&gt;&lt;/p&gt;
&lt;p&gt;Next, still  under &lt;em&gt;Connection&lt;/em&gt;, go to &lt;em&gt;SSH&lt;/em&gt; then &lt;em&gt;Auth&lt;/em&gt;. Browse for the key you generated earlier in the &lt;em&gt;Private key file for authentication&lt;/em&gt; field. Now head back to the &lt;em&gt;Session&lt;/em&gt; menu, save again the &lt;em&gt;"vagrant"&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;Now click on &lt;em&gt;Open&lt;/em&gt;: if everything went alright, you should now be in your Vagrant box ＼(^o^)／&lt;/p&gt;
&lt;h3 id="using-multiple-vagrant-boxes-simultaneously"&gt;Using multiple Vagrant boxes simultaneously&lt;/h3&gt;
&lt;p&gt;Now let's say you already have a box running, and you need to start a second one. You &lt;code&gt;vagrant up&lt;/code&gt; it, the Virtual Machine boots and you want to &lt;code&gt;SSH&lt;/code&gt; it. But all the boxes cannot use the same SSH port!&lt;/p&gt;
&lt;p&gt;It all happens when the box is being booted:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Windows console&amp;quot;" src="/images/2015/01/25/vagrant-windows6.png" title="Windows console" /&gt;&lt;/p&gt;
&lt;p&gt;See the highlighted line? Seeing port 2222 was busy already, Vagrant picked the port 2200 instead.&lt;/p&gt;
&lt;p&gt;Now to &lt;code&gt;SSH&lt;/code&gt; it using PuTTY, open it, load the &lt;em&gt;"vagrant"&lt;/em&gt; session, and in the &lt;em&gt;Port&lt;/em&gt; field, replace &lt;em&gt;"2222"&lt;/em&gt; with &lt;em&gt;"2200"&lt;/em&gt;. Click &lt;em&gt;Open&lt;/em&gt;: there you are, connected to the second box.&lt;/p&gt;
&lt;h2 id="known-limitations"&gt;Known limitations&lt;/h2&gt;
&lt;h3 id="shared-folders-and-symlinks"&gt;Shared folders and symlinks&lt;/h3&gt;
&lt;p&gt;One of the fairly known limitations of using Vagrant on Windows with VirtualBox is that the latter won't let you create symlinks on the shared folders for security reasons. This quickly becomes problematic when dealing with npm packages, for example.&lt;/p&gt;
&lt;p&gt;One of the workarounds is to use the &lt;em&gt;"no bin link"&lt;/em&gt; parameter (e.g. &lt;code&gt;npm install --no-bin-link&lt;/code&gt;), but this is not always enough.&lt;/p&gt;
&lt;p&gt;Fortunately, there is a way to bypass this restriction. In your Vagrantfile, add the following piece of config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.vm.provider "virtualbox" do |v|
  v.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As Windows won't let standard users create symlinks, you now need to start your Vagrant box in administrator mode (open a Windows terminal in admin mode before running &lt;code&gt;vagrant up&lt;/code&gt;, for example). Make sure no other box is already running though, as it won't start if VirtualBox is already running in standard mode.&lt;/p&gt;
&lt;h3 id="maximum-path-length"&gt;Maximum path length&lt;/h3&gt;
&lt;p&gt;Another recurring problem comes from the fact that Windows' maximum length for a path is 255 characters. Again, this is quickly an issue when dealing with npm packages, especially when they have dependencies, themselves having dependencies, etc.&lt;/p&gt;
&lt;p&gt;The solution in that case is to create a symbolic link between the &lt;em&gt;"node_modules"&lt;/em&gt; directory and another directory outside of the shared folders.&lt;/p&gt;
&lt;p&gt;Which brings us to our practical example.&lt;/p&gt;
&lt;h3 id="practical-example-npm-packages"&gt;Practical example: npm packages&lt;/h3&gt;
&lt;p&gt;So you have this project relying on npm packages. You tried to install them using &lt;code&gt;--no-bin-link&lt;/code&gt; but no luck, looks like some of the paths are too long.&lt;/p&gt;
&lt;p&gt;Fear not, Macless: update your Vagrant config as shown above to allow the creation of symlinks, boot your VM in admin mode, create a destination directory for your npm packages somewhere outside of the shared folder and create a symlink between it and the &lt;em&gt;"node_modules"&lt;/em&gt; one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/node_modules
ln -s /home/vagrant/node_modules /vagrant/node_modules
cd /vagrant
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this implies preventing the &lt;em&gt;"node_modules"&lt;/em&gt; directory from being versionned.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here you go, now using Vagrant on Windows in decent conditions.&lt;/p&gt;
&lt;p&gt;The process can look a bit convoluted, and really it is. It took me quite a while to put everything together, and if today I am rather satisfied, I am still a bit bugged about the multiple Vagrant boxes part. Having to check the SSH port and update it in the PuTTY session everytime is a bit annoying, even though dealing with several instances at the same time might be an edge case.&lt;/p&gt;
&lt;p&gt;Anyways, if you have any suggestions about that, don't hesitate to leave a comment.&lt;/p&gt;</summary><category term="vagrant"></category><category term="tutorial"></category><category term="windows"></category></entry><entry><title>I've got a blog</title><link href="https://tech.osteel.me/posts/ive-got-a-blog" rel="alternate"></link><published>2014-08-19T00:00:00+01:00</published><updated>2014-08-19T00:00:00+01:00</updated><author><name>osteel</name></author><id>tag:tech.osteel.me,2014-08-19:posts/ive-got-a-blog</id><summary type="html">&lt;h2 id="yeah-finally"&gt;Yeah, finally.&lt;/h2&gt;
&lt;p&gt;It should have been started 8 years ago but well, better late than never, eh? Let's say that's my very own Duke Nukem Forever.&lt;/p&gt;
&lt;h2 id="so-what-will-be-in-there"&gt;So what will be in there?&lt;/h2&gt;
&lt;p&gt;Posts about dev, surely. There &lt;em&gt;should&lt;/em&gt; be one about launching a blog like this one very soon. A blog using &lt;a href="http://blog.getpelican.com/" title="Pelican project's home page"&gt;Pelican&lt;/a&gt;, that is.&lt;/p&gt;
&lt;p&gt;For those of you who happen to speak French and want to read about a random dude's life, go check out the &lt;a href="/category/life.html" title="les trucs persos"&gt;other part of this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy the ride!&lt;/p&gt;</summary><category term="blog"></category></entry></feed>